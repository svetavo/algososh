{"ast":null,"code":"var _jsxFileName = \"/Users/svetavo/dev/algososh/src/components/stack-page/stack-page.tsx\";\nimport React from \"react\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport styles from \"./stack.module.css\";\nimport { Button } from \"../ui/button/button\";\nimport { Input } from \"../ui/input/input\";\nimport { Circle } from \"../ui/circle/circle\";\nimport { ElementStates } from \"../../types/element-states\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// export const StackPage: React.FC = () => {\n//   const [value, setValue] = useState(\"\");\n//   const [isLoader, setIsLoader] = useState<boolean>(false);\n//   const [currentIndex, setCurrentIndex] = useState(-1);\n//   const [stack, setStack] = useState<string[]>([]);\n//   const pushProps = {\n//     value,\n//     stack,\n//     setIsLoader,\n//     setStack,\n//     setCurrentIndex,\n//     currentIndex,\n//     setValue,\n//   };\n//   const popProps = {\n//     stack,\n//     setIsLoader,\n//     setStack,\n//     setCurrentIndex,\n//     currentIndex,\n//   };\n//   const clearProps = {\n//     stack,\n//     setIsLoader,\n//     setStack,\n//   };\n//   const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n//     setValue(e.target.value);\n//   };\n//   const onAdd = () => {\n//     value ? pushStack(pushProps) : alert(\"Введите значение в инпут\");\n//   };\n//   const onDelete = () => {\n//     stack.length ? popStack(popProps) : alert(\"стек пуст\");\n//   };\n//   const onClear = () => {\n//     stack.length ? clearStack(clearProps) : alert(\"стек пуст\");\n//   };\n//   return (\n//     <SolutionLayout title=\"Стек\">\n//       <div className={styles.container}>\n//         <div className={styles.input}>\n//           <Input onChange={onChange} value={value} maxLength={4} />\n//           <Button\n//             text=\"Добавить\"\n//             isLoader={isLoader}\n//             extraClass=\"mr-5\"\n//             onClick={onAdd}\n//           />\n//           <Button\n//             text=\"Удалить\"\n//             isLoader={isLoader}\n//             extraClass=\"mr-20\"\n//             onClick={onDelete}\n//           />\n//           <Button text=\"Очистить\" isLoader={isLoader} onClick={onClear} />\n//         </div>\n//         <div>\n//           <div className={styles.result}>\n//             {stack?.map((item, index) => (\n//               <Circle\n//                 letter={item}\n//                 key={index}\n//                 index={index}\n//                 extraClass={styles.item}\n//                 state={\n//                   currentIndex === index\n//                     ? ElementStates.Changing\n//                     : ElementStates.Default\n//                 }\n//                 head={currentIndex === index ? \"top\" : null}\n//               />\n//             ))}\n//           </div>\n//         </div>\n//       </div>\n//     </SolutionLayout>\n//   );\n// };\nz;\n\nclass StackPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.pushStack = () => {\n      const {\n        value,\n        stack,\n        setIsLoader,\n        setStack,\n        setCurrentIndex,\n        currentIndex,\n        setValue\n      } = this.state;\n      setIsLoader(true);\n      setTimeout(() => {\n        setStack([...stack, value]);\n        setCurrentIndex(currentIndex + 1);\n        setValue(\"\");\n        setIsLoader(false);\n      }, 1000);\n    };\n\n    this.popStack = () => {\n      const {\n        stack,\n        setIsLoader,\n        setStack,\n        setCurrentIndex,\n        currentIndex\n      } = this.state;\n      setIsLoader(true);\n      setTimeout(() => {\n        const newStack = [...stack];\n        newStack.pop();\n        setStack(newStack);\n        setCurrentIndex(currentIndex - 1);\n        setIsLoader(false);\n      }, 1000);\n    };\n\n    this.clearStack = () => {\n      const {\n        setIsLoader,\n        setStack\n      } = this.state;\n      setIsLoader(true);\n      setTimeout(() => {\n        setStack([]);\n        setIsLoader(false);\n      }, 1000);\n    };\n\n    this.onChange = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n\n    this.onAdd = () => {\n      const {\n        value\n      } = this.state;\n      value ? this.pushStack() : alert(\"Введите значение в инпут\");\n    };\n\n    this.onDelete = () => {\n      const {\n        stack\n      } = this.state;\n      stack.length ? this.popStack() : alert(\"стек пуст\");\n    };\n\n    this.onClear = () => {\n      const {\n        stack\n      } = this.state;\n      stack.length ? this.clearStack() : alert(\"стек пуст\");\n    };\n\n    this.state = {\n      value: \"\",\n      isLoader: false,\n      currentIndex: -1,\n      stack: []\n    };\n  }\n\n  render() {\n    const {\n      value,\n      isLoader,\n      currentIndex,\n      stack\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(SolutionLayout, {\n      title: \"\\u0421\\u0442\\u0435\\u043A\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.container,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.input,\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            onChange: this.onChange,\n            value: value,\n            maxLength: 4\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            text: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\",\n            isLoader: isLoader,\n            extraClass: \"mr-5\",\n            onClick: this.onAdd\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            text: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\",\n            isLoader: isLoader,\n            extraClass: \"mr-20\",\n            onClick: this.onDelete\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            text: \"\\u041E\\u0447\\u0438\\u0441\\u0442\\u0438\\u0442\\u044C\",\n            isLoader: isLoader,\n            onClick: this.onClear\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.result,\n            children: stack === null || stack === void 0 ? void 0 : stack.map((item, index) => /*#__PURE__*/_jsxDEV(Circle, {\n              letter: item,\n              index: index,\n              extraClass: styles.item,\n              state: currentIndex === index ? ElementStates.Changing : ElementStates.Default,\n              head: currentIndex === index ? \"top\" : null\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default StackPage;","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/components/stack-page/stack-page.tsx"],"names":["React","SolutionLayout","styles","Button","Input","Circle","ElementStates","z","StackPage","Component","constructor","props","pushStack","value","stack","setIsLoader","setStack","setCurrentIndex","currentIndex","setValue","state","setTimeout","popStack","newStack","pop","clearStack","onChange","e","setState","target","onAdd","alert","onDelete","length","onClear","isLoader","render","container","input","result","map","item","index","Changing","Default"],"mappings":"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","sourcesContent":["import React, { useState, ChangeEvent } from \"react\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport styles from \"./stack.module.css\";\nimport { Button } from \"../ui/button/button\";\nimport { Input } from \"../ui/input/input\";\nimport { Circle } from \"../ui/circle/circle\";\nimport { ElementStates } from \"../../types/element-states\";\nimport { pushStack, popStack, clearStack } from \"../../utils/stack-utils\";\n\n// export const StackPage: React.FC = () => {\n//   const [value, setValue] = useState(\"\");\n//   const [isLoader, setIsLoader] = useState<boolean>(false);\n//   const [currentIndex, setCurrentIndex] = useState(-1);\n//   const [stack, setStack] = useState<string[]>([]);\n//   const pushProps = {\n//     value,\n//     stack,\n//     setIsLoader,\n//     setStack,\n//     setCurrentIndex,\n//     currentIndex,\n//     setValue,\n//   };\n//   const popProps = {\n//     stack,\n//     setIsLoader,\n//     setStack,\n//     setCurrentIndex,\n//     currentIndex,\n//   };\n//   const clearProps = {\n//     stack,\n//     setIsLoader,\n//     setStack,\n//   };\n\n//   const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n//     setValue(e.target.value);\n//   };\n\n//   const onAdd = () => {\n//     value ? pushStack(pushProps) : alert(\"Введите значение в инпут\");\n//   };\n\n//   const onDelete = () => {\n//     stack.length ? popStack(popProps) : alert(\"стек пуст\");\n//   };\n\n//   const onClear = () => {\n//     stack.length ? clearStack(clearProps) : alert(\"стек пуст\");\n//   };\n\n//   return (\n//     <SolutionLayout title=\"Стек\">\n//       <div className={styles.container}>\n//         <div className={styles.input}>\n//           <Input onChange={onChange} value={value} maxLength={4} />\n//           <Button\n//             text=\"Добавить\"\n//             isLoader={isLoader}\n//             extraClass=\"mr-5\"\n//             onClick={onAdd}\n//           />\n//           <Button\n//             text=\"Удалить\"\n//             isLoader={isLoader}\n//             extraClass=\"mr-20\"\n//             onClick={onDelete}\n//           />\n//           <Button text=\"Очистить\" isLoader={isLoader} onClick={onClear} />\n//         </div>\n//         <div>\n//           <div className={styles.result}>\n//             {stack?.map((item, index) => (\n//               <Circle\n//                 letter={item}\n//                 key={index}\n//                 index={index}\n//                 extraClass={styles.item}\n//                 state={\n//                   currentIndex === index\n//                     ? ElementStates.Changing\n//                     : ElementStates.Default\n//                 }\n//                 head={currentIndex === index ? \"top\" : null}\n//               />\n//             ))}\n//           </div>\n//         </div>\n//       </div>\n//     </SolutionLayout>\n//   );\n// };\nz\n\nclass StackPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: \"\",\n      isLoader: false,\n      currentIndex: -1,\n      stack: []\n    };\n  }\n\n  pushStack = () => {\n    const {\n      value,\n      stack,\n      setIsLoader,\n      setStack,\n      setCurrentIndex,\n      currentIndex,\n      setValue\n    } = this.state;\n\n    setIsLoader(true);\n    setTimeout(() => {\n      setStack([...stack, value]);\n      setCurrentIndex(currentIndex + 1);\n      setValue(\"\");\n      setIsLoader(false);\n    }, 1000);\n  };\n\n  popStack = () => {\n    const {\n      stack,\n      setIsLoader,\n      setStack,\n      setCurrentIndex,\n      currentIndex\n    } = this.state;\n\n    setIsLoader(true);\n    setTimeout(() => {\n      const newStack = [...stack];\n      newStack.pop();\n      setStack(newStack);\n      setCurrentIndex(currentIndex - 1);\n      setIsLoader(false);\n    }, 1000);\n  };\n\n  clearStack = () => {\n    const { setIsLoader, setStack } = this.state;\n\n    setIsLoader(true);\n    setTimeout(() => {\n      setStack([]);\n      setIsLoader(false);\n    }, 1000);\n  };\n\n  onChange = (e) => {\n    this.setState({ value: e.target.value });\n  };\n\n  onAdd = () => {\n    const { value } = this.state;\n    value ? this.pushStack() : alert(\"Введите значение в инпут\");\n  };\n\n  onDelete = () => {\n    const { stack } = this.state;\n    stack.length ? this.popStack() : alert(\"стек пуст\");\n  };\n\n  onClear = () => {\n    const { stack } = this.state;\n    stack.length ? this.clearStack() : alert(\"стек пуст\");\n  };\n\n  render() {\n    const { value, isLoader, currentIndex, stack } = this.state;\n\n    return (\n      <SolutionLayout title=\"Стек\">\n        <div className={styles.container}>\n          <div className={styles.input}>\n            <Input onChange={this.onChange} value={value} maxLength={4} />\n            <Button\n              text=\"Добавить\"\n              isLoader={isLoader}\n              extraClass=\"mr-5\"\n              onClick={this.onAdd}\n            />\n            <Button\n              text=\"Удалить\"\n              isLoader={isLoader}\n              extraClass=\"mr-20\"\n              onClick={this.onDelete}\n            />\n            <Button text=\"Очистить\" isLoader={isLoader} onClick={this.onClear} />\n          </div>\n          <div>\n            <div className={styles.result}>\n              {stack?.map((item, index) => (\n                <Circle\n                  letter={item}\n                  key={index}\n                  index={index}\n                  extraClass={styles.item}\n                  state={\n                    currentIndex === index\n                      ? ElementStates.Changing\n                      : ElementStates.Default\n                  }\n                  head={currentIndex === index ? \"top\" : null}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n      </SolutionLayout>\n    );\n  }\n}\n\nexport default StackPage;\n"]},"metadata":{},"sourceType":"module"}