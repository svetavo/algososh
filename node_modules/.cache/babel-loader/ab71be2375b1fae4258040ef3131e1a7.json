{"ast":null,"code":"const maxLength = 7;\nexport const enqueue = _ref => {\n  let {\n    value,\n    queue,\n    tail,\n    currentIndex,\n    setIsLoader,\n    setTail,\n    setCurrentIndex,\n    setValue\n  } = _ref;\n\n  if (value) {\n    setIsLoader(true);\n    queue.splice(currentIndex, 1, value);\n\n    if (queue.length <= maxLength) {\n      setTail(tail + 1);\n      setCurrentIndex(currentIndex + 1);\n    } else {\n      setTail(0);\n      setCurrentIndex(0);\n    }\n\n    setValue(\"\");\n    setIsLoader(false);\n  } else {\n    alert(\"введите значение в инпут\");\n  }\n};\nexport const dequeue = _ref2 => {\n  let {\n    queue,\n    head,\n    setIsLoader,\n    setHead,\n    empr\n  } = _ref2;\n  setIsLoader(true);\n  queue.splice(head, 1, emptyElement);\n\n  if (queue.length <= maxLength) {\n    setHead(head + 1);\n  } else {\n    setHead(0);\n  }\n\n  setIsLoader(false);\n};\nexport const clearQueue = _ref3 => {\n  let {\n    setIsLoader,\n    setQueue,\n    setTail,\n    setCurrentIndex,\n    setHead\n  } = _ref3;\n  setIsLoader(true);\n  setQueue(emptyArr);\n  setTail(0);\n  setCurrentIndex(0);\n  setHead(0);\n  setIsLoader(false);\n};","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/utils/queue-utils.ts"],"names":["maxLength","enqueue","value","queue","tail","currentIndex","setIsLoader","setTail","setCurrentIndex","setValue","splice","length","alert","dequeue","head","setHead","empr","emptyElement","clearQueue","setQueue","emptyArr"],"mappings":"AAqBA,MAAMA,SAAS,GAAG,CAAlB;AAEA,OAAO,MAAMC,OAAO,GAAG,QASH;AAAA,MATI;AACtBC,IAAAA,KADsB;AAEtBC,IAAAA,KAFsB;AAGtBC,IAAAA,IAHsB;AAItBC,IAAAA,YAJsB;AAKtBC,IAAAA,WALsB;AAMtBC,IAAAA,OANsB;AAOtBC,IAAAA,eAPsB;AAQtBC,IAAAA;AARsB,GASJ;;AAClB,MAAIP,KAAJ,EAAW;AACTI,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAH,IAAAA,KAAK,CAACO,MAAN,CAAaL,YAAb,EAA2B,CAA3B,EAA8BH,KAA9B;;AACA,QAAIC,KAAK,CAACQ,MAAN,IAAgBX,SAApB,EAA+B;AAC7BO,MAAAA,OAAO,CAACH,IAAI,GAAG,CAAR,CAAP;AACAI,MAAAA,eAAe,CAACH,YAAY,GAAG,CAAhB,CAAf;AACD,KAHD,MAGO;AACLE,MAAAA,OAAO,CAAC,CAAD,CAAP;AACAC,MAAAA,eAAe,CAAC,CAAD,CAAf;AACD;;AACDC,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACAH,IAAAA,WAAW,CAAC,KAAD,CAAX;AACD,GAZD,MAYO;AACLM,IAAAA,KAAK,CAAC,0BAAD,CAAL;AACD;AACF,CAzBM;AA2BP,OAAO,MAAMC,OAAO,GAAG,SAMH;AAAA,MANI;AACtBV,IAAAA,KADsB;AAEtBW,IAAAA,IAFsB;AAGtBR,IAAAA,WAHsB;AAItBS,IAAAA,OAJsB;AAKtBC,IAAAA;AALsB,GAMJ;AAClBV,EAAAA,WAAW,CAAC,IAAD,CAAX;AACAH,EAAAA,KAAK,CAACO,MAAN,CAAaI,IAAb,EAAmB,CAAnB,EAAsBG,YAAtB;;AACA,MAAId,KAAK,CAACQ,MAAN,IAAgBX,SAApB,EAA+B;AAC7Be,IAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACD,GAFD,MAEO;AACLC,IAAAA,OAAO,CAAC,CAAD,CAAP;AACD;;AACDT,EAAAA,WAAW,CAAC,KAAD,CAAX;AACD,CAfM;AAiBP,OAAO,MAAMY,UAAU,GAAG,SAMN;AAAA,MANO;AACzBZ,IAAAA,WADyB;AAEzBa,IAAAA,QAFyB;AAGzBZ,IAAAA,OAHyB;AAIzBC,IAAAA,eAJyB;AAKzBO,IAAAA;AALyB,GAMP;AAClBT,EAAAA,WAAW,CAAC,IAAD,CAAX;AACAa,EAAAA,QAAQ,CAACC,QAAD,CAAR;AACAb,EAAAA,OAAO,CAAC,CAAD,CAAP;AACAC,EAAAA,eAAe,CAAC,CAAD,CAAf;AACAO,EAAAA,OAAO,CAAC,CAAD,CAAP;AACAT,EAAAA,WAAW,CAAC,KAAD,CAAX;AACD,CAbM","sourcesContent":["import { delay } from \"./utils\";\nimport { Dispatch, SetStateAction } from \"react\";\n\ntype Dispatcher<S> = Dispatch<SetStateAction<S>>;\n\ninterface IProps {\n  value: string;\n  queue: string[];\n  tail: number;\n  head: number;\n  currentIndex: number;\n  emptyElement: string;\n  emptyArray: string[];\n  setIsLoader: Dispatcher<boolean>;\n  setValue: Dispatcher<string>;\n  setQueue: Dispatcher<string[]>;\n  setTail: Dispatcher<number>;\n  setHead: Dispatch<number>;\n  setCurrentIndex: Dispatcher<number>;\n}\n\nconst maxLength = 7;\n\nexport const enqueue = ({\n  value,\n  queue,\n  tail,\n  currentIndex,\n  setIsLoader,\n  setTail,\n  setCurrentIndex,\n  setValue,\n}: IProps): void => {\n  if (value) {\n    setIsLoader(true);\n    queue.splice(currentIndex, 1, value);\n    if (queue.length <= maxLength) {\n      setTail(tail + 1);\n      setCurrentIndex(currentIndex + 1);\n    } else {\n      setTail(0);\n      setCurrentIndex(0);\n    }\n    setValue(\"\");\n    setIsLoader(false);\n  } else {\n    alert(\"введите значение в инпут\");\n  }\n};\n\nexport const dequeue = ({\n  queue,\n  head,\n  setIsLoader,\n  setHead,\n  empr\n}: IProps): void => {\n  setIsLoader(true);\n  queue.splice(head, 1, emptyElement);\n  if (queue.length <= maxLength) {\n    setHead(head + 1);\n  } else {\n    setHead(0);\n  }\n  setIsLoader(false);\n};\n\nexport const clearQueue = ({\n  setIsLoader,\n  setQueue,\n  setTail,\n  setCurrentIndex,\n  setHead,\n}: IProps): void => {\n  setIsLoader(true);\n  setQueue(emptyArr);\n  setTail(0);\n  setCurrentIndex(0);\n  setHead(0);\n  setIsLoader(false);\n};\n"]},"metadata":{},"sourceType":"module"}