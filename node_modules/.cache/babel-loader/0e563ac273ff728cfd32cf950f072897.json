{"ast":null,"code":"var _jsxFileName = \"/Users/svetavo/dev/algososh/src/components/fibonacci-page/fibonacci-page.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport styles from \"./fibonacci.module.css\";\nimport { Input } from \"../ui/input/input\";\nimport { Button } from \"../ui/button/button\";\nimport { Circle } from \"../ui/circle/circle\";\nimport { fibonacci } from \"../../utils/fibonacci-utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const FibonacciPage = () => {\n  _s();\n\n  const [value, setValue] = useState();\n  const [isOpen, setIsOpen] = useState(false);\n  const [result, setResult] = useState(null);\n  const [isLoader, setIsLoader] = useState(false);\n\n  const onChange = e => {\n    setValue(e.target.value);\n  };\n\n  const onClick = value => {\n    setResult(null);\n    setIsLoader(true);\n    fibonacci(value, result, lo, setValue);\n    setIsOpen(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(SolutionLayout, {\n    title: \"\\u041F\\u043E\\u0441\\u043B\\u0435\\u0434\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044C\\u043D\\u043E\\u0441\\u0442\\u044C \\u0424\\u0438\\u0431\\u043E\\u043D\\u0430\\u0447\\u0447\\u0438\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.input,\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          onChange: onChange,\n          type: \"text\",\n          value: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"\\u0420\\u0430\\u0441\\u0441\\u0447\\u0438\\u0442\\u0430\\u0442\\u044C\",\n          onClick: () => onClick(value),\n          isLoader: isLoader\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: isOpen ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.result,\n          children: result !== null && result !== void 0 && result.length ? result.map((item, index) => /*#__PURE__*/_jsxDEV(Circle, {\n            letter: item,\n            extraClass: styles.item\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 21\n          }, this)) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FibonacciPage, \"Icdgclf41dXNubWF5iAOToG0fEM=\");\n\n_c = FibonacciPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"FibonacciPage\");","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/components/fibonacci-page/fibonacci-page.tsx"],"names":["React","useState","SolutionLayout","styles","Input","Button","Circle","fibonacci","FibonacciPage","value","setValue","isOpen","setIsOpen","result","setResult","isLoader","setIsLoader","onChange","e","target","onClick","lo","container","input","length","map","item","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA6C,OAA7C;AACA,SAASC,cAAT,QAA+B,uCAA/B;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,SAASC,KAAT,QAAsB,mBAAtB;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SAASC,SAAT,QAA0B,6BAA1B;;AAEA,OAAO,MAAMC,aAAuB,GAAG,MAAM;AAAA;;AAC3C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,EAAlC;AACA,QAAM,CAACU,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAe,IAAf,CAApC;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAU,KAAV,CAAxC;;AAEA,QAAMgB,QAAQ,GAAIC,CAAD,IAAsC;AACrDR,IAAAA,QAAQ,CAACQ,CAAC,CAACC,MAAF,CAASV,KAAV,CAAR;AACD,GAFD;;AAIA,QAAMW,OAAO,GAAIX,KAAD,IAAmB;AACjCK,IAAAA,SAAS,CAAC,IAAD,CAAT;AACAE,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAT,IAAAA,SAAS,CAACE,KAAD,EAAQI,MAAR,EAAgBQ,EAAhB,EAAoBX,QAApB,CAAT;AACAE,IAAAA,SAAS,CAAC,IAAD,CAAT;AACD,GALD;;AAOA,sBACE,QAAC,cAAD;AAAgB,IAAA,KAAK,EAAC,qKAAtB;AAAA,2BACE;AAAK,MAAA,SAAS,EAAET,MAAM,CAACmB,SAAvB;AAAA,8BACE;AAAK,QAAA,SAAS,EAAEnB,MAAM,CAACoB,KAAvB;AAAA,gCACE,QAAC,KAAD;AAAO,UAAA,QAAQ,EAAEN,QAAjB;AAA2B,UAAA,IAAI,EAAC,MAAhC;AAAwC,UAAA,KAAK,EAAER;AAA/C;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,8DAAb;AAA0B,UAAA,OAAO,EAAE,MAAMW,OAAO,CAACX,KAAD,CAAhD;AAAyD,UAAA,QAAQ,EAAEM;AAAnE;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAA,kBACGJ,MAAM,gBACL;AAAK,UAAA,SAAS,EAAER,MAAM,CAACU,MAAvB;AAAA,oBACGA,MAAM,SAAN,IAAAA,MAAM,WAAN,IAAAA,MAAM,CAAEW,MAAR,GACGX,MAAM,CAACY,GAAP,CAAW,CAACC,IAAD,EAAOC,KAAP,kBACT,QAAC,MAAD;AACE,YAAA,MAAM,EAAED,IADV;AAGE,YAAA,UAAU,EAAEvB,MAAM,CAACuB;AAHrB,aAEOC,KAFP;AAAA;AAAA;AAAA;AAAA,kBADF,CADH,GAQG;AATN;AAAA;AAAA;AAAA;AAAA,gBADK,GAYH;AAbN;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAyBD,CA1CM;;GAAMnB,a;;KAAAA,a","sourcesContent":["import React, { useState, ChangeEvent } from \"react\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport styles from \"./fibonacci.module.css\";\nimport { Input } from \"../ui/input/input\";\nimport { Button } from \"../ui/button/button\";\nimport { Circle } from \"../ui/circle/circle\";\nimport { fibonacci } from \"../../utils/fibonacci-utils\";\n\nexport const FibonacciPage: React.FC = () => {\n  const [value, setValue] = useState<any>();\n  const [isOpen, setIsOpen] = useState(false);\n  const [result, setResult] = useState<null | any[]>(null);\n  const [isLoader, setIsLoader] = useState<boolean>(false);\n\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setValue(e.target.value);\n  };\n\n  const onClick = (value: number) => {\n    setResult(null);\n    setIsLoader(true);\n    fibonacci(value, result, lo, setValue);\n    setIsOpen(true);\n  };\n\n  return (\n    <SolutionLayout title=\"Последовательность Фибоначчи\">\n      <div className={styles.container}>\n        <div className={styles.input}>\n          <Input onChange={onChange} type=\"text\"  value={value}/>\n          <Button text=\"Рассчитать\" onClick={() => onClick(value)} isLoader={isLoader}/>\n        </div>\n        <div>\n          {isOpen ? (\n            <div className={styles.result}>\n              {result?.length\n                ? result.map((item, index) => (\n                    <Circle\n                      letter={item}\n                      key={index}\n                      extraClass={styles.item}\n                    />\n                  ))\n                : null}\n            </div>\n          ) : null}\n        </div>\n      </div>\n    </SolutionLayout>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}