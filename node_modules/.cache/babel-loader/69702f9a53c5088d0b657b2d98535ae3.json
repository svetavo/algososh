{"ast":null,"code":"import { delay } from \"./utils\";\nexport const fibonacci = async _ref => {\n  let {\n    value,\n    setResult,\n    setIsLoader,\n    setValue\n  } = _ref;\n  const valueNum = Number(value);\n\n  if (valueNum >= 1 && valueNum <= 19) {\n    let arr = [0];\n    await delay(500);\n    setResult(arr);\n    await delay(500);\n    arr.push(1);\n    await delay(500);\n    setResult(arr);\n\n    for (let i = 2; i <= valueNum; i++) {\n      await delay(500);\n      arr[i] = arr[i - 2] + arr[i - 1];\n      setResult(arr.slice(0, i + 1));\n    }\n\n    setIsLoader(false);\n    setValue(\"\");\n  } else {\n    setIsLoader(false);\n    return null;\n  }\n};","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/utils/fibonacci-utils.ts"],"names":["delay","fibonacci","value","setResult","setIsLoader","setValue","valueNum","Number","arr","push","i","slice"],"mappings":"AAAA,SAASA,KAAT,QAAsB,SAAtB;AAYA,OAAO,MAAMC,SAAS,GAAG,cAKX;AAAA,MALkB;AAC9BC,IAAAA,KAD8B;AAE9BC,IAAAA,SAF8B;AAG9BC,IAAAA,WAH8B;AAI9BC,IAAAA;AAJ8B,GAKlB;AACZ,QAAMC,QAAQ,GAAGC,MAAM,CAACL,KAAD,CAAvB;;AACA,MAAII,QAAQ,IAAI,CAAZ,IAAiBA,QAAQ,IAAI,EAAjC,EAAqC;AACnC,QAAIE,GAAa,GAAG,CAAC,CAAD,CAApB;AACA,UAAMR,KAAK,CAAC,GAAD,CAAX;AACAG,IAAAA,SAAS,CAACK,GAAD,CAAT;AACA,UAAMR,KAAK,CAAC,GAAD,CAAX;AACAQ,IAAAA,GAAG,CAACC,IAAJ,CAAS,CAAT;AACA,UAAMT,KAAK,CAAC,GAAD,CAAX;AACAG,IAAAA,SAAS,CAACK,GAAD,CAAT;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIJ,QAArB,EAA+BI,CAAC,EAAhC,EAAoC;AAClC,YAAMV,KAAK,CAAC,GAAD,CAAX;AACAQ,MAAAA,GAAG,CAACE,CAAD,CAAH,GAASF,GAAG,CAACE,CAAC,GAAG,CAAL,CAAH,GAAaF,GAAG,CAACE,CAAC,GAAG,CAAL,CAAzB;AACAP,MAAAA,SAAS,CAACK,GAAG,CAACG,KAAJ,CAAU,CAAV,EAAaD,CAAC,GAAG,CAAjB,CAAD,CAAT;AACD;;AACDN,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAC,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,GAfD,MAeO;AACLD,IAAAA,WAAW,CAAC,KAAD,CAAX;AACA,WAAO,IAAP;AACD;AACF,CA1BM","sourcesContent":["import { delay } from \"./utils\";\nimport { Dispatch, SetStateAction } from \"react\";\n\ntype Dispatcher<S> = Dispatch<SetStateAction<S>>;\n\ninterface IProps {\n  value: string;\n  setResult: Dispatcher<number[] | null>;\n  setIsLoader: Dispatcher<boolean>;\n  setValue: Dispatcher<string>;\n}\n\nexport const fibonacci = async ({\n  value,\n  setResult,\n  setIsLoader,\n  setValue,\n}: IProps) => {\n  const valueNum = Number(value);\n  if (valueNum >= 1 && valueNum <= 19) {\n    let arr: number[] = [0];\n    await delay(500);\n    setResult(arr);\n    await delay(500);\n    arr.push(1);\n    await delay(500);\n    setResult(arr);\n    for (let i = 2; i <= valueNum; i++) {\n      await delay(500);\n      arr[i] = arr[i - 2] + arr[i - 1];\n      setResult(arr.slice(0, i + 1));\n    }\n    setIsLoader(false);\n    setValue(\"\");\n  } else {\n    setIsLoader(false);\n    return null;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}