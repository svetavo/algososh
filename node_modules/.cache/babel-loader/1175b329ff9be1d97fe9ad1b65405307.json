{"ast":null,"code":"var _jsxFileName = \"/Users/svetavo/dev/algososh/src/components/string/string.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport { Input } from \"../ui/input/input\";\nimport { Circle } from \"../ui/circle/circle\";\nimport { Button } from \"../ui/button/button\";\nimport styles from \"./string.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const StringComponent = () => {\n  _s();\n\n  const [value, setValue] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [arr, setArr] = useState(null);\n\n  const expand = value => {\n    const newArr = Array.from(value);\n    setArr(Array.from(value));\n    quickSortRecursive(newArr, 0, newArr.length - 1);\n    setArr(Array.from(value)); // reverseString(value);\n\n    setIsOpen(true);\n  };\n\n  const delay = ms => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }; // const reverseString = async (arr: string) => {\n  //   let reversedString = \"\";\n  //   for (let i = arr.length; i > 0; i--) {\n  //     reversedString += arr.substring(i, i - 1);\n  //   }\n  //   await delay(1000);\n  //   const reversedArr = Array.from(reversedString);\n  //   setArr(reversedArr);\n  // };\n\n\n  const onChange = e => {\n    setValue(e.target.value);\n  };\n\n  const swap = (arr, a, b) => {\n    const temp = arr[a];\n    arr[a] = arr[b];\n    arr[b] = temp;\n  };\n\n  function partition(arr, start, end) {\n    // Taking the last element as the pivot\n    const pivotValue = arr[end];\n    let pivotIndex = start;\n\n    for (let i = start; i < end; i++) {\n      if (arr[i] < pivotValue) {\n        // Swapping elements\n        [arr[i], arr[pivotIndex]] = [arr[pivotIndex], arr[i]]; // Moving to next element\n\n        pivotIndex++;\n      }\n    } // Putting the pivot value in the middle\n\n\n    [arr[pivotIndex], arr[end]] = [arr[end], arr[pivotIndex]];\n    return pivotIndex;\n  }\n\n  ;\n\n  function quickSortRecursive(arr, start, end) {\n    // Base case or terminating case\n    if (start >= end) {\n      return;\n    } // Returns pivotIndex\n\n\n    let index = partition(arr, start, end); // Recursively apply the same logic to the left and right subarrays\n\n    quickSortRecursive(arr, start, index - 1);\n    quickSortRecursive(arr, index + 1, end);\n  }\n\n  return /*#__PURE__*/_jsxDEV(SolutionLayout, {\n    title: \"\\u0421\\u0442\\u0440\\u043E\\u043A\\u0430\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.input,\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          onChange: onChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"\\u0420\\u0430\\u0437\\u0432\\u0435\\u0440\\u043D\\u0443\\u0442\\u044C\",\n          onClick: () => expand(value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: isOpen ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.result,\n          children: arr === null || arr === void 0 ? void 0 : arr.map(item => /*#__PURE__*/_jsxDEV(Circle, {\n            letter: item\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StringComponent, \"ZwsrpSMiL/mHEQ9RPuEq42gL2Rk=\");\n\n_c = StringComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"StringComponent\");","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/components/string/string.tsx"],"names":["React","useState","SolutionLayout","Input","Circle","Button","styles","StringComponent","value","setValue","isOpen","setIsOpen","arr","setArr","expand","newArr","Array","from","quickSortRecursive","length","delay","ms","Promise","resolve","setTimeout","onChange","e","target","swap","a","b","temp","partition","start","end","pivotValue","pivotIndex","i","index","container","input","result","map","item"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport { Input } from \"../ui/input/input\";\nimport { Circle } from \"../ui/circle/circle\";\nimport { Button } from \"../ui/button/button\";\nimport styles from \"./string.module.css\";\nimport { ArrowUpIcon } from \"@ya.praktikum/react-developer-burger-ui-components\";\n\nexport const StringComponent: React.FC = () => {\n  const [value, setValue] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [arr, setArr] = useState<null | any[]>(null);\n\n  const expand = (value: string) => {\n    const newArr = Array.from(value)\n    setArr(Array.from(value));\n\n    quickSortRecursive(newArr, 0, newArr.length-1)\n    setArr(Array.from(value));\n\n    // reverseString(value);\n    setIsOpen(true);\n  };\n\n  const delay = (ms: number) => {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  };\n\n  // const reverseString = async (arr: string) => {\n  //   let reversedString = \"\";\n\n  //   for (let i = arr.length; i > 0; i--) {\n  //     reversedString += arr.substring(i, i - 1);\n  //   }\n  //   await delay(1000);\n  //   const reversedArr = Array.from(reversedString);\n  //   setArr(reversedArr);\n  // };\n\n  const onChange = (e: any) => {\n    setValue(e.target.value);\n  };\n\n  const swap = (arr: any[], a: number, b: number): void => {\n    const temp = arr[a];\n    arr[a] = arr[b];\n    arr[b] = temp;\n  };\n\n  function partition(arr, start, end){\n    // Taking the last element as the pivot\n    const pivotValue = arr[end];\n    let pivotIndex = start; \n    for (let i = start; i < end; i++) {\n        if (arr[i] < pivotValue) {\n        // Swapping elements\n        [arr[i], arr[pivotIndex]] = [arr[pivotIndex], arr[i]];\n        // Moving to next element\n        pivotIndex++;\n        }\n    }\n    \n    // Putting the pivot value in the middle\n    [arr[pivotIndex], arr[end]] = [arr[end], arr[pivotIndex]] \n    return pivotIndex;\n};\nfunction quickSortRecursive(arr, start, end) {\n  // Base case or terminating case\n  if (start >= end) {\n      return;\n  }\n  \n  // Returns pivotIndex\n  let index = partition(arr, start, end);\n  \n  // Recursively apply the same logic to the left and right subarrays\n  quickSortRecursive(arr, start, index - 1);\n  quickSortRecursive(arr, index + 1, end);\n}\n\n\n  return (\n    <SolutionLayout title=\"Строка\">\n      <div className={styles.container}>\n        <div className={styles.input}>\n          <Input onChange={onChange} />\n          <Button text=\"Развернуть\" onClick={() => expand(value)} />\n        </div>\n        <div>\n          {isOpen ? (\n            <div className={styles.result}>\n              {arr?.map((item: string) => (\n                <Circle letter={item} />\n              ))}\n            </div>\n          ) : null}\n        </div>\n      </div>\n    </SolutionLayout>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}