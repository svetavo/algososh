{"ast":null,"code":"class Queue {\n  constructor() {\n    this.queue = [];\n    this.head = 0;\n    this.tail = -1;\n    this.currentIndex = 0;\n    this.maxSize = 8;\n\n    this.enqueue = (index, item, array) => {\n      if (this.getSize() < this.maxSize) {\n        array.splice(index, 1, item);\n        this.tail++;\n        this.currentIndex++;\n        this.queue = array;\n      } else {\n        throw new Error('Слишком много элементов');\n      }\n    };\n\n    this.dequeue = (index, item, array) => {\n      if (this.tail < this.head) {\n        array.splice(index, 1, item);\n        this.head++;\n      } else {\n        this.head = 0;\n      }\n\n      this.queue = array;\n    };\n\n    this.peak = () => {\n      if (this.getSize()) {\n        return this.queue[this.getSize() - 1];\n      }\n\n      return null;\n    };\n\n    this.clear = () => {\n      this.queue = [];\n    };\n\n    this.getSize = () => this.queue.length;\n\n    this.printStack = () => this.queue;\n\n    this.isFull = () => {\n      if (this.getSize() < this.maxSize) {\n        return false;\n      }\n\n      return true;\n    };\n  }\n\n}\n\nexport const queue = new Queue();","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/components/queue-page/queue_class.tsx"],"names":["Queue","queue","head","tail","currentIndex","maxSize","enqueue","index","item","array","getSize","splice","Error","dequeue","peak","clear","length","printStack","isFull"],"mappings":"AAWE,MAAMA,KAAN,CAA8B;AAAA;AAAA,SAE5BC,KAF4B,GAEV,EAFU;AAAA,SAG3BC,IAH2B,GAGpB,CAHoB;AAAA,SAI3BC,IAJ2B,GAIpB,CAAC,CAJmB;AAAA,SAK3BC,YAL2B,GAKZ,CALY;AAAA,SAMpBC,OANoB,GAMV,CANU;;AAAA,SAQ5BC,OAR4B,GAQlB,CAACC,KAAD,EAAgBC,IAAhB,EAA8BC,KAA9B,KAAkD;AAC1D,UAAI,KAAKC,OAAL,KAAiB,KAAKL,OAA1B,EAAmC;AACjCI,QAAAA,KAAK,CAACE,MAAN,CAAaJ,KAAb,EAAoB,CAApB,EAAuBC,IAAvB;AACA,aAAKL,IAAL;AACA,aAAKC,YAAL;AACA,aAAKH,KAAL,GAAaQ,KAAb;AACD,OALD,MAKO;AACH,cAAM,IAAIG,KAAJ,CAAU,yBAAV,CAAN;AACH;AACF,KAjB2B;;AAAA,SAmB5BC,OAnB4B,GAmBlB,CAACN,KAAD,EAAgBC,IAAhB,EAA8BC,KAA9B,KAAwD;AAChE,UAAI,KAAKN,IAAL,GAAY,KAAKD,IAArB,EAA2B;AACzBO,QAAAA,KAAK,CAACE,MAAN,CAAaJ,KAAb,EAAoB,CAApB,EAAuBC,IAAvB;AACA,aAAKN,IAAL;AACD,OAHD,MAGO;AACH,aAAKA,IAAL,GAAU,CAAV;AACH;;AACD,WAAKD,KAAL,GAAaQ,KAAb;AACD,KA3B2B;;AAAA,SA6B5BK,IA7B4B,GA6BrB,MAAgB;AACrB,UAAI,KAAKJ,OAAL,EAAJ,EAAoB;AAClB,eAAO,KAAKT,KAAL,CAAW,KAAKS,OAAL,KAAiB,CAA5B,CAAP;AACD;;AACD,aAAO,IAAP;AACD,KAlC2B;;AAAA,SAoC5BK,KApC4B,GAoCpB,MAAY;AAClB,WAAKd,KAAL,GAAa,EAAb;AACD,KAtC2B;;AAAA,SAwC5BS,OAxC4B,GAwClB,MAAM,KAAKT,KAAL,CAAWe,MAxCC;;AAAA,SA0C5BC,UA1C4B,GA0Cf,MAAM,KAAKhB,KA1CI;;AAAA,SA4C5BiB,MA5C4B,GA4CnB,MAAM;AACb,UAAI,KAAKR,OAAL,KAAiB,KAAKL,OAA1B,EAAmC;AACjC,eAAO,KAAP;AACD;;AACD,aAAO,IAAP;AACD,KAjD2B;AAAA;;AAAA;;AAoD9B,OAAO,MAAMJ,KAAK,GAAG,IAAID,KAAJ,EAAd","sourcesContent":["\ninterface IQueue {\n    enqueue: (index: number, item: string, array: string[]) => void;\n    dequeue: (index: number, item: string, array: string[]) => void;\n    peak: () => number | null;\n    getSize: () => number;\n    printStack: () => number[];\n    clear: () => void;\n    isFull: () => boolean;\n  }\n  \n  class Queue implements IQueue {\n    \n    queue: string[] = [];\n     head = 0;\n     tail = -1;\n     currentIndex = 0;\n    private maxSize = 8;\n  \n    enqueue = (index: number, item: string, array: string[]) => {\n      if (this.getSize() < this.maxSize) {\n        array.splice(index, 1, item);\n        this.tail++\n        this.currentIndex++\n        this.queue = array\n      } else {\n          throw new Error('Слишком много элементов')\n      }\n    };\n  \n    dequeue = (index: number, item: string, array: string[]): void => {\n      if (this.tail < this.head) {\n        array.splice(index, 1, item);\n        this.head++\n      } else {\n          this.head=0\n      }\n      this.queue = array\n    };\n  \n    peak = (): T | null => {\n      if (this.getSize()) {\n        return this.queue[this.getSize() - 1];\n      }\n      return null;\n    };\n  \n    clear = (): void => {\n      this.queue = [];\n    };\n  \n    getSize = () => this.queue.length;\n  \n    printStack = () => this.queue;\n  \n    isFull = () => {\n      if (this.getSize() < this.maxSize) {\n        return false;\n      }\n      return true;\n    };\n  }\n  \n  export const queue = new Queue<string>();\n  "]},"metadata":{},"sourceType":"module"}