{"ast":null,"code":"import { delay } from \"../utils/utils\";\nimport { list } from \"../components/list-page/List\";\nimport { ElementStates } from \"../types/element-states\";\n// добавить в head\nexport const addHead = async _ref => {\n  let {\n    array,\n    value,\n    setValue,\n    setIsLoader,\n    setIsDisabled,\n    setHead,\n    setTail,\n    setArray,\n    setIsChanging\n  } = _ref;\n  setIsLoader(true);\n  setIsDisabled(true);\n  setIsChanging(\"headAdd\");\n  const newEl = {\n    number: value,\n    state: ElementStates.Default\n  };\n  newEl.state = ElementStates.Changing;\n  await delay(500);\n  list.unshift(newEl, array);\n  await delay(500);\n  setArray(list.print());\n  newEl.state = ElementStates.Modified;\n  setHead(list.head);\n  setTail(list.tail);\n  setIsChanging(\"\");\n  await delay(500);\n  newEl.state = ElementStates.Default;\n  setValue(undefined);\n  setIsLoader(false);\n  setIsDisabled(false);\n}; // добавить в tail\n\nexport const addTail = async _ref2 => {\n  let {\n    array,\n    value,\n    setValue,\n    setIsLoader,\n    setArray,\n    setHead,\n    setTail,\n    setIsDisabled,\n    setIsChanging\n  } = _ref2;\n  setIsLoader(true);\n  setIsDisabled(true);\n  setIsChanging(\"tailAdd\");\n  const newEl = {\n    number: value,\n    state: ElementStates.Default\n  };\n  newEl.state = ElementStates.Changing;\n  await delay(500);\n  list.push(newEl, array);\n  await delay(500);\n  setArray(list.print());\n  newEl.state = ElementStates.Modified;\n  setHead(list.head);\n  setTail(list.tail);\n  setIsChanging(\"\");\n  await delay(500);\n  newEl.state = ElementStates.Default;\n  setValue(undefined);\n  setIsLoader(false);\n  setIsDisabled(false);\n}; // удалить из head\n\nexport const removeHead = async _ref3 => {\n  let {\n    array,\n    setIsLoader,\n    setArray,\n    setIsDisabled,\n    setHead,\n    setTail,\n    setIsChanging\n  } = _ref3;\n  setIsLoader(true);\n  setIsDisabled(true);\n  setIsChanging(\"headRemove\");\n  await delay(500);\n  list.shift(array);\n  await delay(500);\n  setArray(list.print());\n  setHead(list.head);\n  setTail(list.tail);\n  setIsChanging(\"\");\n  await delay(500);\n  setIsDisabled(false);\n  setIsLoader(false);\n}; // удалить из tail\n\nexport const removeTail = async _ref4 => {\n  let {\n    array,\n    setIsLoader,\n    setArray,\n    setIsDisabled,\n    setHead,\n    setTail,\n    setIsChanging\n  } = _ref4;\n  setIsLoader(true);\n  setIsDisabled(true);\n  setIsChanging(\"tailRemove\");\n  await delay(500);\n  list.pop(array);\n  await delay(500);\n  setArray(list.print());\n  setHead(list.head);\n  setTail(list.tail);\n  setIsChanging(\"\");\n  await delay(500);\n  setIsDisabled(false);\n  setIsLoader(false);\n}; //добавить по индексу\n\nexport const addIndex = async _ref5 => {\n  let {\n    array,\n    value,\n    setValue,\n    setIndex,\n    index,\n    setIsLoader,\n    setIsDisabled,\n    setHead,\n    setTail,\n    setArray,\n    setIsChanging,\n    setCurrentIndex\n  } = _ref5;\n  setIsLoader(true);\n  setIsDisabled(true);\n  setIsChanging(\"indexAdd\");\n  setCurrentIndex(index);\n  const newEl = {\n    number: value,\n    state: ElementStates.Default\n  };\n  newEl.state = ElementStates.Changing;\n  await delay(500);\n  list.addInd(index, newEl, array);\n  await delay(500);\n  setArray(list.print());\n  newEl.state = ElementStates.Modified;\n  setHead(list.head);\n  setTail(list.tail);\n  setIsChanging(\"\");\n  await delay(500);\n  newEl.state = ElementStates.Default;\n  setValue(undefined);\n  setIndex(undefined);\n  setIsDisabled(false);\n  setIsLoader(false);\n}; //удалить по индексу\n\nexport const removeIndex = async _ref6 => {\n  let {\n    array,\n    index,\n    setIsLoader,\n    setIsDisabled,\n    setHead,\n    setTail,\n    setArray,\n    setCurrentIndex,\n    setIsChanging,\n    setValue,\n    setIndex\n  } = _ref6;\n  setIsLoader(true);\n  setIsDisabled(true);\n  colorSelection({\n    array,\n    index\n  });\n  await delay(1000);\n  setCurrentIndex(index);\n  await delay(1000);\n  setIsChanging(\"indexRemove\");\n  list.removeInd(index, array);\n  await delay(500);\n  setArray(list.print());\n  setHead(list.head);\n  setTail(list.tail);\n  setIsChanging(\"\");\n  array === null || array === void 0 ? void 0 : array.forEach(el => el.state = ElementStates.Default);\n  await delay(500);\n  setIsDisabled(false);\n  setIsLoader(false);\n  setValue(undefined);\n  setIndex(undefined);\n};\n\nconst colorSelection = async _ref7 => {\n  let {\n    array,\n    index\n  } = _ref7;\n\n  for (let i = 0; i < index; i++) {\n    array[i].state = ElementStates.Changing;\n    await delay(1000);\n  }\n};\n\ninterf;\nexport const letterChanger = (index, item, isChanging, head, tail, currentIndex) => {\n  if (isChanging === \"headRemove\" && index === head) {\n    return \"\";\n  } else if (isChanging === \"tailRemove\" && index === tail) {\n    return \"\";\n  } else if (isChanging === \"indexRemove\" && index === currentIndex) {\n    return \"\";\n  } else {\n    return String(item.number);\n  }\n};","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/utils/list-utils.ts"],"names":["delay","list","ElementStates","addHead","array","value","setValue","setIsLoader","setIsDisabled","setHead","setTail","setArray","setIsChanging","newEl","number","state","Default","Changing","unshift","print","Modified","head","tail","undefined","addTail","push","removeHead","shift","removeTail","pop","addIndex","setIndex","index","setCurrentIndex","addInd","removeIndex","colorSelection","removeInd","forEach","el","i","interf","letterChanger","item","isChanging","currentIndex","String"],"mappings":"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","sourcesContent":["import { Dispatch, SetStateAction } from \"react\";\nimport { delay } from \"../utils/utils\";\nimport { list } from \"../components/list-page/List\";\nimport { IArrEl } from \"../utils/utils\";\nimport { ElementStates } from \"../types/element-states\";\nimport { Circle } from \"../components/ui/circle/circle\";\n\ntype Dispatcher<S> = Dispatch<SetStateAction<S>>;\n\ninterface IProps<T> {\n  array?: T[];\n  value?: number;\n  index?: number;\n  setArray: Dispatcher<T[]>;\n  setValue?: Dispatcher<number | undefined>;\n  setIndex?: Dispatcher<number | undefined>;\n  setHead: Dispatcher<number>;\n  setIsLoader: Dispatcher<boolean>;\n  setIsDisabled: Dispatcher<boolean>;\n  setIsChanging?: Dispatcher<string>;\n  setTail: Dispatcher<number>;\n  setCurrentIndex?: Dispatcher<number>;\n}\n\ninterface ISel<T> {\n  array: T[] | undefined;\n  index: number | undefined;\n}\n\n// добавить в head\nexport const addHead = async ({\n  array,\n  value,\n  setValue,\n  setIsLoader,\n  setIsDisabled,\n  setHead,\n  setTail,\n  setArray,\n  setIsChanging,\n}: IProps<IArrEl>) => {\n  setIsLoader(true);\n  setIsDisabled(true);\n  setIsChanging!(\"headAdd\");\n  const newEl = { number: value, state: ElementStates.Default };\n  newEl.state = ElementStates.Changing;\n  await delay(500);\n  list.unshift(newEl, array!);\n  await delay(500);\n  setArray(list.print());\n  newEl.state = ElementStates.Modified;\n  setHead(list.head);\n  setTail(list.tail);\n  setIsChanging!(\"\");\n  await delay(500);\n  newEl.state = ElementStates.Default;\n  setValue!(undefined);\n  setIsLoader(false);\n  setIsDisabled(false);\n};\n\n// добавить в tail\nexport const addTail = async ({\n  array,\n  value,\n  setValue,\n  setIsLoader,\n  setArray,\n  setHead,\n  setTail,\n  setIsDisabled,\n  setIsChanging,\n}: IProps<IArrEl>) => {\n  setIsLoader(true);\n  setIsDisabled(true);\n  setIsChanging!(\"tailAdd\");\n  const newEl = { number: value, state: ElementStates.Default };\n  newEl.state = ElementStates.Changing;\n  await delay(500);\n  list.push(newEl, array!);\n  await delay(500);\n  setArray(list.print());\n  newEl.state = ElementStates.Modified;\n  setHead(list.head);\n  setTail(list.tail);\n  setIsChanging!(\"\");\n  await delay(500);\n  newEl.state = ElementStates.Default;\n  setValue!(undefined);\n  setIsLoader(false);\n  setIsDisabled(false);\n};\n\n// удалить из head\nexport const removeHead = async ({\n  array,\n  setIsLoader,\n  setArray,\n  setIsDisabled,\n  setHead,\n  setTail,\n  setIsChanging,\n}: IProps<IArrEl>) => {\n  setIsLoader(true);\n  setIsDisabled(true);\n  setIsChanging!(\"headRemove\");\n  await delay(500);\n  list.shift(array!);\n  await delay(500);\n  setArray(list.print());\n  setHead(list.head);\n  setTail(list.tail);\n  setIsChanging!(\"\");\n  await delay(500);\n  setIsDisabled!(false);\n  setIsLoader!(false);\n};\n\n// удалить из tail\nexport const removeTail = async ({\n  array,\n  setIsLoader,\n  setArray,\n  setIsDisabled,\n  setHead,\n  setTail,\n  setIsChanging,\n}: IProps<IArrEl>) => {\n  setIsLoader(true);\n  setIsDisabled(true);\n  setIsChanging!(\"tailRemove\");\n  await delay(500);\n  list.pop(array!);\n  await delay(500);\n  setArray(list.print());\n  setHead(list.head);\n  setTail(list.tail);\n  setIsChanging!(\"\");\n  await delay(500);\n  setIsDisabled(false);\n  setIsLoader(false);\n};\n\n//добавить по индексу\nexport const addIndex = async ({\n  array,\n  value,\n  setValue,\n  setIndex,\n  index,\n  setIsLoader,\n  setIsDisabled,\n  setHead,\n  setTail,\n  setArray,\n  setIsChanging,\n  setCurrentIndex,\n}: IProps<IArrEl>) => {\n  setIsLoader(true);\n  setIsDisabled(true);\n  setIsChanging!(\"indexAdd\");\n  setCurrentIndex!(index!);\n  const newEl = { number: value, state: ElementStates.Default };\n  newEl.state = ElementStates.Changing;\n  await delay(500);\n  list.addInd(index!, newEl!, array!);\n  await delay(500);\n  setArray(list.print());\n  newEl.state = ElementStates.Modified;\n  setHead(list.head);\n  setTail(list.tail);\n  setIsChanging!(\"\");\n  await delay(500);\n  newEl.state = ElementStates.Default;\n  setValue!(undefined);\n  setIndex!(undefined)\n  setIsDisabled(false);\n  setIsLoader(false);\n};\n\n//удалить по индексу\nexport const removeIndex = async ({\n  array,\n  index,\n  setIsLoader,\n  setIsDisabled,\n  setHead,\n  setTail,\n  setArray,\n  setCurrentIndex,\n  setIsChanging,\n  setValue,\n  setIndex\n}: IProps<IArrEl>) => {\n  setIsLoader(true);\n  setIsDisabled(true);\n  colorSelection({ array, index });\n  await delay(1000);\n  setCurrentIndex!(index!);\n  await delay(1000);\n  setIsChanging!(\"indexRemove\");\n  list.removeInd(index!, array!);\n  await delay(500);\n  setArray(list.print());\n  setHead(list.head);\n  setTail(list.tail);\n  setIsChanging!(\"\");\n  array?.forEach((el) => (el.state = ElementStates.Default));\n  await delay(500);\n  setIsDisabled(false);\n  setIsLoader(false);\n  setValue!(undefined);\n  setIndex!(undefined)\n};\n\nconst colorSelection = async ({ array, index }: ISel<IArrEl>) => {\n  for (let i = 0; i < index!; i++) {\n    array![i].state = ElementStates.Changing;\n    await delay(1000);\n  }\n};\n\ninterf\nexport const letterChanger = (index: number, item: IArrEl, isChanging, head, tail, currentIndex) => {\n  if (isChanging === \"headRemove\" && index === head) {\n    return \"\";\n  } else if (isChanging === \"tailRemove\" && index === tail) {\n    return \"\";\n  } else if (isChanging === \"indexRemove\" && index === currentIndex) {\n    return \"\";\n  } else {\n    return String(item.number);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}