{"ast":null,"code":"class Stack {\n  constructor() {\n    this.stack = [];\n    this.top = -1;\n    this.maxSize = 7;\n\n    this.push = item => {\n      if (this.getSize() < this.maxSize) {\n        this.stack.push(item);\n        this.top++;\n      }\n    };\n\n    this.pop = () => {\n      if (this.getSize()) {\n        this.stack.pop();\n      }\n    };\n\n    this.peak = () => {\n      if (this.getSize()) {\n        return this.stack[this.getSize() - 1];\n      }\n\n      return null;\n    };\n\n    this.clear = () => {\n      this.stack = [];\n      th;\n    };\n\n    this.getSize = () => this.stack.length;\n\n    this.printStack = () => this.stack;\n\n    this.isFull = () => {\n      if (this.getSize() < this.maxSize) {\n        return false;\n      }\n\n      return true;\n    };\n  }\n\n}\n\nexport const stack = new Stack();","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/components/stack-page/Stack.tsx"],"names":["Stack","stack","top","maxSize","push","item","getSize","pop","peak","clear","th","length","printStack","isFull"],"mappings":"AAUA,MAAMA,KAAN,CAAoC;AAAA;AAAA,SAClCC,KADkC,GACnB,EADmB;AAAA,SAElCC,GAFkC,GAEpB,CAAC,CAFmB;AAAA,SAG1BC,OAH0B,GAGhB,CAHgB;;AAAA,SAKlCC,IALkC,GAK1BC,IAAD,IAAmB;AACxB,UAAI,KAAKC,OAAL,KAAiB,KAAKH,OAA1B,EAAmC;AACjC,aAAKF,KAAL,CAAWG,IAAX,CAAgBC,IAAhB;AACA,aAAKH,GAAL;AACD;AACF,KAViC;;AAAA,SAYlCK,GAZkC,GAY5B,MAAY;AAChB,UAAI,KAAKD,OAAL,EAAJ,EAAoB;AAClB,aAAKL,KAAL,CAAWM,GAAX;AACD;AACF,KAhBiC;;AAAA,SAkBlCC,IAlBkC,GAkB3B,MAAgB;AACrB,UAAI,KAAKF,OAAL,EAAJ,EAAoB;AAClB,eAAO,KAAKL,KAAL,CAAW,KAAKK,OAAL,KAAiB,CAA5B,CAAP;AACD;;AACD,aAAO,IAAP;AACD,KAvBiC;;AAAA,SAyBlCG,KAzBkC,GAyB1B,MAAY;AAClB,WAAKR,KAAL,GAAa,EAAb;AACAS,MAAAA,EAAE;AACH,KA5BiC;;AAAA,SA8BlCJ,OA9BkC,GA8BxB,MAAM,KAAKL,KAAL,CAAWU,MA9BO;;AAAA,SAgClCC,UAhCkC,GAgCrB,MAAM,KAAKX,KAhCU;;AAAA,SAkClCY,MAlCkC,GAkCzB,MAAM;AACb,UAAI,KAAKP,OAAL,KAAiB,KAAKH,OAA1B,EAAmC;AACjC,eAAO,KAAP;AACD;;AACD,aAAO,IAAP;AACD,KAvCiC;AAAA;;AAAA;;AA0CpC,OAAO,MAAMF,KAAK,GAAG,IAAID,KAAJ,EAAd","sourcesContent":["interface IStack<T> {\n  push: (item: T) => void;\n  pop: () => void;\n  peak: () => T | null;\n  getSize: () => number;\n  printStack: () => T[];\n  clear: () => void;\n  isFull: () => boolean;\n}\n \nclass Stack<T> implements IStack<T> {\n  stack: any[] = [];\n  top: number = -1\n  private maxSize = 7;\n\n  push = (item: T): void => {\n    if (this.getSize() < this.maxSize) {\n      this.stack.push(item);\n      this.top++\n    }\n  };\n\n  pop = (): void => {\n    if (this.getSize()) {\n      this.stack.pop();\n    }\n  };\n\n  peak = (): T | null => {\n    if (this.getSize()) {\n      return this.stack[this.getSize() - 1];\n    }\n    return null;\n  };\n\n  clear = (): void => {\n    this.stack = [];\n    th\n  };\n\n  getSize = () => this.stack.length;\n\n  printStack = () => this.stack;\n\n  isFull = () => {\n    if (this.getSize() < this.maxSize) {\n      return false;\n    }\n    return true;\n  };\n}\n\nexport const stack = new Stack();\n"]},"metadata":{},"sourceType":"module"}