{"ast":null,"code":"import { ElementStates } from \"../types/element-states\";\nimport { delay } from \"./utils\";\nexport const circleColor = (index, currentIndex, arr) => {\n  let length = arr.length - 1;\n\n  if (currentIndex < index || currentIndex > length - index) {\n    return ElementStates.Modified;\n  }\n\n  if (currentIndex === index || currentIndex === length - index) {\n    return ElementStates.Changing;\n  }\n\n  return ElementStates.Default;\n};\n\nconst reverse = (value, setIsLoader) => {\n  setIsLoader(true);\n  const newArr = value.split(\"\");\n  setArr(newArr);\n  arrReverse(newArr);\n  setIsOpen(true);\n};\n\nconst arrReverse = async arr => {\n  const end = arr.length - 1;\n  const mid = Math.floor(arr.length / 2);\n  setCurrentIndex(0);\n\n  for (let i = 0; i < mid; i++) {\n    [arr[i], arr[end - i]] = [arr[end - i], arr[i]];\n    setCurrentIndex(i => i + 1);\n    await delay(1000);\n    setArr(arr);\n  }\n\n  setIsLoader(false);\n};","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/utils/string-utils.ts"],"names":["ElementStates","delay","circleColor","index","currentIndex","arr","length","Modified","Changing","Default","reverse","value","setIsLoader","newArr","split","setArr","arrReverse","setIsOpen","end","mid","Math","floor","setCurrentIndex","i"],"mappings":"AAAA,SAASA,aAAT,QAA8B,yBAA9B;AACA,SAASC,KAAT,QAAsB,SAAtB;AAYA,OAAO,MAAMC,WAAW,GAAG,CACzBC,KADyB,EAEzBC,YAFyB,EAGzBC,GAHyB,KAItB;AACH,MAAIC,MAAM,GAAGD,GAAG,CAACC,MAAJ,GAAa,CAA1B;;AACA,MAAIF,YAAY,GAAGD,KAAf,IAAwBC,YAAY,GAAGE,MAAM,GAAGH,KAApD,EAA2D;AACzD,WAAOH,aAAa,CAACO,QAArB;AACD;;AACD,MAAIH,YAAY,KAAKD,KAAjB,IAA0BC,YAAY,KAAKE,MAAM,GAAGH,KAAxD,EAA+D;AAC7D,WAAOH,aAAa,CAACQ,QAArB;AACD;;AACD,SAAOR,aAAa,CAACS,OAArB;AACD,CAbM;;AAeP,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,WAAR,KAAyB;AACvCA,EAAAA,WAAW,CAAC,IAAD,CAAX;AACA,QAAMC,MAAM,GAAGF,KAAK,CAACG,KAAN,CAAY,EAAZ,CAAf;AACAC,EAAAA,MAAM,CAACF,MAAD,CAAN;AACAG,EAAAA,UAAU,CAACH,MAAD,CAAV;AACAI,EAAAA,SAAS,CAAC,IAAD,CAAT;AACD,CAND;;AAQA,MAAMD,UAAU,GAAG,MAAOX,GAAP,IAAyB;AAC1C,QAAMa,GAAG,GAAGb,GAAG,CAACC,MAAJ,GAAa,CAAzB;AACA,QAAMa,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWhB,GAAG,CAACC,MAAJ,GAAa,CAAxB,CAAZ;AACAgB,EAAAA,eAAe,CAAC,CAAD,CAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAApB,EAAyBI,CAAC,EAA1B,EAA8B;AAC5B,KAAClB,GAAG,CAACkB,CAAD,CAAJ,EAASlB,GAAG,CAACa,GAAG,GAAGK,CAAP,CAAZ,IAAyB,CAAClB,GAAG,CAACa,GAAG,GAAGK,CAAP,CAAJ,EAAelB,GAAG,CAACkB,CAAD,CAAlB,CAAzB;AACAD,IAAAA,eAAe,CAAEC,CAAD,IAAOA,CAAC,GAAG,CAAZ,CAAf;AACA,UAAMtB,KAAK,CAAC,IAAD,CAAX;AACAc,IAAAA,MAAM,CAACV,GAAD,CAAN;AACD;;AACDO,EAAAA,WAAW,CAAC,KAAD,CAAX;AACD,CAXD","sourcesContent":["import { ElementStates } from \"../types/element-states\";\nimport { delay } from \"./utils\";\nimport { Dispatch, SetStateAction } from \"react\";\n\ntype Dispatcher<S> = Dispatch<SetStateAction<S>>;\n\ninterface IProps {\n  value: number;\n  setResult: Dispatcher<number[] | null>;\n  setIsLoader: Dispatcher<boolean>;\n  setValue: Dispatcher<string>;\n}\n\nexport const circleColor = (\n  index: number,\n  currentIndex: number,\n  arr: Array<string | number>\n) => {\n  let length = arr.length - 1;\n  if (currentIndex < index || currentIndex > length - index) {\n    return ElementStates.Modified;\n  }\n  if (currentIndex === index || currentIndex === length - index) {\n    return ElementStates.Changing;\n  }\n  return ElementStates.Default;\n};\n\nconst reverse = (value, setIsLoader,) => {\n  setIsLoader(true);\n  const newArr = value.split(\"\");\n  setArr(newArr);\n  arrReverse(newArr);\n  setIsOpen(true);\n};\n\nconst arrReverse = async (arr: string[]) => {\n  const end = arr.length - 1;\n  const mid = Math.floor(arr.length / 2);\n  setCurrentIndex(0);\n  for (let i = 0; i < mid; i++) {\n    [arr[i], arr[end - i]] = [arr[end - i], arr[i]];\n    setCurrentIndex((i) => i + 1);\n    await delay(1000);\n    setArr(arr);\n  }\n  setIsLoader(false);\n};\n\n\n"]},"metadata":{},"sourceType":"module"}