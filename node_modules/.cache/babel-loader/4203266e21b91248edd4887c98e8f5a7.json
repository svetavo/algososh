{"ast":null,"code":"import { delay } from \"./utils\";\nimport { stack } from \"../components/stack-page/Stack\";\nimport { ElementStates } from \"../types/element-states\";\nexport const pushStack = async _ref => {\n  let {\n    value,\n    setIsDisabled,\n    setIsLoaderAdd,\n    setArray,\n    setCurrentIndex,\n    currentIndex,\n    setValue,\n    setTop\n  } = _ref;\n  setIsLoaderAdd(true);\n  setIsDisabled(true);\n  const newEl = {\n    number: Number(value),\n    state: ElementStates.Default\n  };\n  stack.push(newEl);\n  setArray(stack.printStack());\n  setTop(stack.top);\n  setCurrentIndex(currentIndex + 1);\n  newEl.state = ElementStates.Changing;\n  await delay(500);\n  setValue(\"\");\n  newEl.state = ElementStates.Default;\n  setIsLoaderAdd(false);\n  setIsDisabled(false);\n};\nexport const popStack = async _ref2 => {\n  let {\n    setIsDisabled,\n    setIsLoaderRemove,\n    setArray,\n    setCurrentIndex\n  } = _ref2;\n  setIsLoaderRemove(true);\n  setIsDisabled(true);\n  await delay(500);\n  stack.pop();\n  setArray(stack.printStack());\n  setCurrentIndex(stack.getSize() - 1);\n  setIsLoaderRemove(false);\n  setIsDisabled(false);\n};\nexport const clearStack = async _ref3 => {\n  let {\n    setIsDisabled,\n    setIsLoaderClear,\n    setArray,\n    setTop\n  } = _ref3;\n  setIsLoaderClear(true);\n  setIsDisabled(true);\n  await delay(500);\n  stack.clear();\n  setArray(stack.printStack());\n  setIsLoaderClear(false);\n  setIsDisabled(false);\n  setTop(stack.top);\n};","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/utils/stack-utils.ts"],"names":["delay","stack","ElementStates","pushStack","value","setIsDisabled","setIsLoaderAdd","setArray","setCurrentIndex","currentIndex","setValue","setTop","newEl","number","Number","state","Default","push","printStack","top","Changing","popStack","setIsLoaderRemove","pop","getSize","clearStack","setIsLoaderClear","clear"],"mappings":"AAAA,SAASA,KAAT,QAAsB,SAAtB;AAEA,SAASC,KAAT,QAAsB,gCAAtB;AAEA,SAASC,aAAT,QAA8B,yBAA9B;AAiBA,OAAO,MAAMC,SAAS,GAAG,cASH;AAAA,MATU;AAC9BC,IAAAA,KAD8B;AAE9BC,IAAAA,aAF8B;AAG9BC,IAAAA,cAH8B;AAI9BC,IAAAA,QAJ8B;AAK9BC,IAAAA,eAL8B;AAM9BC,IAAAA,YAN8B;AAO9BC,IAAAA,QAP8B;AAQ9BC,IAAAA;AAR8B,GASV;AACpBL,EAAAA,cAAc,CAAE,IAAF,CAAd;AACAD,EAAAA,aAAa,CAAC,IAAD,CAAb;AACA,QAAMO,KAAK,GAAG;AAAEC,IAAAA,MAAM,EAAEC,MAAM,CAACV,KAAD,CAAhB;AAAyBW,IAAAA,KAAK,EAAEb,aAAa,CAACc;AAA9C,GAAd;AACAf,EAAAA,KAAK,CAACgB,IAAN,CAAWL,KAAX;AACAL,EAAAA,QAAQ,CAACN,KAAK,CAACiB,UAAN,EAAD,CAAR;AACAP,EAAAA,MAAM,CAAEV,KAAK,CAACkB,GAAR,CAAN;AACAX,EAAAA,eAAe,CAAEC,YAAY,GAAI,CAAlB,CAAf;AACAG,EAAAA,KAAK,CAACG,KAAN,GAAcb,aAAa,CAACkB,QAA5B;AACA,QAAMpB,KAAK,CAAC,GAAD,CAAX;AACAU,EAAAA,QAAQ,CAAE,EAAF,CAAR;AACAE,EAAAA,KAAK,CAACG,KAAN,GAAcb,aAAa,CAACc,OAA5B;AACAV,EAAAA,cAAc,CAAE,KAAF,CAAd;AACAD,EAAAA,aAAa,CAAC,KAAD,CAAb;AACD,CAvBM;AAyBP,OAAO,MAAMgB,QAAQ,GAAG,eAKF;AAAA,MALS;AAC7BhB,IAAAA,aAD6B;AAE7BiB,IAAAA,iBAF6B;AAG7Bf,IAAAA,QAH6B;AAI7BC,IAAAA;AAJ6B,GAKT;AACpBc,EAAAA,iBAAiB,CAAE,IAAF,CAAjB;AACAjB,EAAAA,aAAa,CAAC,IAAD,CAAb;AACA,QAAML,KAAK,CAAC,GAAD,CAAX;AACAC,EAAAA,KAAK,CAACsB,GAAN;AACAhB,EAAAA,QAAQ,CAACN,KAAK,CAACiB,UAAN,EAAD,CAAR;AAEAV,EAAAA,eAAe,CAAEP,KAAK,CAACuB,OAAN,KAAkB,CAApB,CAAf;AACAF,EAAAA,iBAAiB,CAAE,KAAF,CAAjB;AACAjB,EAAAA,aAAa,CAAC,KAAD,CAAb;AACD,CAfM;AAiBP,OAAO,MAAMoB,UAAU,GAAG,eAKJ;AAAA,MALW;AAC/BpB,IAAAA,aAD+B;AAE/BqB,IAAAA,gBAF+B;AAG/BnB,IAAAA,QAH+B;AAI/BI,IAAAA;AAJ+B,GAKX;AACpBe,EAAAA,gBAAgB,CAAE,IAAF,CAAhB;AACArB,EAAAA,aAAa,CAAC,IAAD,CAAb;AACA,QAAML,KAAK,CAAC,GAAD,CAAX;AACAC,EAAAA,KAAK,CAAC0B,KAAN;AACApB,EAAAA,QAAQ,CAACN,KAAK,CAACiB,UAAN,EAAD,CAAR;AACAQ,EAAAA,gBAAgB,CAAE,KAAF,CAAhB;AACArB,EAAAA,aAAa,CAAC,KAAD,CAAb;AACAM,EAAAA,MAAM,CAAEV,KAAK,CAACkB,GAAR,CAAN;AACD,CAdM","sourcesContent":["import { delay } from \"./utils\";\nimport { Dispatch, SetStateAction } from \"react\";\nimport { stack } from \"../components/stack-page/Stack\";\nimport { IArrEl } from \"../utils/utils\";\nimport { ElementStates } from \"../types/element-states\";\n\ntype Dispatcher<S> = Dispatch<SetStateAction<S>>;\n\ninterface IProps<T> {\n  value?: string;\n  currentIndex?: number;\n  setIsDisabled: Dispatcher<boolean>;\n  setIsLoaderAdd?: Dispatcher<boolean>;\n  setIsLoaderRemove?: Dispatcher<boolean>;\n  setIsLoaderClear?: Dispatcher<boolean>;\n  setValue?: Dispatcher<string>;\n  setArray: Dispatcher<T[]>;\n  setCurrentIndex?: Dispatcher<number>;\n  setTop?: Dispatcher<number>\n}\n\nexport const pushStack = async ({\n  value,\n  setIsDisabled,\n  setIsLoaderAdd,\n  setArray,\n  setCurrentIndex,\n  currentIndex,\n  setValue,\n  setTop\n}: IProps<IArrEl>) => {\n  setIsLoaderAdd!(true);\n  setIsDisabled(true);\n  const newEl = { number: Number(value), state: ElementStates.Default };\n  stack.push(newEl);\n  setArray(stack.printStack());\n  setTop!(stack.top)\n  setCurrentIndex!(currentIndex! + 1);\n  newEl.state = ElementStates.Changing;\n  await delay(500);\n  setValue!(\"\");\n  newEl.state = ElementStates.Default;\n  setIsLoaderAdd!(false);\n  setIsDisabled(false);\n};\n\nexport const popStack = async ({\n  setIsDisabled,\n  setIsLoaderRemove,\n  setArray,\n  setCurrentIndex,\n}: IProps<IArrEl>) => {\n  setIsLoaderRemove!(true);\n  setIsDisabled(true);\n  await delay(500);\n  stack.pop();\n  setArray(stack.printStack());\n  \n  setCurrentIndex!(stack.getSize() - 1);\n  setIsLoaderRemove!(false);\n  setIsDisabled(false);\n};\n\nexport const clearStack = async ({\n  setIsDisabled,\n  setIsLoaderClear,\n  setArray,\n  setTop\n}: IProps<IArrEl>) => {\n  setIsLoaderClear!(true);\n  setIsDisabled(true);\n  await delay(500);\n  stack.clear();\n  setArray(stack.printStack());\n  setIsLoaderClear!(false);\n  setIsDisabled(false);\n  setTop!(stack.top)\n};\n"]},"metadata":{},"sourceType":"module"}