{"ast":null,"code":"import { ElementStates } from \"../types/element-states\";\nexport const delay = ms => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\nexport const swap = (arr, a, b) => {\n  const temp = arr[a];\n  arr[a] = arr[b];\n  arr[b] = temp;\n};\n//random array\nexport const randomArr = _ref => {\n  let {\n    setArray,\n    co\n  } = _ref;\n  const array = [];\n  const max = 100;\n  const count = getRandomInt(3, 17);\n\n  while (array.length < count) {\n    array.push({\n      number: Math.floor(Math.random() * max),\n      state: ElementStates.Default\n    });\n  }\n\n  setArray(array);\n  return array;\n};\n\nconst getRandomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/utils/utils.tsx"],"names":["ElementStates","delay","ms","Promise","resolve","setTimeout","swap","arr","a","b","temp","randomArr","setArray","co","array","max","count","getRandomInt","length","push","number","Math","floor","random","state","Default","min"],"mappings":"AACA,SAASA,aAAT,QAA8B,yBAA9B;AAEA,OAAO,MAAMC,KAAK,GAAIC,EAAD,IAAgB;AACnC,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAnC,CAAP;AACD,CAFM;AAIP,OAAO,MAAMI,IAAI,GAAG,CAACC,GAAD,EAAaC,CAAb,EAAwBC,CAAxB,KAA4C;AAC9D,QAAMC,IAAI,GAAGH,GAAG,CAACC,CAAD,CAAhB;AACAD,EAAAA,GAAG,CAACC,CAAD,CAAH,GAASD,GAAG,CAACE,CAAD,CAAZ;AACAF,EAAAA,GAAG,CAACE,CAAD,CAAH,GAASC,IAAT;AACD,CAJM;AAYP;AACA,OAAO,MAAMC,SAAS,GAAG,QAAwC;AAAA,MAAvC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAuC;AAC/D,QAAMC,KAAK,GAAG,EAAd;AACA,QAAMC,GAAG,GAAG,GAAZ;AACA,QAAMC,KAAa,GAAGC,YAAY,CAAC,CAAD,EAAI,EAAJ,CAAlC;;AACA,SAAOH,KAAK,CAACI,MAAN,GAAeF,KAAtB,EAA6B;AAC3BF,IAAAA,KAAK,CAACK,IAAN,CAAW;AACTC,MAAAA,MAAM,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBR,GAA3B,CADC;AAETS,MAAAA,KAAK,EAAExB,aAAa,CAACyB;AAFZ,KAAX;AAID;;AACDb,EAAAA,QAAQ,CAACE,KAAD,CAAR;AACA,SAAOA,KAAP;AACD,CAZM;;AAcP,MAAMG,YAAY,GAAG,CAACS,GAAD,EAAcX,GAAd,KAAsC;AACzD,SAAOM,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBR,GAAG,GAAGW,GAAvB,CAAX,IAA0CA,GAAjD;AACD,CAFD","sourcesContent":["import { Dispatch, SetStateAction } from \"react\";\nimport { ElementStates } from \"../types/element-states\";\n\nexport const delay = (ms: number) => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\n\nexport const swap = (arr: any[], a: number, b: number): void => {\n  const temp = arr[a];\n  arr[a] = arr[b];\n  arr[b] = temp;\n};\n\ntype Dispatcher<S> = Dispatch<SetStateAction<S>>;\n\ninterface IProps {\n  setArray: Dispatcher<IArrEl[]>;\n}\n\n//random array\nexport const randomArr = ({ setArray, co }: IProps): IArrEl[] => {\n  const array = [];\n  const max = 100;\n  const count: number = getRandomInt(3, 17);\n  while (array.length < count) {\n    array.push({\n      number: Math.floor(Math.random() * max),\n      state: ElementStates.Default,\n    });\n  }\n  setArray(array);\n  return array;\n};\n\nconst getRandomInt = (min: number, max: number): number => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\n\nexport interface IArrEl {\n  number: number;\n  state: ElementStates;\n}\n"]},"metadata":{},"sourceType":"module"}