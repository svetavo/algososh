{"ast":null,"code":"impor; // пузырек\n\nexport const bubbleSort = async (arr, direction) => {\n  if (direction === \"по возрастанию\") {\n    for (let j = arr.length - 1; j > 0; j--) {\n      await delay(1000);\n\n      for (let i = 0; i < j; i++) {\n        if (arr[i] > arr[i + 1]) {\n          swap(arr, i, i + 1);\n        }\n      }\n    }\n  } else if (direction === \"по убыванию\") {\n    for (let j = arr.length - 1; j > 0; j--) {\n      await delay(1000);\n\n      for (let i = 0; i < j; i++) {\n        if (arr[i] < arr[i + 1]) {\n          swap(arr, i, i + 1);\n        }\n      }\n    }\n  }\n\n  console.log(arr);\n  return arr;\n}; // выбор\n\nexport const selectionSort = (arr, direction) => {\n  const {\n    length\n  } = arr;\n\n  if (direction === \"по убыванию\") {\n    for (let i = 0; i < length - 1; i++) {\n      let maxInd = i;\n\n      for (let j = i; j < length; j++) {\n        if (arr[maxInd] < arr[j]) {\n          maxInd = j;\n        }\n      }\n\n      if (i !== maxInd) {\n        swap(arr, i, maxInd);\n      }\n    }\n  } else if (direction === \"по возрастанию\") {\n    for (let i = 0; i < length - 1; i++) {\n      let minInd = i;\n\n      for (let j = i; j < length; j++) {\n        if (arr[minInd] > arr[j]) {\n          minInd = j;\n        }\n      }\n\n      if (i !== minInd) {\n        swap(arr, i, minInd);\n      }\n    }\n  }\n\n  console.log(arr);\n  return arr;\n};","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/utils/sorting-utils.tsx"],"names":["impor","bubbleSort","arr","direction","j","length","delay","i","swap","console","log","selectionSort","maxInd","minInd"],"mappings":"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","sourcesContent":["impor\n// пузырек\nexport const bubbleSort = async (arr: number[], direction: string) => {\n  if (direction === \"по возрастанию\") {\n    for (let j = arr.length - 1; j > 0; j--) {\n      await delay(1000);\n      for (let i = 0; i < j; i++) {\n        if (arr[i] > arr[i + 1]) {\n          swap(arr, i, i + 1);\n        }\n      }\n    }\n  } else if (direction === \"по убыванию\") {\n    for (let j = arr.length - 1; j > 0; j--) {\n      await delay(1000);\n      for (let i = 0; i < j; i++) {\n        if (arr[i] < arr[i + 1]) {\n          swap(arr, i, i + 1);\n        }\n      }\n    }\n  }\n  console.log(arr);\n  return arr;\n};\n\n// выбор\nexport const selectionSort = (arr: number[], direction: string) => {\n  const { length } = arr;\n  if (direction === \"по убыванию\") {\n    for (let i = 0; i < length - 1; i++) {\n      let maxInd = i;\n      for (let j = i; j < length; j++) {\n        if (arr[maxInd] < arr[j]) {\n          maxInd = j;\n        }\n      }\n      if (i !== maxInd) {\n        swap(arr, i, maxInd);\n      }\n    }\n  } else if (direction === \"по возрастанию\") {\n    for (let i = 0; i < length - 1; i++) {\n      let minInd = i;\n      for (let j = i; j < length; j++) {\n        if (arr[minInd] > arr[j]) {\n          minInd = j;\n        }\n      }\n      if (i !== minInd) {\n        swap(arr, i, minInd);\n      }\n    }\n  }\n\n  console.log(arr);\n  return arr;\n};\n"]},"metadata":{},"sourceType":"module"}