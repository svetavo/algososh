{"ast":null,"code":"var _jsxFileName = \"/Users/svetavo/dev/algososh/src/components/string/string.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport { Input } from \"../ui/input/input\";\nimport { Circle } from \"../ui/circle/circle\";\nimport { Button } from \"../ui/button/button\";\nimport styles from \"./string.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const StringComponent = () => {\n  _s();\n\n  const [value, setValue] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [arr, setArr] = useState(null);\n\n  const expand = value => {\n    setArr(Array.from(value));\n    quich; // reverseString(value);\n\n    setIsOpen(true);\n  };\n\n  const delay = ms => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }; // const reverseString = async (arr: string) => {\n  //   let reversedString = \"\";\n  //   for (let i = arr.length; i > 0; i--) {\n  //     reversedString += arr.substring(i, i - 1);\n  //   }\n  //   await delay(1000);\n  //   const reversedArr = Array.from(reversedString);\n  //   setArr(reversedArr);\n  // };\n\n\n  const onChange = e => {\n    setValue(e.target.value);\n  };\n\n  const swap = (arr, a, b) => {\n    const temp = arr[a];\n    arr[a] = arr[b];\n    arr[b] = temp;\n  };\n\n  const partition = function (arr) {\n    let start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length - 1;\n\n    if (arr.length <= 1) {\n      return null;\n    } else {\n      const pivot = arr[Math.floor((start + end) / 2)];\n      let l = start;\n      let r = end;\n\n      while (l <= r) {\n        while (arr[l] < pivot) {\n          l++;\n        }\n\n        while (arr[r] > pivot) {\n          r--;\n        }\n\n        if (l <= r) {\n          swap(arr, start, end);\n          l++;\n          r--;\n        }\n      }\n\n      return l;\n    }\n  };\n\n  const quickSort = (arr, start, end) => {\n    let index;\n\n    if (arr.length > 1) {\n      index = partition(arr, start, end);\n\n      if (start < index - 1) {\n        quickSort(arr, start, index - 1);\n      }\n\n      if (index < end) {\n        quickSort(arr, index, end);\n      }\n    }\n\n    return arr;\n  }; // берем первый и последний элемент\n  // меняем местами\n  // i - 1 и start+1\n  //меняем местами и тд\n\n\n  return /*#__PURE__*/_jsxDEV(SolutionLayout, {\n    title: \"\\u0421\\u0442\\u0440\\u043E\\u043A\\u0430\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.input,\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          onChange: onChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"\\u0420\\u0430\\u0437\\u0432\\u0435\\u0440\\u043D\\u0443\\u0442\\u044C\",\n          onClick: () => expand(value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: isOpen ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.result,\n          children: arr === null || arr === void 0 ? void 0 : arr.map(item => /*#__PURE__*/_jsxDEV(Circle, {\n            letter: item\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StringComponent, \"ZwsrpSMiL/mHEQ9RPuEq42gL2Rk=\");\n\n_c = StringComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"StringComponent\");","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/components/string/string.tsx"],"names":["React","useState","SolutionLayout","Input","Circle","Button","styles","StringComponent","value","setValue","isOpen","setIsOpen","arr","setArr","expand","Array","from","quich","delay","ms","Promise","resolve","setTimeout","onChange","e","target","swap","a","b","temp","partition","start","end","length","pivot","Math","floor","l","r","quickSort","index","container","input","result","map","item"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport { Input } from \"../ui/input/input\";\nimport { Circle } from \"../ui/circle/circle\";\nimport { Button } from \"../ui/button/button\";\nimport styles from \"./string.module.css\";\nimport { ArrowUpIcon } from \"@ya.praktikum/react-developer-burger-ui-components\";\n\nexport const StringComponent: React.FC = () => {\n  const [value, setValue] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [arr, setArr] = useState<null | any[]>(null);\n\n  const expand = (value: string) => {\n    setArr(Array.from(value));\n    quich\n    // reverseString(value);\n    setIsOpen(true);\n  };\n\n  const delay = (ms: number) => {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  };\n\n  // const reverseString = async (arr: string) => {\n  //   let reversedString = \"\";\n\n  //   for (let i = arr.length; i > 0; i--) {\n  //     reversedString += arr.substring(i, i - 1);\n  //   }\n  //   await delay(1000);\n  //   const reversedArr = Array.from(reversedString);\n  //   setArr(reversedArr);\n  // };\n\n  const onChange = (e: any) => {\n    setValue(e.target.value);\n  };\n\n  const swap = (arr: any[], a: number, b: number): void => {\n    const temp = arr[a];\n    arr[a] = arr[b];\n    arr[b] = temp;\n  };\n\n  const partition = (\n    arr: any[],\n    start = 0,\n    end = arr.length - 1\n  ): number | null => {\n    if (arr.length <= 1) {\n      return null;\n    } else {\n      const pivot = arr[Math.floor((start + end) / 2)];\n      let l = start;\n      let r = end;\n\n      while (l <= r) {\n        while (arr[l] < pivot) {\n          l++;\n        }\n        while (arr[r] > pivot) {\n          r--;\n        }\n\n        if (l <= r) {\n          swap(arr, start, end);\n          l++;\n          r--;\n        }\n      }\n      return l;\n    }\n  };\n\n  const quickSort = (arr: any[], start: number, end: number) => {\n    let index: number;\n    if (arr.length > 1) {\n      index = partition(arr, start, end);\n      if (start < index - 1) {\n        quickSort(arr, start, index - 1);\n      }\n      if (index < end) {\n        quickSort(arr, index, end);\n      }\n    }\n    return arr;\n  };\n  // берем первый и последний элемент\n  // меняем местами\n  // i - 1 и start+1\n  //меняем местами и тд\n\n  return (\n    <SolutionLayout title=\"Строка\">\n      <div className={styles.container}>\n        <div className={styles.input}>\n          <Input onChange={onChange} />\n          <Button text=\"Развернуть\" onClick={() => expand(value)} />\n        </div>\n        <div>\n          {isOpen ? (\n            <div className={styles.result}>\n              {arr?.map((item: string) => (\n                <Circle letter={item} />\n              ))}\n            </div>\n          ) : null}\n        </div>\n      </div>\n    </SolutionLayout>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}