{"ast":null,"code":"import { ElementStates } from \"../types/element-states\";\nimport { delay } from \"../utils/utils\";\nexport const circleColor = (index, currentIndex, arr) => {\n  let length = arr.length - 1;\n\n  if (currentIndex < index || currentIndex > length - index) {\n    return ElementStates.Modified;\n  }\n\n  if (currentIndex === index || currentIndex === length - index) {\n    return ElementStates.Changing;\n  }\n\n  return ElementStates.Default;\n};\nexport const arrReverse = async _ref => {\n  let {\n    arr,\n    setCurrentIndex,\n    setArr,\n    setIsLoader\n  } = _ref;\n  const end = arr.length - 1;\n  const mid = Math.floor(arr.length / 2);\n  setCurrentIndex(0);\n\n  for (let i = 0; i < mid; i++) {\n    await delay(1000);\n    [arr[i], arr[end - i]] = [arr[end - i], arr[i]];\n    setCurrentIndex(i => i + 1);\n    setArr(arr);\n  }\n\n  setIsLoader(false);\n};\nexport const arrReverseTest = async _ref2 => {\n  let {\n    arr\n  } = _ref2;\n  const end = arr.length - 1;\n  const mid = Math.floor(arr.length / 2);\n  setCurrentIndex(0);\n\n  for (let i = 0; i < mid; i++) {\n    await delay(1000);\n    [arr[i], arr[end - i]] = [arr[end - i], arr[i]];\n    setCurrentIndex(i => i + 1);\n    setArr(arr);\n  }\n\n  setIsLoader(false);\n};","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/utils/string-utils.ts"],"names":["ElementStates","delay","circleColor","index","currentIndex","arr","length","Modified","Changing","Default","arrReverse","setCurrentIndex","setArr","setIsLoader","end","mid","Math","floor","i","arrReverseTest"],"mappings":"AAAA,SAASA,aAAT,QAA8B,yBAA9B;AAEA,SAASC,KAAT,QAAsB,gBAAtB;AAaA,OAAO,MAAMC,WAAW,GAAG,CACzBC,KADyB,EAEzBC,YAFyB,EAGzBC,GAHyB,KAItB;AACH,MAAIC,MAAM,GAAGD,GAAG,CAACC,MAAJ,GAAa,CAA1B;;AACA,MAAIF,YAAY,GAAGD,KAAf,IAAwBC,YAAY,GAAGE,MAAM,GAAGH,KAApD,EAA2D;AACzD,WAAOH,aAAa,CAACO,QAArB;AACD;;AACD,MAAIH,YAAY,KAAKD,KAAjB,IAA0BC,YAAY,KAAKE,MAAM,GAAGH,KAAxD,EAA+D;AAC7D,WAAOH,aAAa,CAACQ,QAArB;AACD;;AACD,SAAOR,aAAa,CAACS,OAArB;AACD,CAbM;AAeP,OAAO,MAAMC,UAAU,GAAG,cAA+D;AAAA,MAAxD;AAACL,IAAAA,GAAD;AAAMM,IAAAA,eAAN;AAAuBC,IAAAA,MAAvB;AAA+BC,IAAAA;AAA/B,GAAwD;AACvF,QAAMC,GAAG,GAAGT,GAAG,CAAEC,MAAL,GAAc,CAA1B;AACA,QAAMS,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWZ,GAAG,CAAEC,MAAL,GAAc,CAAzB,CAAZ;AACAK,EAAAA,eAAe,CAAC,CAAD,CAAf;;AACA,OAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAApB,EAAyBG,CAAC,EAA1B,EAA8B;AAC5B,UAAMjB,KAAK,CAAC,IAAD,CAAX;AACA,KAACI,GAAG,CAAEa,CAAF,CAAJ,EAAUb,GAAG,CAAES,GAAG,GAAGI,CAAR,CAAb,IAA2B,CAACb,GAAG,CAAES,GAAG,GAAGI,CAAR,CAAJ,EAAgBb,GAAG,CAAEa,CAAF,CAAnB,CAA3B;AACAP,IAAAA,eAAe,CAAEO,CAAD,IAAOA,CAAC,GAAG,CAAZ,CAAf;AACAN,IAAAA,MAAM,CAACP,GAAD,CAAN;AACD;;AACDQ,EAAAA,WAAW,CAAC,KAAD,CAAX;AACD,CAXM;AAaP,OAAO,MAAMM,cAAc,GAAG,eAA0B;AAAA,MAAnB;AAACd,IAAAA;AAAD,GAAmB;AACtD,QAAMS,GAAG,GAAGT,GAAG,CAAEC,MAAL,GAAc,CAA1B;AACA,QAAMS,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWZ,GAAG,CAAEC,MAAL,GAAc,CAAzB,CAAZ;AACAK,EAAAA,eAAe,CAAC,CAAD,CAAf;;AACA,OAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAApB,EAAyBG,CAAC,EAA1B,EAA8B;AAC5B,UAAMjB,KAAK,CAAC,IAAD,CAAX;AACA,KAACI,GAAG,CAAEa,CAAF,CAAJ,EAAUb,GAAG,CAAES,GAAG,GAAGI,CAAR,CAAb,IAA2B,CAACb,GAAG,CAAES,GAAG,GAAGI,CAAR,CAAJ,EAAgBb,GAAG,CAAEa,CAAF,CAAnB,CAA3B;AACAP,IAAAA,eAAe,CAAEO,CAAD,IAAOA,CAAC,GAAG,CAAZ,CAAf;AACAN,IAAAA,MAAM,CAACP,GAAD,CAAN;AACD;;AACDQ,EAAAA,WAAW,CAAC,KAAD,CAAX;AACD,CAXM","sourcesContent":["import { ElementStates } from \"../types/element-states\";\nimport { Dispatch, SetStateAction } from \"react\";\nimport { delay } from \"../utils/utils\";\n\n\ntype Dispatcher<S> = Dispatch<SetStateAction<S>>;\n\ninterface IProps {\n  arr: string[] | null;\n  setCurrentIndex: Dispatcher<number>;\n  setArr: Dispatcher<string[] | null>\n  setIsLoader: Dispatcher<boolean>\n}\n\n\nexport const circleColor = (\n  index: number,\n  currentIndex: number,\n  arr: Array<string | number>\n) => {\n  let length = arr.length - 1;\n  if (currentIndex < index || currentIndex > length - index) {\n    return ElementStates.Modified;\n  }\n  if (currentIndex === index || currentIndex === length - index) {\n    return ElementStates.Changing;\n  }\n  return ElementStates.Default;\n};\n\nexport const arrReverse = async ({arr, setCurrentIndex, setArr, setIsLoader}: IProps) => {\n  const end = arr!.length - 1;\n  const mid = Math.floor(arr!.length / 2);\n  setCurrentIndex(0);\n  for (let i = 0; i < mid; i++) {\n    await delay(1000);\n    [arr![i], arr![end - i]] = [arr![end - i], arr![i]];\n    setCurrentIndex((i) => i + 1);\n    setArr(arr);\n  }\n  setIsLoader(false);\n};\n\nexport const arrReverseTest = async ({arr,}: IProps) => {\n  const end = arr!.length - 1;\n  const mid = Math.floor(arr!.length / 2);\n  setCurrentIndex(0);\n  for (let i = 0; i < mid; i++) {\n    await delay(1000);\n    [arr![i], arr![end - i]] = [arr![end - i], arr![i]];\n    setCurrentIndex((i) => i + 1);\n    setArr(arr);\n  }\n  setIsLoader(false);\n};\n\n\n\n"]},"metadata":{},"sourceType":"module"}