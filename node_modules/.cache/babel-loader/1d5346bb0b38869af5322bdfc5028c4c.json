{"ast":null,"code":"class Stack {\n  constructor() {\n    this.container = [];\n    this.maxSize = 6;\n\n    this.push = item => {\n      if (this.getSize() < this.maxSize) {\n        this.container.push(item);\n      }\n    };\n\n    this.pop = () => {\n      if (this.getSize()) {\n        this.container.pop();\n      }\n    };\n\n    this.peak = () => {\n      if (this.getSize()) {\n        return this.container[this.getSize() - 1];\n      }\n\n      return null;\n    };\n\n    this.clear = () => {\n      this.container = [];\n    };\n\n    this.getSize = () => this.container.length;\n\n    this.printStack = () => this.container;\n\n    this.isFull = () => {\n      if (this.getSize() < this.maxSize) {\n        return false;\n      }\n\n      return true;\n    };\n  }\n\n}\n\nexport const stack = new Stack();","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/components/stack-page/stack_class.tsx"],"names":["Stack","container","maxSize","push","item","getSize","pop","peak","clear","length","printStack","isFull","stack"],"mappings":"AAUA,MAAMA,KAAN,CAAoC;AAAA;AAAA,SAC1BC,SAD0B,GACT,EADS;AAAA,SAE1BC,OAF0B,GAEhB,CAFgB;;AAAA,SAIlCC,IAJkC,GAI1BC,IAAD,IAAmB;AACxB,UAAI,KAAKC,OAAL,KAAiB,KAAKH,OAA1B,EAAmC;AACjC,aAAKD,SAAL,CAAeE,IAAf,CAAoBC,IAApB;AACD;AACF,KARiC;;AAAA,SAUlCE,GAVkC,GAU5B,MAAY;AAChB,UAAI,KAAKD,OAAL,EAAJ,EAAoB;AAClB,aAAKJ,SAAL,CAAeK,GAAf;AACD;AACF,KAdiC;;AAAA,SAgBlCC,IAhBkC,GAgB3B,MAAgB;AACrB,UAAI,KAAKF,OAAL,EAAJ,EAAoB;AAClB,eAAO,KAAKJ,SAAL,CAAe,KAAKI,OAAL,KAAiB,CAAhC,CAAP;AACD;;AACD,aAAO,IAAP;AACD,KArBiC;;AAAA,SAuBlCG,KAvBkC,GAuB1B,MAAY;AAClB,WAAKP,SAAL,GAAiB,EAAjB;AACD,KAzBiC;;AAAA,SA2BlCI,OA3BkC,GA2BxB,MAAM,KAAKJ,SAAL,CAAeQ,MA3BG;;AAAA,SA6BlCC,UA7BkC,GA6BrB,MAAM,KAAKT,SA7BU;;AAAA,SA+BlCU,MA/BkC,GA+BzB,MAAM;AACb,UAAI,KAAKN,OAAL,KAAiB,KAAKH,OAA1B,EAAmC;AACjC,eAAO,KAAP;AACD;;AACD,aAAO,IAAP;AACD,KApCiC;AAAA;;AAAA;;AAuCpC,OAAO,MAAMU,KAAK,GAAG,IAAIZ,KAAJ,EAAd","sourcesContent":["interface IStack<T> {\n  push: (item: T) => void;\n  pop: () => void;\n  peak: () => T | null;\n  getSize: () => number;\n  printStack: () => T[];\n  clear: () => void;\n  isFull: () => boolean;\n}\n\nclass Stack<T> implements IStack<T> {\n  private container: T[] = [];\n  private maxSize = 6;\n\n  push = (item: T): void => {\n    if (this.getSize() < this.maxSize) {\n      this.container.push(item);\n    }\n  };\n\n  pop = (): void => {\n    if (this.getSize()) {\n      this.container.pop();\n    }\n  };\n\n  peak = (): T | null => {\n    if (this.getSize()) {\n      return this.container[this.getSize() - 1];\n    }\n    return null;\n  };\n\n  clear = (): void => {\n    this.container = [];\n  };\n\n  getSize = () => this.container.length;\n\n  printStack = () => this.container;\n\n  isFull = () => {\n    if (this.getSize() < this.maxSize) {\n      return false;\n    }\n    return true;\n  };\n}\n\nexport const stack = new Stack<string>();\n"]},"metadata":{},"sourceType":"module"}