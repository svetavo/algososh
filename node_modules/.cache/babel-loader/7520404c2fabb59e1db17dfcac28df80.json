{"ast":null,"code":"import { delay } from \"../utils/utils\";\nimport { list } from \"../components/list-page/List\";\nimport { ElementStates } from \"../types/element-states\";\n// добавить в head\nexport const addHead = async _ref => {\n  let {\n    array,\n    value,\n    setIsLoader,\n    setIsDisabled,\n    setHead,\n    setTail,\n    setArray,\n    setIsChanging\n  } = _ref;\n  setIsLoader(true);\n  setIsDisabled(true);\n  setIsChanging(\"head\");\n  const prev = array[0];\n  const newEl = {\n    number: value,\n    state: ElementStates.Default\n  };\n  newEl.state = ElementStates.Changing;\n  prev.nextEl = newEl.number;\n  await delay(500);\n  list.unshift(newEl, array);\n  setArray(list.print());\n  newEl.state = ElementStates.Modified;\n  setHead(list.head);\n  setTail(list.tail);\n  setIsLoader(false);\n  setIsDisabled(false);\n  setIsChanging('');\n}; // добавить в tail\n\nexport const addTail = _ref2 => {\n  let {\n    array,\n    value,\n    setIsLoader,\n    setArray,\n    setHead,\n    setTail,\n    setIsDisabled,\n    setIsChanging\n  } = _ref2;\n  setIsLoader(true);\n  setIsDisabled(true);\n  setIsChanging('tail');\n  const newEl = {\n    number: value,\n    state: ElementStates.Default\n  };\n  list.push(newEl, array);\n  setArray(list.print());\n  setHead(list.head);\n  setTail(list.tail);\n  setIsLoader(false);\n  setIsDisabled(false);\n}; // удалить из head\n\nexport const removeHead = _ref3 => {\n  let {\n    array,\n    setIsLoader,\n    setArray,\n    setIsDisabled,\n    setHead,\n    setTail\n  } = _ref3;\n  setIsLoader(true);\n  setIsDisabled(true);\n  list.shift(array);\n  setArray(list.print());\n  setHead(list.head);\n  setTail(list.tail);\n  setIsDisabled(false);\n  setIsLoader(false);\n}; // удалить из tail\n\nexport const removeTail = _ref4 => {\n  let {\n    array,\n    setIsLoader,\n    setArray,\n    setIsDisabled,\n    setHead,\n    setTail\n  } = _ref4;\n  setIsLoader(true);\n  setIsDisabled(true);\n  list.pop(array);\n  setArray(list.print());\n  setHead(list.head);\n  setTail(list.tail);\n  setIsDisabled(false);\n  setIsLoader(false);\n}; //добавить по индексу\n\nexport const addIndex = _ref5 => {\n  let {\n    array,\n    value,\n    index,\n    setIsLoader,\n    setIsDisabled,\n    setHead,\n    setTail,\n    setArray\n  } = _ref5;\n  setIsLoader(true);\n  setIsDisabled(true);\n  const newEl = {\n    number: value,\n    state: ElementStates.Default\n  };\n  list.addInd(index, newEl, array);\n  setArray(list.print());\n  setHead(list.head);\n  setTail(list.tail);\n  setIsDisabled(false);\n  setIsLoader(false);\n}; //удалить по индексу\n\nexport const removeIndex = _ref6 => {\n  let {\n    array,\n    index,\n    setIsLoader,\n    setIsDisabled,\n    setHead,\n    setTail,\n    setArray\n  } = _ref6;\n  setIsLoader(true);\n  setIsDisabled(true);\n  list.removeInd(index, array);\n  setArray(list.print());\n  setHead(list.head);\n  setTail(list.tail);\n  setIsDisabled(false);\n  setIsLoader(false);\n};","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/utils/list-utils.ts"],"names":["delay","list","ElementStates","addHead","array","value","setIsLoader","setIsDisabled","setHead","setTail","setArray","setIsChanging","prev","newEl","number","state","Default","Changing","nextEl","unshift","print","Modified","head","tail","addTail","push","removeHead","shift","removeTail","pop","addIndex","index","addInd","removeIndex","removeInd"],"mappings":"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","sourcesContent":["import { Dispatch, SetStateAction } from \"react\";\nimport { delay } from \"../utils/utils\";\nimport { list } from \"../components/list-page/List\";\nimport { IArrEl } from \"../utils/utils\";\nimport { ElementStates } from \"../types/element-states\";\n\ntype Dispatcher<S> = Dispatch<SetStateAction<S>>;\n\ninterface IProps<T> {\n  array?: T[];\n  value?: number;\n  index?: number;\n  setArray: Dispatcher<T[]>;\n  setHead: Dispatcher<number>;\n  setIsLoader: Dispatcher<boolean>;\n  setIsDisabled: Dispatcher<boolean>;\n  setIsChanging?: Dispatcher<string>;\n  setTail: Dispatcher<number>;\n}\n\n// добавить в head\nexport const addHead = async({\n  array,\n  value,\n  setIsLoader,\n  setIsDisabled,\n  setHead,\n  setTail,\n  setArray,\n  setIsChanging\n}: IProps<IArrEl>) => {\n  setIsLoader(true);\n  setIsDisabled(true);\n  setIsChanging!(\"head\");\n  const prev = array![0]\n  const newEl = { number: value, state: ElementStates.Default };\n  newEl.state = ElementStates.Changing\n  prev.nextEl = newEl.number\n  await delay(500)\n  list.unshift(newEl, array!);\n  setArray(list.print());\n  newEl.state = ElementStates.Modified\n  setHead(list.head);\n  setTail(list.tail);\n  setIsLoader(false);\n  setIsDisabled(false);\n  setIsChanging!('')\n};\n\n// добавить в tail\nexport const addTail = ({\n  array,\n  value,\n  setIsLoader,\n  setArray,\n  setHead,\n  setTail,\n  setIsDisabled,\n  setIsChanging\n}: IProps<IArrEl>) => {\n  setIsLoader(true);\n  setIsDisabled(true);\n  setIsChanging!('tail')\n  const newEl = { number: value, state: ElementStates.Default};\n  list.push(newEl, array!);\n  setArray(list.print());\n  setHead(list.head);\n  setTail(list.tail);\n  setIsLoader(false);\n  setIsDisabled(false);\n};\n\n// удалить из head\nexport const removeHead = ({\n  array,\n  setIsLoader,\n  setArray,\n  setIsDisabled,\n  setHead,\n  setTail,\n}: IProps<IArrEl>) => {\n  setIsLoader(true);\n  setIsDisabled(true);\n  list.shift(array!);\n  setArray(list.print());\n  setHead(list.head);\n  setTail(list.tail);\n  setIsDisabled!(false);\n  setIsLoader!(false);\n};\n\n// удалить из tail\nexport const removeTail = ({\n  array,\n  setIsLoader,\n  setArray,\n  setIsDisabled,\n  setHead,\n  setTail,\n}: IProps<IArrEl>) => {\n  setIsLoader(true);\n  setIsDisabled(true);\n  list.pop(array!);\n  setArray(list.print());\n  setHead(list.head);\n  setTail(list.tail);\n  setIsDisabled(false);\n  setIsLoader(false);\n};\n\n//добавить по индексу\nexport const addIndex = ({\n  array,\n  value,\n  index,\n  setIsLoader,\n  setIsDisabled,\n  setHead,\n  setTail,\n  setArray,\n}: IProps<IArrEl>) => {\n  setIsLoader(true);\n  setIsDisabled(true);\n  const newEl = { number: value, state: ElementStates.Default };\n  list.addInd(index!, newEl!, array!);\n  setArray(list.print());\n  setHead(list.head);\n  setTail(list.tail);\n  setIsDisabled(false);\n  setIsLoader(false);\n};\n\n//удалить по индексу\nexport const removeIndex = ({\n  array,\n  index,\n  setIsLoader,\n  setIsDisabled,\n  setHead,\n  setTail,\n  setArray,\n}: IProps<IArrEl>) => {\n  setIsLoader(true);\n  setIsDisabled(true);\n  list.removeInd(index!, array!);\n  setArray(list.print());\n  setHead(list.head);\n  setTail(list.tail);\n  setIsDisabled(false);\n  setIsLoader(false);\n};\n"]},"metadata":{},"sourceType":"module"}