{"ast":null,"code":"export const delay = ms => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\nexport const swap = (arr, a, b) => {\n  const temp = arr[a];\n  arr[a] = arr[b];\n  arr[b] = temp;\n};\n//random array\nexport const randomArr = _ref => {\n  let {\n    setArray\n  } = _ref;\n  const array = [];\n  const max = 100;\n\n  while (array.length < 4) {\n    const r = Math.floor(Math.random() * max);\n\n    if (array.indexOf(r) === -1) {\n      array.push(r);\n    }\n  } // const newArr: string[] = array.join().split(\",\");\n\n\n  setArray(array);\n  return arr;\n};","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/utils/utils.tsx"],"names":["delay","ms","Promise","resolve","setTimeout","swap","arr","a","b","temp","randomArr","setArray","array","max","length","r","Math","floor","random","indexOf","push"],"mappings":"AAEA,OAAO,MAAMA,KAAK,GAAIC,EAAD,IAAgB;AACnC,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAnC,CAAP;AACD,CAFM;AAIP,OAAO,MAAMI,IAAI,GAAG,CAACC,GAAD,EAAaC,CAAb,EAAwBC,CAAxB,KAA4C;AAC9D,QAAMC,IAAI,GAAGH,GAAG,CAACC,CAAD,CAAhB;AACAD,EAAAA,GAAG,CAACC,CAAD,CAAH,GAASD,GAAG,CAACE,CAAD,CAAZ;AACAF,EAAAA,GAAG,CAACE,CAAD,CAAH,GAASC,IAAT;AACD,CAJM;AAYL;AACF,OAAO,MAAMC,SAAS,GAAG,QAAyB;AAAA,MAAxB;AAACC,IAAAA;AAAD,GAAwB;AAC9C,QAAMC,KAAK,GAAG,EAAd;AACA,QAAMC,GAAG,GAAG,GAAZ;;AACA,SAAOD,KAAK,CAACE,MAAN,GAAe,CAAtB,EAAyB;AACvB,UAAMC,CAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,GAA3B,CAAlB;;AACA,QAAID,KAAK,CAACO,OAAN,CAAcJ,CAAd,MAAqB,CAAC,CAA1B,EAA6B;AAC3BH,MAAAA,KAAK,CAACQ,IAAN,CAAWL,CAAX;AACD;AACF,GAR6C,CAS9C;;;AACAJ,EAAAA,QAAQ,CAACC,KAAD,CAAR;AACA,SAAON,GAAP;AACD,CAZI","sourcesContent":["import { Dispatch, SetStateAction } from \"react\";\n\nexport const delay = (ms: number) => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\n\nexport const swap = (arr: any[], a: number, b: number): void => {\n  const temp = arr[a];\n  arr[a] = arr[b];\n  arr[b] = temp;\n};\n\ntype Dispatcher<S> = Dispatch<SetStateAction<S>>;\n\ninterface IProps {\n  setArray: Dispatcher<number[]>;\n}\n\n  //random array\nexport const randomArr = ({setArray} : IProps) => {\n    const array = [];\n    const max = 100;\n    while (array.length < 4) {\n      const r: number = Math.floor(Math.random() * max);\n      if (array.indexOf(r) === -1) {\n        array.push(r);\n      }\n    }\n    // const newArr: string[] = array.join().split(\",\");\n    setArray(array);\n    return arr;\n  };\n"]},"metadata":{},"sourceType":"module"}