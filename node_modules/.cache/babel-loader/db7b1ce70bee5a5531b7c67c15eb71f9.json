{"ast":null,"code":"var _jsxFileName = \"/Users/svetavo/dev/algososh/src/components/string/string.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport { Input } from \"../ui/input/input\";\nimport { Circle } from \"../ui/circle/circle\";\nimport { Button } from \"../ui/button/button\";\nimport styles from \"./string.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const StringComponent = () => {\n  _s();\n\n  const [value, setValue] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [arr, setArr] = useState(null);\n\n  const expand = value => {\n    const newArr = Array.from(value);\n    setArr(arrReverse(newArr));\n    setIsOpen(true);\n  };\n\n  const delay = ms => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  };\n\n  const onChange = e => {\n    setValue(e.target.value);\n  };\n\n  let swap;\n\n  const arrReverse = arr => {\n    for (let i = 0; i < Math.round(arr.length / 2); i++) {\n      swap = arr[i];\n      arr[i] = arr[arr.length - 1 - i];\n      arr[arr.length - 1 - i] = swap;\n      d;\n    }\n\n    return arr;\n  }; // const swap = (arr: string[], a: number, b: number): void => {\n  //   const temp = arr[a];\n  //   arr[a] = arr[b];\n  //   arr[b] = temp;\n  // };\n  // const partition = (arr: string[], left: number, right: number) => {\n  //   const pivot = arr[Math.floor((left + right) / 2)];\n  //   while (left <= right) {\n  //     while (arr[left] < pivot) {\n  //       left++;\n  //     }\n  //     while (arr[right] > pivot) {\n  //       right--;\n  //     }\n  //     if (left <= right) {\n  //       swap(arr, left, right);\n  //       left++;\n  //       right--;\n  //     }\n  //   }\n  //   return left;\n  // };\n  // const quickSort = (arr: string[]) => {\n  //   return quickSortHelper(arr, 0, arr.length - 1);\n  // };\n  // const quickSortHelper = (arr: string[], left: number, right: number) => {\n  //   if (arr.length < 2) {\n  //     return arr;\n  //   }\n  //   const index = partition(arr, left, right);\n  //   if (left < index - 1) {\n  //     quickSortHelper(arr, left, index - 1);\n  //   }\n  //   if (index < right) {\n  //     quickSortHelper(arr, index, right);\n  //   }\n  //   return arr;\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(SolutionLayout, {\n    title: \"\\u0421\\u0442\\u0440\\u043E\\u043A\\u0430\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.input,\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          onChange: onChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"\\u0420\\u0430\\u0437\\u0432\\u0435\\u0440\\u043D\\u0443\\u0442\\u044C\",\n          onClick: () => expand(value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: isOpen ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.result,\n          children: arr === null || arr === void 0 ? void 0 : arr.map((item, index) => /*#__PURE__*/_jsxDEV(Circle, {\n            letter: item\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StringComponent, \"ZwsrpSMiL/mHEQ9RPuEq42gL2Rk=\");\n\n_c = StringComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"StringComponent\");","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/components/string/string.tsx"],"names":["React","useState","SolutionLayout","Input","Circle","Button","styles","StringComponent","value","setValue","isOpen","setIsOpen","arr","setArr","expand","newArr","Array","from","arrReverse","delay","ms","Promise","resolve","setTimeout","onChange","e","target","swap","i","Math","round","length","d","container","input","result","map","item","index"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport { Input } from \"../ui/input/input\";\nimport { Circle } from \"../ui/circle/circle\";\nimport { Button } from \"../ui/button/button\";\nimport styles from \"./string.module.css\";\nimport { ArrowUpIcon } from \"@ya.praktikum/react-developer-burger-ui-components\";\n\nexport const StringComponent: React.FC = () => {\n  const [value, setValue] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [arr, setArr] = useState<null | string[]>(null);\n\n  const expand = (value: string) => {\n    const newArr = Array.from(value);\n    setArr(arrReverse(newArr));\n    setIsOpen(true);\n  };\n\n  const delay = (ms: number) => {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  };\n\n  const onChange = (e: any) => {\n    setValue(e.target.value);\n  };\n\n  let swap;\n\n  const arrReverse = (arr: string[]) => {\n    for (let i = 0; i < Math.round(arr.length / 2); i++) {\n      swap = arr[i];\n      arr[i] = arr[arr.length - 1 - i];\n      arr[arr.length - 1 - i] = swap;\n      d\n    }\n    return arr;\n  };\n\n  // const swap = (arr: string[], a: number, b: number): void => {\n  //   const temp = arr[a];\n  //   arr[a] = arr[b];\n  //   arr[b] = temp;\n  // };\n\n  // const partition = (arr: string[], left: number, right: number) => {\n  //   const pivot = arr[Math.floor((left + right) / 2)];\n\n  //   while (left <= right) {\n  //     while (arr[left] < pivot) {\n  //       left++;\n  //     }\n\n  //     while (arr[right] > pivot) {\n  //       right--;\n  //     }\n\n  //     if (left <= right) {\n  //       swap(arr, left, right);\n  //       left++;\n  //       right--;\n  //     }\n  //   }\n  //   return left;\n  // };\n\n  // const quickSort = (arr: string[]) => {\n  //   return quickSortHelper(arr, 0, arr.length - 1);\n  // };\n\n  // const quickSortHelper = (arr: string[], left: number, right: number) => {\n  //   if (arr.length < 2) {\n  //     return arr;\n  //   }\n\n  //   const index = partition(arr, left, right);\n\n  //   if (left < index - 1) {\n  //     quickSortHelper(arr, left, index - 1);\n  //   }\n\n  //   if (index < right) {\n  //     quickSortHelper(arr, index, right);\n  //   }\n\n  //   return arr;\n  // };\n\n  return (\n    <SolutionLayout title=\"Строка\">\n      <div className={styles.container}>\n        <div className={styles.input}>\n          <Input onChange={onChange} />\n          <Button text=\"Развернуть\" onClick={() => expand(value)} />\n        </div>\n        <div>\n          {isOpen ? (\n            <div className={styles.result}>\n              {arr?.map((item, index) => (\n                <Circle letter={item} key={index} />\n              ))}\n            </div>\n          ) : null}\n        </div>\n      </div>\n    </SolutionLayout>\n  );\n};"]},"metadata":{},"sourceType":"module"}