{"ast":null,"code":"export const addHead = _ref => {\n  let {\n    list,\n    item,\n    setIsLoader,\n    setHead,\n    setIsChanging,\n    setTail\n  } = _ref;\n\n  if (item) {\n    setIsLoader(true);\n    setHead(-1);\n    setIsChanging(true);\n    array.unshift(item);\n    setIsChanging(false);\n    setHead(0);\n    setTail(array.length - 1);\n  } else {\n    alert(\"введите значение в инпут\");\n  }\n\n  setIsLoader(false);\n};\nexport const addTail = _ref2 => {\n  let {\n    array,\n    item,\n    setIsLoader,\n    setTail\n  } = _ref2;\n\n  if (item) {\n    setIsLoader(true);\n    array.push(item);\n    setTail(array.length - 1);\n  } else {\n    alert(\"введите значение в инпут\");\n  }\n\n  setIsLoader(false);\n};\nexport const removeHead = _ref3 => {\n  let {\n    array,\n    setIsLoader,\n    setHead\n  } = _ref3;\n  setIsLoader(true);\n  array.shift();\n  setHead(0);\n  setIsLoader(false);\n};\nexport const removeTail = _ref4 => {\n  let {\n    array,\n    setIsLoader,\n    setTail\n  } = _ref4;\n  setIsLoader(true);\n  array.pop();\n  setTail(array.length - 1);\n  setIsLoader(false);\n};\nexport const addIndex = _ref5 => {\n  let {\n    array,\n    item,\n    index,\n    setIsLoader\n  } = _ref5;\n\n  if (item && index) {\n    array.splice(Number(index), 0, item);\n    setIsLoader(false);\n  } else {\n    alert(\"Введите индекс и число\");\n  }\n};\nexport const removeIndex = _ref6 => {\n  let {\n    array,\n    index,\n    setIsLoader\n  } = _ref6;\n\n  if (index) {\n    setIsLoader(true);\n    array.splice(Number(index), 1);\n    setIsLoader(false);\n  } else {\n    alert(\"Введите индекс\");\n  }\n};","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/utils/list-utils.ts"],"names":["addHead","list","item","setIsLoader","setHead","setIsChanging","setTail","array","unshift","length","alert","addTail","push","removeHead","shift","removeTail","pop","addIndex","index","splice","Number","removeIndex"],"mappings":"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","sourcesContent":["import { Dispatch, SetStateAction } from \"react\";\n\ntype Dispatcher<S> = Dispatch<SetStateAction<S>>;\n\ninterface IProps {\n  list?: string[];\n  item?: string;\n  index?: number;\n  setHead?: Dispatcher<number | null>;\n  setIsLoader?: Dispatcher<boolean>;\n  setIsChanging?: Dispatcher<boolean>;\n  setTail?: Dispatcher<number>;\n}\n\nexport const addHead = ({\n  list,\n  item,\n  setIsLoader,\n  setHead,\n  setIsChanging,\n  setTail,\n}: IProps) => {\n  if (item) {\n    setIsLoader!(true);\n    setHead!(-1);\n    setIsChanging!(true);\n    array!.unshift(item);\n    setIsChanging!(false);\n    setHead!(0);\n    setTail!(array!.length - 1);\n  } else {\n    alert(\"введите значение в инпут\");\n  }\n  setIsLoader!(false);\n};\n\nexport const addTail = ({ array, item, setIsLoader, setTail }: IProps) => {\n  if (item) {\n    setIsLoader!(true);\n    array!.push(item);\n    setTail!(array!.length - 1);\n  } else {\n    alert(\"введите значение в инпут\");\n  }\n  setIsLoader!(false);\n};\n\nexport const removeHead = ({ array, setIsLoader, setHead }: IProps) => {\n  setIsLoader!(true);\n  array!.shift();\n  setHead!(0);\n  setIsLoader!(false);\n};\n\nexport const removeTail = ({ array, setIsLoader, setTail }: IProps) => {\n  setIsLoader!(true);\n  array!.pop();\n  setTail!(array!.length - 1);\n  setIsLoader!(false);\n};\n\nexport const addIndex = ({ array, item, index, setIsLoader }: IProps) => {\n  if (item && index) {\n    array!.splice(Number(index), 0, item);\n    setIsLoader!(false);\n  } else {\n    alert(\"Введите индекс и число\");\n  }\n};\n\nexport const removeIndex = ({ array, index, setIsLoader }: IProps) => {\n  if (index) {\n    setIsLoader!(true);\n    array.splice(Number(index), 1);\n    setIsLoader!(false);\n  } else {\n    alert(\"Введите индекс\");\n  }\n};\n"]},"metadata":{},"sourceType":"module"}