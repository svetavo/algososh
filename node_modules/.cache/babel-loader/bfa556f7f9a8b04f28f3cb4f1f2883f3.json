{"ast":null,"code":"class List {\n  constructor() {\n    this.list = [];\n    this.head = -1;\n    this.tail = -1;\n    this.currentIndex = 0;\n    this.maxSize = 6;\n\n    this.push = (item, arrayL) => {\n      if (this.getSize() < this.maxSize) {\n        array.push(item);\n        this.tail = this.getSize() - 1;\n        this.list = array;\n      }\n    };\n\n    this.pop = array => {\n      if (this.getSize()) {\n        this.list.pop();\n      }\n    };\n\n    this.shift = array => {\n      array.shift();\n      this.list = array;\n      this.head = 0;\n      this.tail = this.getSize() - 1;\n    };\n\n    this.unshift = (item, array) => {\n      array.unshift(item);\n      this.list = array;\n      this.head = 0;\n      this.tail = this.getSize() - 1;\n    };\n\n    this.print = () => this.list;\n\n    this.splice = (index, item, array) => {\n      if (this.getSize() < this.maxSize) {\n        array.splice(index, 1, item);\n\n        if (this.head === -1) {\n          this.head++;\n        }\n\n        this.tail++;\n        this.currentIndex++;\n        this.list = array;\n      } else {\n        throw new Error(\"Слишком много элементов\");\n      }\n    };\n\n    this.getSize = () => this.list.length;\n  }\n\n}\n\nexport const list = new List();","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/components/list-page/List.tsx"],"names":["List","list","head","tail","currentIndex","maxSize","push","item","arrayL","getSize","array","pop","shift","unshift","print","splice","index","Error","length"],"mappings":"AAaA,MAAMA,IAAN,CAA4C;AAAA;AAAA,SAC1CC,IAD0C,GACnC,EADmC;AAAA,SAE1CC,IAF0C,GAEnC,CAAC,CAFkC;AAAA,SAG1CC,IAH0C,GAGnC,CAAC,CAHkC;AAAA,SAI1CC,YAJ0C,GAI3B,CAJ2B;AAAA,SAKlCC,OALkC,GAKxB,CALwB;;AAAA,SAO1CC,IAP0C,GAOnC,CAACC,IAAD,EAAUC,MAAV,KAA2B;AAChC,UAAI,KAAKC,OAAL,KAAiB,KAAKJ,OAA1B,EAAmC;AACjCK,QAAAA,KAAK,CAACJ,IAAN,CAAWC,IAAX;AACA,aAAKJ,IAAL,GAAY,KAAKM,OAAL,KAAe,CAA3B;AACA,aAAKR,IAAL,GAAYS,KAAZ;AACD;AACF,KAbyC;;AAAA,SAe1CC,GAf0C,GAenCD,KAAD,IAAsB;AAC1B,UAAI,KAAKD,OAAL,EAAJ,EAAoB;AAClB,aAAKR,IAAL,CAAUU,GAAV;AACD;AACF,KAnByC;;AAAA,SAqB1CC,KArB0C,GAqBjCF,KAAD,IAAqB;AACzBA,MAAAA,KAAK,CAACE,KAAN;AACA,WAAKX,IAAL,GAAYS,KAAZ;AACA,WAAKR,IAAL,GAAY,CAAZ;AACA,WAAKC,IAAL,GAAY,KAAKM,OAAL,KAAiB,CAA7B;AACH,KA1ByC;;AAAA,SA4B1CI,OA5B0C,GA4BhC,CAACN,IAAD,EAAeG,KAAf,KAAmC;AAC3CA,MAAAA,KAAK,CAACG,OAAN,CAAcN,IAAd;AACA,WAAKN,IAAL,GAAYS,KAAZ;AACA,WAAKR,IAAL,GAAY,CAAZ;AACA,WAAKC,IAAL,GAAY,KAAKM,OAAL,KAAiB,CAA7B;AACD,KAjCyC;;AAAA,SAmC1CK,KAnC0C,GAmClC,MAAM,KAAKb,IAnCuB;;AAAA,SAqC1Cc,MArC0C,GAqCjC,CAACC,KAAD,EAAgBT,IAAhB,EAA8BG,KAA9B,KAAkD;AACzD,UAAI,KAAKD,OAAL,KAAiB,KAAKJ,OAA1B,EAAmC;AACjCK,QAAAA,KAAK,CAACK,MAAN,CAAaC,KAAb,EAAoB,CAApB,EAAuBT,IAAvB;;AACA,YAAI,KAAKL,IAAL,KAAc,CAAC,CAAnB,EAAsB;AACpB,eAAKA,IAAL;AACD;;AACD,aAAKC,IAAL;AACA,aAAKC,YAAL;AACA,aAAKH,IAAL,GAAYS,KAAZ;AACD,OARD,MAQO;AACL,cAAM,IAAIO,KAAJ,CAAU,yBAAV,CAAN;AACD;AACF,KAjDyC;;AAAA,SAmD1CR,OAnD0C,GAmDhC,MAAM,KAAKR,IAAL,CAAUiB,MAnDgB;AAAA;;AAAA;;AAqD5C,OAAO,MAAMjB,IAAI,GAAG,IAAID,IAAJ,EAAb","sourcesContent":["import { ElementStates } from \"../../types/element-states\";\nimport { IArrEl } from \"../../utils/utils\";\n\ninterface IList<T> {\n  list: T[];\n  push: (item: T, array: T[]) => void;\n  pop: (array: T[]) => void;\n  shift: (array: T[]) => void;\n  unshift: (item: T, array: T[]) => void;\n  splice: () => void;\n  getSize: () => number;\n}\n\nclass List<IArrEl> implements IList<IArrEl> {\n  list = [];\n  head = -1;\n  tail = -1;\n  currentIndex = 0;\n  private maxSize = 6;\n\n  push = (item: T, arrayL): void => {\n    if (this.getSize() < this.maxSize) {\n      array.push(item);\n      this.tail = this.getSize()-1\n      this.list = array;\n    }\n  };\n\n  pop = (array: T[]): void => {\n    if (this.getSize()) {\n      this.list.pop();\n    }\n  };\n\n  shift = (array: IArrEl[]) => {\n      array.shift()\n      this.list = array;\n      this.head = 0;\n      this.tail = this.getSize() - 1;  \n  };\n\n  unshift = (item: IArrEl, array: IArrEl[]) => {\n    array.unshift(item);\n    this.list = array;\n    this.head = 0;\n    this.tail = this.getSize() - 1;\n  };\n\n  print = () => this.list;\n\n  splice = (index: number, item: IArrEl, array: string[]) => {\n    if (this.getSize() < this.maxSize) {\n      array.splice(index, 1, item);\n      if (this.head === -1) {\n        this.head++;\n      }\n      this.tail++;\n      this.currentIndex++;\n      this.list = array;\n    } else {\n      throw new Error(\"Слишком много элементов\");\n    }\n  };\n\n  getSize = () => this.list.length;\n}\nexport const list = new List();\n"]},"metadata":{},"sourceType":"module"}