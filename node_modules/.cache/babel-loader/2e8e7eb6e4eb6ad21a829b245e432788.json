{"ast":null,"code":"class List {\n  constructor() {\n    this.list = [];\n    this.head = -1;\n    this.tail = -1;\n    this.currentIndex = 0;\n    this.maxSize = 6;\n\n    this.push = item => {\n      if (this.getSize() < this.maxSize) {\n        this.list.push(item);\n      }\n    };\n\n    this.pop = () => {\n      if (this.getSize()) {\n        this.list.pop();\n      }\n    };\n\n    this.shift = item => {};\n\n    this.unshift = item => {\n      this.list.unshift(item);\n      this.head--;\n      this.tail = t;\n    };\n\n    this.splice = (index, item, array) => {\n      if (this.getSize() < this.maxSize) {\n        array.splice(index, 1, item);\n\n        if (this.head === -1) {\n          this.head++;\n        }\n\n        this.tail++;\n        this.currentIndex++;\n        this.list = array;\n      } else {\n        throw new Error(\"Слишком много элементов\");\n      }\n    };\n\n    this.getSize = () => this.list.length;\n  }\n\n}\n\nexport const list = new List();","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/components/list-page/List.tsx"],"names":["List","list","head","tail","currentIndex","maxSize","push","item","getSize","pop","shift","unshift","t","splice","index","array","Error","length"],"mappings":"AAYA,MAAMA,IAAN,CAA4C;AAAA;AAAA,SAC1CC,IAD0C,GACnC,EADmC;AAAA,SAE1CC,IAF0C,GAEnC,CAAC,CAFkC;AAAA,SAG1CC,IAH0C,GAGnC,CAAC,CAHkC;AAAA,SAI1CC,YAJ0C,GAI3B,CAJ2B;AAAA,SAKlCC,OALkC,GAKxB,CALwB;;AAAA,SAO1CC,IAP0C,GAOlCC,IAAD,IAAwB;AAC7B,UAAI,KAAKC,OAAL,KAAiB,KAAKH,OAA1B,EAAmC;AACjC,aAAKJ,IAAL,CAAUK,IAAV,CAAeC,IAAf;AACD;AACF,KAXyC;;AAAA,SAa1CE,GAb0C,GAapC,MAAY;AAChB,UAAI,KAAKD,OAAL,EAAJ,EAAoB;AAClB,aAAKP,IAAL,CAAUQ,GAAV;AACD;AACF,KAjByC;;AAAA,SAmB1CC,KAnB0C,GAmBjCH,IAAD,IAAkB,CAAE,CAnBc;;AAAA,SAqB1CI,OArB0C,GAqB/BJ,IAAD,IAAkB;AACxB,WAAKN,IAAL,CAAUU,OAAV,CAAkBJ,IAAlB;AACA,WAAKL,IAAL;AACA,WAAKC,IAAL,GAAYS,CAAZ;AACH,KAzByC;;AAAA,SA2B1CC,MA3B0C,GA2BjC,CAACC,KAAD,EAAgBP,IAAhB,EAA8BQ,KAA9B,KAAkD;AACzD,UAAI,KAAKP,OAAL,KAAiB,KAAKH,OAA1B,EAAmC;AACjCU,QAAAA,KAAK,CAACF,MAAN,CAAaC,KAAb,EAAoB,CAApB,EAAuBP,IAAvB;;AACA,YAAI,KAAKL,IAAL,KAAc,CAAC,CAAnB,EAAsB;AACpB,eAAKA,IAAL;AACD;;AACD,aAAKC,IAAL;AACA,aAAKC,YAAL;AACA,aAAKH,IAAL,GAAYc,KAAZ;AACD,OARD,MAQO;AACL,cAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AACD;AACF,KAvCyC;;AAAA,SAyC1CR,OAzC0C,GAyChC,MAAM,KAAKP,IAAL,CAAUgB,MAzCgB;AAAA;;AAAA;;AA2C5C,OAAO,MAAMhB,IAAI,GAAG,IAAID,IAAJ,EAAb","sourcesContent":["import { IArrEl } from \"../../utils/utils\";\n\ninterface IList<IArrEl> {\n  list: IArrEl[];\n  push: (item: IArrEl) => void;\n  pop: () => void;\n  shift: () => void;\n  unshift: (item: IArrEl) => void;\n  splice: () => void;\n  getSize: () => number;\n}\n\nclass List<IArrEl> implements IList<IArrEl> {\n  list = [];\n  head = -1;\n  tail = -1;\n  currentIndex = 0;\n  private maxSize = 6;\n\n  push = (item: IArrEl): void => {\n    if (this.getSize() < this.maxSize) {\n      this.list.push(item);\n    }\n  };\n\n  pop = (): void => {\n    if (this.getSize()) {\n      this.list.pop();\n    }\n  };\n\n  shift = (item: IArrEl) => {};\n\n  unshift = (item: IArrEl) => {\n      this.list.unshift(item)\n      this.head--\n      this.tail = t\n  };\n\n  splice = (index: number, item: IArrEl, array: string[]) => {\n    if (this.getSize() < this.maxSize) {\n      array.splice(index, 1, item);\n      if (this.head === -1) {\n        this.head++;\n      }\n      this.tail++;\n      this.currentIndex++;\n      this.list = array;\n    } else {\n      throw new Error(\"Слишком много элементов\");\n    }\n  };\n\n  getSize = () => this.list.length;\n}\nexport const list = new List();\n"]},"metadata":{},"sourceType":"module"}