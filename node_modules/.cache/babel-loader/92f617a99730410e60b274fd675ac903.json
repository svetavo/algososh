{"ast":null,"code":"import { ElementStates } from \"../types/element-states\";\nexport const circleColor = (index, currentIndex, arr) => {\n  let length = arr.length - 1;\n\n  if (currentIndex < index || currentIndex > length - index) {\n    return ElementStates.Modified;\n  }\n\n  if (currentIndex === index || currentIndex === length - index) {\n    return ElementStates.Changing;\n  }\n\n  return ElementStates.Default;\n};\n\nconst arrReverse = async (arr, setCurrentIndex, setArr, setIsLoader) => {\n  const end = arr.length - 1;\n  const mid = Math.floor(arr.length / 2);\n  setCurrentIndex(0);\n\n  for (let i = 0; i < mid; i++) {\n    await delay(1000);\n    [arr[i], arr[end - i]] = [arr[end - i], arr[i]];\n    setCurrentIndex(i => i + 1);\n    setArr(arr);\n  }\n\n  setIsLoader(false);\n};","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/utils/string-utils.ts"],"names":["ElementStates","circleColor","index","currentIndex","arr","length","Modified","Changing","Default","arrReverse","setCurrentIndex","setArr","setIsLoader","end","mid","Math","floor","i","delay"],"mappings":"AAAA,SAASA,aAAT,QAA8B,yBAA9B;AAYA,OAAO,MAAMC,WAAW,GAAG,CACzBC,KADyB,EAEzBC,YAFyB,EAGzBC,GAHyB,KAItB;AACH,MAAIC,MAAM,GAAGD,GAAG,CAACC,MAAJ,GAAa,CAA1B;;AACA,MAAIF,YAAY,GAAGD,KAAf,IAAwBC,YAAY,GAAGE,MAAM,GAAGH,KAApD,EAA2D;AACzD,WAAOF,aAAa,CAACM,QAArB;AACD;;AACD,MAAIH,YAAY,KAAKD,KAAjB,IAA0BC,YAAY,KAAKE,MAAM,GAAGH,KAAxD,EAA+D;AAC7D,WAAOF,aAAa,CAACO,QAArB;AACD;;AACD,SAAOP,aAAa,CAACQ,OAArB;AACD,CAbM;;AAeP,MAAMC,UAAU,GAAG,OAAOL,GAAP,EAAsBM,eAAtB,EAAuCC,MAAvC,EAA+CC,WAA/C,KAA+D;AAChF,QAAMC,GAAG,GAAGT,GAAG,CAACC,MAAJ,GAAa,CAAzB;AACA,QAAMS,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWZ,GAAG,CAACC,MAAJ,GAAa,CAAxB,CAAZ;AACAK,EAAAA,eAAe,CAAC,CAAD,CAAf;;AACA,OAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAApB,EAAyBG,CAAC,EAA1B,EAA8B;AAC5B,UAAMC,KAAK,CAAC,IAAD,CAAX;AACA,KAACd,GAAG,CAACa,CAAD,CAAJ,EAASb,GAAG,CAACS,GAAG,GAAGI,CAAP,CAAZ,IAAyB,CAACb,GAAG,CAACS,GAAG,GAAGI,CAAP,CAAJ,EAAeb,GAAG,CAACa,CAAD,CAAlB,CAAzB;AACAP,IAAAA,eAAe,CAAEO,CAAD,IAAOA,CAAC,GAAG,CAAZ,CAAf;AACAN,IAAAA,MAAM,CAACP,GAAD,CAAN;AACD;;AACDQ,EAAAA,WAAW,CAAC,KAAD,CAAX;AACD,CAXD","sourcesContent":["import { ElementStates } from \"../types/element-states\";\n\ntype Dispatcher<S> = Dispatch<SetStateAction<S>>;\n\ninterface IProps {\n  arr: string[];\n  setCurrentIndex: Dispatcher<number>;\n  setArray: Dispatcher<string[]>\n  set\n}\n\n\nexport const circleColor = (\n  index: number,\n  currentIndex: number,\n  arr: Array<string | number>\n) => {\n  let length = arr.length - 1;\n  if (currentIndex < index || currentIndex > length - index) {\n    return ElementStates.Modified;\n  }\n  if (currentIndex === index || currentIndex === length - index) {\n    return ElementStates.Changing;\n  }\n  return ElementStates.Default;\n};\n\nconst arrReverse = async (arr: string[], setCurrentIndex, setArr, setIsLoader) => {\n  const end = arr.length - 1;\n  const mid = Math.floor(arr.length / 2);\n  setCurrentIndex(0);\n  for (let i = 0; i < mid; i++) {\n    await delay(1000);\n    [arr[i], arr[end - i]] = [arr[end - i], arr[i]];\n    setCurrentIndex((i) => i + 1);\n    setArr(arr);\n  }\n  setIsLoader(false);\n};\n\n\n"]},"metadata":{},"sourceType":"module"}