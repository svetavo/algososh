{"ast":null,"code":"import{ElementStates}from\"../types/element-states\";export var delay=function delay(ms){return new Promise(function(resolve){return setTimeout(resolve,ms);});};export var swap=function swap(arr,a,b){var temp=arr[a];arr[a]=arr[b];arr[b]=temp;};//random array\nexport var randomArr=function randomArr(_ref){var setArray=_ref.setArray,numbers=_ref.numbers;var array=[];var max=100;var count=numbers!==undefined?numbers:getRandomInt(3,17);// const count: number = getRandomInt(3, 17);\nwhile(array.length<count){array.push({number:Math.floor(Math.random()*max),state:ElementStates.Default});}setArray(array);return array;};var getRandomInt=function getRandomInt(min,max){return Math.floor(Math.random()*(max-min))+min;};","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/utils/utils.tsx"],"names":["ElementStates","delay","ms","Promise","resolve","setTimeout","swap","arr","a","b","temp","randomArr","setArray","numbers","array","max","count","undefined","getRandomInt","length","push","number","Math","floor","random","state","Default","min"],"mappings":"AACA,OAASA,aAAT,KAA8B,yBAA9B,CAEA,MAAO,IAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACC,EAAD,CAAgB,CACnC,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,QAAaC,CAAAA,UAAU,CAACD,OAAD,CAAUF,EAAV,CAAvB,EAAZ,CAAP,CACD,CAFM,CAIP,MAAO,IAAMI,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,CAACC,GAAD,CAAaC,CAAb,CAAwBC,CAAxB,CAA4C,CAC9D,GAAMC,CAAAA,IAAI,CAAGH,GAAG,CAACC,CAAD,CAAhB,CACAD,GAAG,CAACC,CAAD,CAAH,CAASD,GAAG,CAACE,CAAD,CAAZ,CACAF,GAAG,CAACE,CAAD,CAAH,CAASC,IAAT,CACD,CAJM,CAaP;AACA,MAAO,IAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,MAA2C,IAAxCC,CAAAA,QAAwC,MAAxCA,QAAwC,CAA9BC,OAA8B,MAA9BA,OAA8B,CAClE,GAAMC,CAAAA,KAAK,CAAG,EAAd,CACA,GAAMC,CAAAA,GAAG,CAAG,GAAZ,CACA,GAAMC,CAAAA,KAAK,CAAGH,OAAO,GAAKI,SAAZ,CAAwBJ,OAAxB,CAAkCK,YAAY,CAAC,CAAD,CAAI,EAAJ,CAA5D,CACA;AACA,MAAOJ,KAAK,CAACK,MAAN,CAAeH,KAAtB,CAA6B,CAC3BF,KAAK,CAACM,IAAN,CAAW,CACTC,MAAM,CAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAgBT,GAA3B,CADC,CAETU,KAAK,CAAEzB,aAAa,CAAC0B,OAFZ,CAAX,EAID,CACDd,QAAQ,CAACE,KAAD,CAAR,CACA,MAAOA,CAAAA,KAAP,CACD,CAbM,CAeP,GAAMI,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACS,GAAD,CAAcZ,GAAd,CAAsC,CACzD,MAAOO,CAAAA,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,IAAiBT,GAAG,CAAGY,GAAvB,CAAX,EAA0CA,GAAjD,CACD,CAFD","sourcesContent":["import { Dispatch, SetStateAction } from \"react\";\nimport { ElementStates } from \"../types/element-states\";\n\nexport const delay = (ms: number) => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\n\nexport const swap = (arr: any[], a: number, b: number): void => {\n  const temp = arr[a];\n  arr[a] = arr[b];\n  arr[b] = temp;\n};\n\ntype Dispatcher<S> = Dispatch<SetStateAction<S>>;\n\ninterface IProps<T> {\n  setArray: Dispatcher<T[]>;\n  numbers?: number | undefined\n}\n\n//random array\nexport const randomArr = ({ setArray, numbers }: IProps<IArrEl>) => {\n  const array = [];\n  const max = 100;\n  const count = numbers !== undefined ? numbers : getRandomInt(3, 17)\n  // const count: number = getRandomInt(3, 17);\n  while (array.length < count) {\n    array.push({\n      number: Math.floor(Math.random() * max),\n      state: ElementStates.Default,\n    });\n  }\n  setArray(array);\n  return array;\n};\n\nconst getRandomInt = (min: number, max: number): number => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\n\nexport interface IArrEl {\n  number: number | string;\n  state: ElementStates;\n}\n"]},"metadata":{},"sourceType":"module"}