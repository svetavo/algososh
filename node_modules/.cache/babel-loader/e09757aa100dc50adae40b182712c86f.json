{"ast":null,"code":"var _jsxFileName = \"/Users/svetavo/dev/algososh/src/components/string/string.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport { Input } from \"../ui/input/input\";\nimport { Circle } from \"../ui/circle/circle\";\nimport { Button } from \"../ui/button/button\";\nimport styles from \"./string.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const StringComponent = () => {\n  _s();\n\n  const [value, setValue] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [arr, setArr] = useState(null);\n\n  const expand = value => {\n    // setArr(Array.from(value));\n    selectionSort(Array.from(value));\n    setArr(Array.from(value)); // reverseString(value);\n\n    setIsOpen(true);\n  };\n\n  const delay = ms => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  };\n\n  const reverseString = async arr => {\n    let reversedString = \"\";\n\n    for (let i = arr.length; i > 0; i--) {\n      reversedString += arr.substring(i, i - 1);\n    }\n\n    await delay(1000);\n    const reversedArr = Array.from(reversedString);\n    setArr(reversedArr);\n  };\n\n  const onChange = e => {\n    setValue(e.target.value);\n  };\n\n  const swap = (arr, a, b) => {\n    const temp = arr[a];\n    arr[a] = arr[b];\n    arr[b] = temp;\n  };\n\n  const selectionSort = arr => {\n    const {\n      length\n    } = arr;\n\n    for (let i = 0; i < length - 1; i++) {\n      let maxInd = i;\n\n      for (let j = i; j < length; j++) {\n        if (arr[maxInd] < arr[j]) {\n          maxInd = j;\n        }\n      }\n\n      if (i !== maxInd) {\n        swap(arr, i, maxInd);\n      }\n    }\n\n    return arr;\n  }; // берем первый и последний элемент\n  // меняем местами\n  // i - 1 и start+1\n  //меняем местами и тд\n\n\n  return /*#__PURE__*/_jsxDEV(SolutionLayout, {\n    title: \"\\u0421\\u0442\\u0440\\u043E\\u043A\\u0430\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.input,\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          onChange: onChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"\\u0420\\u0430\\u0437\\u0432\\u0435\\u0440\\u043D\\u0443\\u0442\\u044C\",\n          onClick: () => expand(value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: isOpen ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.result,\n          children: arr === null || arr === void 0 ? void 0 : arr.map(item => /*#__PURE__*/_jsxDEV(Circle, {\n            letter: item\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StringComponent, \"ZwsrpSMiL/mHEQ9RPuEq42gL2Rk=\");\n\n_c = StringComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"StringComponent\");","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/components/string/string.tsx"],"names":["React","useState","SolutionLayout","Input","Circle","Button","styles","StringComponent","value","setValue","isOpen","setIsOpen","arr","setArr","expand","selectionSort","Array","from","delay","ms","Promise","resolve","setTimeout","reverseString","reversedString","i","length","substring","reversedArr","onChange","e","target","swap","a","b","temp","maxInd","j","container","input","result","map","item"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport { Input } from \"../ui/input/input\";\nimport { Circle } from \"../ui/circle/circle\";\nimport { Button } from \"../ui/button/button\";\nimport styles from \"./string.module.css\";\n\nexport const StringComponent: React.FC = () => {\n  const [value, setValue] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [arr, setArr] = useState<null | any[]>(null);\n\n  const expand = (value: string) => {\n    // setArr(Array.from(value));\n    selectionSort(Array.from(value))\n    setArr(Array.from(value));\n    // reverseString(value);\n    setIsOpen(true);\n  };\n\n  const delay = (ms: number) => {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  };\n\n  const reverseString = async (arr: string) => {\n    let reversedString = \"\";\n\n    for (let i = arr.length; i > 0; i--) {\n      reversedString += arr.substring(i, i - 1);\n    }\n    await delay(1000);\n    const reversedArr = Array.from(reversedString);\n    setArr(reversedArr);\n  };\n\n  const onChange = (e: any) => {\n    setValue(e.target.value);\n  };\n\n  const swap = (arr: any[], a: number, b: number): void => {\n    const temp = arr[a];\n    arr[a] = arr[b];\n    arr[b] = temp;\n  };\n\n  const selectionSort = (arr: any[]) => {\n    const { length } = arr;\n    for (let i = 0; i < length - 1; i++) {\n      let maxInd = i;\n      for (let j = i; j < length; j++) {\n        if (arr[maxInd] < arr[j]) {\n          maxInd = j\n        } \n      }\n      if (i !== maxInd) {\n        swap(arr, i, maxInd)\n      }\n    }\n    return arr\n  };\n\n  // берем первый и последний элемент\n  // меняем местами\n  // i - 1 и start+1\n  //меняем местами и тд\n\n  return (\n    <SolutionLayout title=\"Строка\">\n      <div className={styles.container}>\n        <div className={styles.input}>\n          <Input onChange={onChange} />\n          <Button text=\"Развернуть\" onClick={() => expand(value)} />\n        </div>\n        <div>\n          {isOpen ? (\n            <div className={styles.result}>\n              {arr?.map((item: string) => (\n                <Circle letter={item} />\n              ))}\n            </div>\n          ) : null}\n        </div>\n      </div>\n    </SolutionLayout>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}