{"ast":null,"code":"export const enqueue = _ref => {\n  let {\n    value,\n    queue,\n    tail,\n    currentIndex,\n    setIsLoader,\n    setTail,\n    setCurrentIndex,\n    setValue,\n    maxLength\n  } = _ref;\n\n  if (value) {\n    setIsLoader(true);\n    queue.enque(currentIndex, 1, value);\n\n    if (queue.length <= maxLength) {\n      setTail(tail + 1);\n      setCurrentIndex(currentIndex + 1);\n    } else {\n      setTail(0);\n      setCurrentIndex(0);\n    }\n\n    setValue(\"\");\n    setIsLoader(false);\n  } else {\n    alert(\"введите значение в инпут\");\n  }\n};\nexport const dequeue = _ref2 => {\n  let {\n    queue,\n    head,\n    setIsLoader,\n    setHead,\n    emptyElement,\n    maxLength\n  } = _ref2;\n  setIsLoader(true);\n  queue.splice(head, 1, emptyElement);\n\n  if (queue.length <= maxLength) {\n    setHead(head + 1);\n  } else {\n    setHead(0);\n  }\n\n  setIsLoader(false);\n};\nexport const clearQueue = _ref3 => {\n  let {\n    setIsLoader,\n    setQueue,\n    setTail,\n    setCurrentIndex,\n    setHead,\n    emptyArray\n  } = _ref3;\n  setIsLoader(true);\n  setQueue(emptyArray);\n  setTail(0);\n  setCurrentIndex(0);\n  setHead(0);\n  setIsLoader(false);\n};","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/utils/queue-utils.ts"],"names":["enqueue","value","queue","tail","currentIndex","setIsLoader","setTail","setCurrentIndex","setValue","maxLength","enque","length","alert","dequeue","head","setHead","emptyElement","splice","clearQueue","setQueue","emptyArray"],"mappings":"AAuBA,OAAO,MAAMA,OAAO,GAAG,QAUH;AAAA,MAVI;AACtBC,IAAAA,KADsB;AAEtBC,IAAAA,KAFsB;AAGtBC,IAAAA,IAHsB;AAItBC,IAAAA,YAJsB;AAKtBC,IAAAA,WALsB;AAMtBC,IAAAA,OANsB;AAOtBC,IAAAA,eAPsB;AAQtBC,IAAAA,QARsB;AAStBC,IAAAA;AATsB,GAUJ;;AAClB,MAAIR,KAAJ,EAAW;AACTI,IAAAA,WAAW,CAAE,IAAF,CAAX;AACAH,IAAAA,KAAK,CAAEQ,KAAP,CAAaN,YAAb,EAA4B,CAA5B,EAA+BH,KAA/B;;AACA,QAAIC,KAAK,CAAES,MAAP,IAAiBF,SAArB,EAAiC;AAC/BH,MAAAA,OAAO,CAAEH,IAAI,GAAI,CAAV,CAAP;AACAI,MAAAA,eAAe,CAAEH,YAAY,GAAI,CAAlB,CAAf;AACD,KAHD,MAGO;AACLE,MAAAA,OAAO,CAAE,CAAF,CAAP;AACAC,MAAAA,eAAe,CAAE,CAAF,CAAf;AACD;;AACDC,IAAAA,QAAQ,CAAE,EAAF,CAAR;AACAH,IAAAA,WAAW,CAAE,KAAF,CAAX;AACD,GAZD,MAYO;AACLO,IAAAA,KAAK,CAAC,0BAAD,CAAL;AACD;AACF,CA1BM;AA4BP,OAAO,MAAMC,OAAO,GAAG,SAOH;AAAA,MAPI;AACtBX,IAAAA,KADsB;AAEtBY,IAAAA,IAFsB;AAGtBT,IAAAA,WAHsB;AAItBU,IAAAA,OAJsB;AAKtBC,IAAAA,YALsB;AAMtBP,IAAAA;AANsB,GAOJ;AAClBJ,EAAAA,WAAW,CAAE,IAAF,CAAX;AACAH,EAAAA,KAAK,CAAEe,MAAP,CAAcH,IAAd,EAAqB,CAArB,EAAwBE,YAAxB;;AACA,MAAId,KAAK,CAAES,MAAP,IAAiBF,SAArB,EAAiC;AAC/BM,IAAAA,OAAO,CAAED,IAAI,GAAI,CAAV,CAAP;AACD,GAFD,MAEO;AACLC,IAAAA,OAAO,CAAE,CAAF,CAAP;AACD;;AACDV,EAAAA,WAAW,CAAE,KAAF,CAAX;AACD,CAhBM;AAkBP,OAAO,MAAMa,UAAU,GAAG,SAON;AAAA,MAPO;AACzBb,IAAAA,WADyB;AAEzBc,IAAAA,QAFyB;AAGzBb,IAAAA,OAHyB;AAIzBC,IAAAA,eAJyB;AAKzBQ,IAAAA,OALyB;AAMzBK,IAAAA;AANyB,GAOP;AAClBf,EAAAA,WAAW,CAAE,IAAF,CAAX;AACAc,EAAAA,QAAQ,CAAEC,UAAF,CAAR;AACAd,EAAAA,OAAO,CAAE,CAAF,CAAP;AACAC,EAAAA,eAAe,CAAE,CAAF,CAAf;AACAQ,EAAAA,OAAO,CAAE,CAAF,CAAP;AACAV,EAAAA,WAAW,CAAE,KAAF,CAAX;AACD,CAdM","sourcesContent":["import { delay } from \"./utils\";\nimport { Dispatch, SetStateAction } from \"react\";\nimport {queue} from '../components/queue-page/queue_class'\n\ntype Dispatcher<S> = Dispatch<SetStateAction<S>>;\n\ninterface IProps {\n  value?: string;\n  queue?: string[];\n  tail?: number;\n  head?: number;\n  currentIndex?: number;\n  emptyElement?: string;\n  emptyArray?: string[];\n  maxLength?: number;\n  setIsLoader: Dispatcher<boolean>;\n  setValue?: Dispatcher<string>;\n  setQueue?: Dispatcher<string[]>;\n  setTail?: Dispatcher<number>;\n  setHead?: Dispatch<number>;\n  setCurrentIndex?: Dispatcher<number>;\n}\n\nexport const enqueue = ({\n  value,\n  queue,\n  tail,\n  currentIndex,\n  setIsLoader,\n  setTail,\n  setCurrentIndex,\n  setValue,\n  maxLength,\n}: IProps): void => {\n  if (value) {\n    setIsLoader!(true);\n    queue!.enque(currentIndex!, 1, value);\n    if (queue!.length <= maxLength!) {\n      setTail!(tail! + 1);\n      setCurrentIndex!(currentIndex! + 1);\n    } else {\n      setTail!(0);\n      setCurrentIndex!(0);\n    }\n    setValue!(\"\");\n    setIsLoader!(false);\n  } else {\n    alert(\"введите значение в инпут\");\n  }\n};\n\nexport const dequeue = ({\n  queue,\n  head,\n  setIsLoader,\n  setHead,\n  emptyElement,\n  maxLength,\n}: IProps): void => {\n  setIsLoader!(true);\n  queue!.splice(head!, 1, emptyElement!);\n  if (queue!.length <= maxLength!) {\n    setHead!(head! + 1);\n  } else {\n    setHead!(0);\n  }\n  setIsLoader!(false);\n};\n\nexport const clearQueue = ({\n  setIsLoader,\n  setQueue,\n  setTail,\n  setCurrentIndex,\n  setHead,\n  emptyArray,\n}: IProps): void => {\n  setIsLoader!(true);\n  setQueue!(emptyArray!);\n  setTail!(0);\n  setCurrentIndex!(0);\n  setHead!(0);\n  setIsLoader!(false);\n};\n"]},"metadata":{},"sourceType":"module"}