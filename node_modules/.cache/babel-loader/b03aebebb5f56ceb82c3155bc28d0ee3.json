{"ast":null,"code":"import { ElementStates } from \"../types/element-states\";\nexport const circleColor = (index, currentIndex, arr) => {\n  let length = arr.length - 1;\n\n  if (currentIndex < index || currentIndex > length - index) {\n    return ElementStates.Modified;\n  }\n\n  if (currentIndex === index || currentIndex === length - index) {\n    return ElementStates.Changing;\n  }\n\n  return ElementStates.Default;\n}; // разворот для тестирования\n\nexport const arrReverseTest = string => {\n  const arr = string.split(\"\");\n  const end = arr.length - 1;\n  const mid = Math.floor(arr.length / 2);\n\n  for (let i = 0; i < mid; i++) {\n    [arr[i], arr[end - i]] = [arr[end - i], arr[i]];\n  }\n\n  return arr;\n};","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/utils/string-utils.ts"],"names":["ElementStates","circleColor","index","currentIndex","arr","length","Modified","Changing","Default","arrReverseTest","string","split","end","mid","Math","floor","i"],"mappings":"AAAA,SAASA,aAAT,QAA8B,yBAA9B;AAaA,OAAO,MAAMC,WAAW,GAAG,CACzBC,KADyB,EAEzBC,YAFyB,EAGzBC,GAHyB,KAItB;AACH,MAAIC,MAAM,GAAGD,GAAG,CAACC,MAAJ,GAAa,CAA1B;;AACA,MAAIF,YAAY,GAAGD,KAAf,IAAwBC,YAAY,GAAGE,MAAM,GAAGH,KAApD,EAA2D;AACzD,WAAOF,aAAa,CAACM,QAArB;AACD;;AACD,MAAIH,YAAY,KAAKD,KAAjB,IAA0BC,YAAY,KAAKE,MAAM,GAAGH,KAAxD,EAA+D;AAC7D,WAAOF,aAAa,CAACO,QAArB;AACD;;AACD,SAAOP,aAAa,CAACQ,OAArB;AACD,CAbM,C,CAeP;;AACA,OAAO,MAAMC,cAAc,GAAIC,MAAD,IAAoB;AAChD,QAAMN,GAAG,GAAGM,MAAM,CAACC,KAAP,CAAa,EAAb,CAAZ;AACA,QAAMC,GAAG,GAAGR,GAAG,CAAEC,MAAL,GAAc,CAA1B;AACA,QAAMQ,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWX,GAAG,CAAEC,MAAL,GAAc,CAAzB,CAAZ;;AACA,OAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAApB,EAAyBG,CAAC,EAA1B,EAA8B;AAC5B,KAACZ,GAAG,CAAEY,CAAF,CAAJ,EAAUZ,GAAG,CAAEQ,GAAG,GAAGI,CAAR,CAAb,IAA2B,CAACZ,GAAG,CAAEQ,GAAG,GAAGI,CAAR,CAAJ,EAAgBZ,GAAG,CAAEY,CAAF,CAAnB,CAA3B;AACD;;AACD,SAAOZ,GAAP;AACD,CARM","sourcesContent":["import { ElementStates } from \"../types/element-states\";\nimport { Dispatch, SetStateAction } from \"react\";\nimport { delay } from \"../utils/utils\";\n\ntype Dispatcher<S> = Dispatch<SetStateAction<S>>;\n\ninterface IProps {\n  arr: string[];\n  setCurrentIndex: Dispatcher<number>;\n  setArr: Dispatcher<string[]>;\n  setIsLoader: Dispatcher<boolean>;\n}\n\nexport const circleColor = (\n  index: number,\n  currentIndex: number,\n  arr: Array<string | number>\n) => {\n  let length = arr.length - 1;\n  if (currentIndex < index || currentIndex > length - index) {\n    return ElementStates.Modified;\n  }\n  if (currentIndex === index || currentIndex === length - index) {\n    return ElementStates.Changing;\n  }\n  return ElementStates.Default;\n};\n\n// разворот для тестирования\nexport const arrReverseTest = (string: string) => {\n  const arr = string.split(\"\");\n  const end = arr!.length - 1;\n  const mid = Math.floor(arr!.length / 2);\n  for (let i = 0; i < mid; i++) {\n    [arr![i], arr![end - i]] = [arr![end - i], arr![i]];\n  }\n  return arr;\n};\n"]},"metadata":{},"sourceType":"module"}