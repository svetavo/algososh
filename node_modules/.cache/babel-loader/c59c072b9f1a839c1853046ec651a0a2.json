{"ast":null,"code":"export const pushStack = _ref => {\n  let {\n    value,\n    array,\n    setIsLoader,\n    setArray,\n    setCurrentIndex,\n    currentIndex,\n    setValue\n  } = _ref;\n  setIsLoader(true);\n  stack.push(value);\n  setStack([...stack]);\n  setCurrentIndex(currentIndex + 1);\n  setValue(\"\");\n  setIsLoader(false);\n};\nexport const popStack = _ref2 => {\n  let {\n    stack,\n    setIsLoader,\n    setStack,\n    setCurrentIndex,\n    currentIndex\n  } = _ref2;\n  setIsLoader(true);\n  stack.pop();\n  setStack([...stack]);\n  setCurrentIndex(currentIndex - 1);\n  setIsLoader(false);\n};\nexport const clearStack = _ref3 => {\n  let {\n    stack,\n    setIsLoader,\n    setStack\n  } = _ref3;\n  setIsLoader(true);\n\n  while (stack.length > 0) {\n    stack.pop();\n  }\n\n  setStack([...stack]);\n  setIsLoader(false);\n};","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/utils/stack-utils.ts"],"names":["pushStack","value","array","setIsLoader","setArray","setCurrentIndex","currentIndex","setValue","stack","push","setStack","popStack","pop","clearStack","length"],"mappings":"AAeA,OAAO,MAAMA,SAAS,GAAG,QAQL;AAAA,MARM;AACxBC,IAAAA,KADwB;AAExBC,IAAAA,KAFwB;AAGxBC,IAAAA,WAHwB;AAIxBC,IAAAA,QAJwB;AAKxBC,IAAAA,eALwB;AAMxBC,IAAAA,YANwB;AAOxBC,IAAAA;AAPwB,GAQN;AAClBJ,EAAAA,WAAW,CAAC,IAAD,CAAX;AACAK,EAAAA,KAAK,CAACC,IAAN,CAAWR,KAAX;AACAS,EAAAA,QAAQ,CAAC,CAAC,GAAGF,KAAJ,CAAD,CAAR;AACAH,EAAAA,eAAe,CAAEC,YAAY,GAAI,CAAlB,CAAf;AACAC,EAAAA,QAAQ,CAAE,EAAF,CAAR;AACAJ,EAAAA,WAAW,CAAC,KAAD,CAAX;AACD,CAfM;AAiBP,OAAO,MAAMQ,QAAQ,GAAG,SAMJ;AAAA,MANK;AACvBH,IAAAA,KADuB;AAEvBL,IAAAA,WAFuB;AAGvBO,IAAAA,QAHuB;AAIvBL,IAAAA,eAJuB;AAKvBC,IAAAA;AALuB,GAML;AAClBH,EAAAA,WAAW,CAAC,IAAD,CAAX;AACAK,EAAAA,KAAK,CAACI,GAAN;AACAF,EAAAA,QAAQ,CAAC,CAAC,GAAGF,KAAJ,CAAD,CAAR;AACAH,EAAAA,eAAe,CAAEC,YAAY,GAAI,CAAlB,CAAf;AACAH,EAAAA,WAAW,CAAC,KAAD,CAAX;AACD,CAZM;AAcP,OAAO,MAAMU,UAAU,GAAG,SAAoD;AAAA,MAAnD;AAAEL,IAAAA,KAAF;AAASL,IAAAA,WAAT;AAAsBO,IAAAA;AAAtB,GAAmD;AAC5EP,EAAAA,WAAW,CAAC,IAAD,CAAX;;AACA,SAAOK,KAAK,CAACM,MAAN,GAAe,CAAtB,EAAyB;AACvBN,IAAAA,KAAK,CAACI,GAAN;AACD;;AACDF,EAAAA,QAAQ,CAAC,CAAC,GAAGF,KAAJ,CAAD,CAAR;AACAL,EAAAA,WAAW,CAAC,KAAD,CAAX;AACD,CAPM","sourcesContent":["import { delay } from \"./utils\";\nimport { Dispatch, SetStateAction } from \"react\";\n\ntype Dispatcher<S> = Dispatch<SetStateAction<S>>;\n\ninterface IProps {\n  value?: string;\n  stack: string[];\n  currentIndex?: number;\n  setIsLoader: Dispatcher<boolean>;\n  setValue?: Dispatcher<string>;\n  setArray: Dispatcher<string[]>;\n  setCurrentIndex?: Dispatcher<number>;\n}\n\nexport const pushStack = ({\n  value,\n  array,\n  setIsLoader,\n  setArray,\n  setCurrentIndex,\n  currentIndex,\n  setValue,\n}: IProps): void => {\n  setIsLoader(true);\n  stack.push(value!);\n  setStack([...stack]);\n  setCurrentIndex!(currentIndex! + 1);\n  setValue!(\"\");\n  setIsLoader(false);\n};\n\nexport const popStack = ({\n  stack,\n  setIsLoader,\n  setStack,\n  setCurrentIndex,\n  currentIndex,\n}: IProps): void => {\n  setIsLoader(true);\n  stack.pop();\n  setStack([...stack]);\n  setCurrentIndex!(currentIndex! - 1);\n  setIsLoader(false);\n};\n\nexport const clearStack = ({ stack, setIsLoader, setStack }: IProps): void => {\n  setIsLoader(true);\n  while (stack.length > 0) {\n    stack.pop();\n  }\n  setStack([...stack]);\n  setIsLoader(false);\n};\n"]},"metadata":{},"sourceType":"module"}