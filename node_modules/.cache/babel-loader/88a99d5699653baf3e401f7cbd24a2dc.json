{"ast":null,"code":"var _jsxFileName = \"/Users/svetavo/dev/algososh/src/components/stack-page/stack-page.tsx\";\nimport React from \"react\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport styles from \"./stack.module.css\";\nimport { Button } from \"../ui/button/button\";\nimport { Input } from \"../ui/input/input\";\nimport { Circle } from \"../ui/circle/circle\";\nimport { ElementStates } from \"../../types/element-states\";\nimport { pushStack, popStack, clearStack } from \"../../utils/stack-utils\"; // export const StackPage: React.FC = () => {\n//   const [value, setValue] = useState(\"\");\n//   const [isLoader, setIsLoader] = useState<boolean>(false);\n//   const [currentIndex, setCurrentIndex] = useState(-1);\n//   const [stack, setStack] = useState<string[]>([]);\n//   const pushProps = {\n//     value,\n//     stack,\n//     setIsLoader,\n//     setStack,\n//     setCurrentIndex,\n//     currentIndex,\n//     setValue,\n//   };\n//   const popProps = {\n//     stack,\n//     setIsLoader,\n//     setStack,\n//     setCurrentIndex,\n//     currentIndex,\n//   };\n//   const clearProps = {\n//     stack,\n//     setIsLoader,\n//     setStack,\n//   };\n//   const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n//     setValue(e.target.value);\n//   };\n//   const onAdd = () => {\n//     value ? pushStack(pushProps) : alert(\"Введите значение в инпут\");\n//   };\n//   const onDelete = () => {\n//     stack.length ? popStack(popProps) : alert(\"стек пуст\");\n//   };\n//   const onClear = () => {\n//     stack.length ? clearStack(clearProps) : alert(\"стек пуст\");\n//   };\n//   return (\n//     <SolutionLayout title=\"Стек\">\n//       <div className={styles.container}>\n//         <div className={styles.input}>\n//           <Input onChange={onChange} value={value} maxLength={4} />\n//           <Button\n//             text=\"Добавить\"\n//             isLoader={isLoader}\n//             extraClass=\"mr-5\"\n//             onClick={onAdd}\n//           />\n//           <Button\n//             text=\"Удалить\"\n//             isLoader={isLoader}\n//             extraClass=\"mr-20\"\n//             onClick={onDelete}\n//           />\n//           <Button text=\"Очистить\" isLoader={isLoader} onClick={onClear} />\n//         </div>\n//         <div>\n//           <div className={styles.result}>\n//             {stack?.map((item, index) => (\n//               <Circle\n//                 letter={item}\n//                 key={index}\n//                 index={index}\n//                 extraClass={styles.item}\n//                 state={\n//                   currentIndex === index\n//                     ? ElementStates.Changing\n//                     : ElementStates.Default\n//                 }\n//                 head={currentIndex === index ? \"top\" : null}\n//               />\n//             ))}\n//           </div>\n//         </div>\n//       </div>\n//     </SolutionLayout>\n//   );\n// };\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class StackPage extends React.Component {\n  render() {\n    var _stack;\n\n    coonChange = e => {\n      setValue(e.target.value);\n    };\n\n    const onAdd = () => {\n      value ? pushStack(pushProps) : alert(\"Введите значение в инпут\");\n    };\n\n    const onDelete = () => {\n      stack.length ? popStack(popProps) : alert(\"стек пуст\");\n    };\n\n    const onClear = () => {\n      stack.length ? clearStack(clearProps) : alert(\"стек пуст\");\n    };\n\n    return /*#__PURE__*/_jsxDEV(SolutionLayout, {\n      title: \"\\u0421\\u0442\\u0435\\u043A\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.container,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.input,\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            onChange: onChange,\n            value: value,\n            maxLength: 4\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            text: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\",\n            isLoader: isLoader,\n            extraClass: \"mr-5\",\n            onClick: onAdd\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            text: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\",\n            isLoader: isLoader,\n            extraClass: \"mr-20\",\n            onClick: onDelete\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            text: \"\\u041E\\u0447\\u0438\\u0441\\u0442\\u0438\\u0442\\u044C\",\n            isLoader: isLoader,\n            onClick: onClear\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.result,\n            children: (_stack = stack) === null || _stack === void 0 ? void 0 : _stack.map((item, index) => /*#__PURE__*/_jsxDEV(Circle, {\n              letter: item,\n              index: index,\n              extraClass: styles.item,\n              state: currentIndex === index ? ElementStates.Changing : ElementStates.Default,\n              head: currentIndex === index ? \"top\" : null\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 15\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/components/stack-page/stack-page.tsx"],"names":["React","SolutionLayout","styles","Button","Input","Circle","ElementStates","pushStack","popStack","clearStack","StackPage","Component","render","coonChange","e","setValue","target","value","onAdd","pushProps","alert","onDelete","stack","length","popProps","onClear","clearProps","container","input","onChange","isLoader","result","map","item","index","currentIndex","Changing","Default"],"mappings":"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","sourcesContent":["import React, { useState, ChangeEvent } from \"react\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport styles from \"./stack.module.css\";\nimport { Button } from \"../ui/button/button\";\nimport { Input } from \"../ui/input/input\";\nimport { Circle } from \"../ui/circle/circle\";\nimport { ElementStates } from \"../../types/element-states\";\nimport { pushStack, popStack, clearStack } from \"../../utils/stack-utils\";\n\n// export const StackPage: React.FC = () => {\n//   const [value, setValue] = useState(\"\");\n//   const [isLoader, setIsLoader] = useState<boolean>(false);\n//   const [currentIndex, setCurrentIndex] = useState(-1);\n//   const [stack, setStack] = useState<string[]>([]);\n//   const pushProps = {\n//     value,\n//     stack,\n//     setIsLoader,\n//     setStack,\n//     setCurrentIndex,\n//     currentIndex,\n//     setValue,\n//   };\n//   const popProps = {\n//     stack,\n//     setIsLoader,\n//     setStack,\n//     setCurrentIndex,\n//     currentIndex,\n//   };\n//   const clearProps = {\n//     stack,\n//     setIsLoader,\n//     setStack,\n//   };\n\n//   const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n//     setValue(e.target.value);\n//   };\n\n//   const onAdd = () => {\n//     value ? pushStack(pushProps) : alert(\"Введите значение в инпут\");\n//   };\n\n//   const onDelete = () => {\n//     stack.length ? popStack(popProps) : alert(\"стек пуст\");\n//   };\n\n//   const onClear = () => {\n//     stack.length ? clearStack(clearProps) : alert(\"стек пуст\");\n//   };\n\n\n//   return (\n//     <SolutionLayout title=\"Стек\">\n//       <div className={styles.container}>\n//         <div className={styles.input}>\n//           <Input onChange={onChange} value={value} maxLength={4} />\n//           <Button\n//             text=\"Добавить\"\n//             isLoader={isLoader}\n//             extraClass=\"mr-5\"\n//             onClick={onAdd}\n//           />\n//           <Button\n//             text=\"Удалить\"\n//             isLoader={isLoader}\n//             extraClass=\"mr-20\"\n//             onClick={onDelete}\n//           />\n//           <Button text=\"Очистить\" isLoader={isLoader} onClick={onClear} />\n//         </div>\n//         <div>\n//           <div className={styles.result}>\n//             {stack?.map((item, index) => (\n//               <Circle\n//                 letter={item}\n//                 key={index}\n//                 index={index}\n//                 extraClass={styles.item}\n//                 state={\n//                   currentIndex === index\n//                     ? ElementStates.Changing\n//                     : ElementStates.Default\n//                 }\n//                 head={currentIndex === index ? \"top\" : null}\n//               />\n//             ))}\n//           </div>\n//         </div>\n//       </div>\n//     </SolutionLayout>\n//   );\n// };\n\n\nexport class StackPage extends React.Component {\n  render() {\n\n    coonChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setValue(e.target.value);\n  };\n\n  const onAdd = () => {\n    value ? pushStack(pushProps) : alert(\"Введите значение в инпут\");\n  };\n\n  const onDelete = () => {\n    stack.length ? popStack(popProps) : alert(\"стек пуст\");\n  };\n\n  const onClear = () => {\n    stack.length ? clearStack(clearProps) : alert(\"стек пуст\");\n  };\n\n    return(\n      <SolutionLayout title=\"Стек\">\n      <div className={styles.container}>\n        <div className={styles.input}>\n          <Input onChange={onChange} value={value} maxLength={4} />\n          <Button\n            text=\"Добавить\"\n            isLoader={isLoader}\n            extraClass=\"mr-5\"\n            onClick={onAdd}\n          />\n          <Button\n            text=\"Удалить\"\n            isLoader={isLoader}\n            extraClass=\"mr-20\"\n            onClick={onDelete}\n          />\n          <Button text=\"Очистить\" isLoader={isLoader} onClick={onClear} />\n        </div>\n        <div>\n          <div className={styles.result}>\n            {stack?.map((item, index) => (\n              <Circle\n                letter={item}\n                key={index}\n                index={index}\n                extraClass={styles.item}\n                state={\n                  currentIndex === index\n                    ? ElementStates.Changing\n                    : ElementStates.Default\n                }\n                head={currentIndex === index ? \"top\" : null}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </SolutionLayout>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}