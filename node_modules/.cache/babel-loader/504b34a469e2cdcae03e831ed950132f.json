{"ast":null,"code":"import{ElementStates}from\"../types/element-states\";export var circleColor=function circleColor(index,currentIndex,arr){var length=arr.length-1;if(currentIndex<index||currentIndex>length-index){return ElementStates.Modified;}if(currentIndex===index||currentIndex===length-index){return ElementStates.Changing;}return ElementStates.Default;};// разворот для тестирования\nexport var arrReverseTest=function arrReverseTest(string){var arr=string.split(\"\");var end=arr.length-1;var mid=Math.floor(arr.length/2);for(var i=0;i<mid;i++){var _ref=[arr[end-i],arr[i]];arr[i]=_ref[0];arr[end-i]=_ref[1];}return arr;};","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/utils/string-utils.ts"],"names":["ElementStates","circleColor","index","currentIndex","arr","length","Modified","Changing","Default","arrReverseTest","string","split","end","mid","Math","floor","i"],"mappings":"AAAA,OAASA,aAAT,KAA8B,yBAA9B,CAEA,MAAO,IAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CACzBC,KADyB,CAEzBC,YAFyB,CAGzBC,GAHyB,CAItB,CACH,GAAIC,CAAAA,MAAM,CAAGD,GAAG,CAACC,MAAJ,CAAa,CAA1B,CACA,GAAIF,YAAY,CAAGD,KAAf,EAAwBC,YAAY,CAAGE,MAAM,CAAGH,KAApD,CAA2D,CACzD,MAAOF,CAAAA,aAAa,CAACM,QAArB,CACD,CACD,GAAIH,YAAY,GAAKD,KAAjB,EAA0BC,YAAY,GAAKE,MAAM,CAAGH,KAAxD,CAA+D,CAC7D,MAAOF,CAAAA,aAAa,CAACO,QAArB,CACD,CACD,MAAOP,CAAAA,aAAa,CAACQ,OAArB,CACD,CAbM,CAeP;AACA,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,MAAD,CAAoB,CAChD,GAAMN,CAAAA,GAAG,CAAGM,MAAM,CAACC,KAAP,CAAa,EAAb,CAAZ,CACA,GAAMC,CAAAA,GAAG,CAAGR,GAAG,CAAEC,MAAL,CAAc,CAA1B,CACA,GAAMQ,CAAAA,GAAG,CAAGC,IAAI,CAACC,KAAL,CAAWX,GAAG,CAAEC,MAAL,CAAc,CAAzB,CAAZ,CACA,IAAK,GAAIW,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGH,GAApB,CAAyBG,CAAC,EAA1B,CAA8B,UACD,CAACZ,GAAG,CAAEQ,GAAG,CAAGI,CAAR,CAAJ,CAAgBZ,GAAG,CAAEY,CAAF,CAAnB,CADC,CAC3BZ,GAAG,CAAEY,CAAF,CADwB,SAClBZ,GAAG,CAAEQ,GAAG,CAAGI,CAAR,CADe,SAE7B,CACD,MAAOZ,CAAAA,GAAP,CACD,CARM","sourcesContent":["import { ElementStates } from \"../types/element-states\";\n\nexport const circleColor = (\n  index: number,\n  currentIndex: number,\n  arr: Array<string | number>\n) => {\n  let length = arr.length - 1;\n  if (currentIndex < index || currentIndex > length - index) {\n    return ElementStates.Modified;\n  }\n  if (currentIndex === index || currentIndex === length - index) {\n    return ElementStates.Changing;\n  }\n  return ElementStates.Default;\n};\n\n// разворот для тестирования\nexport const arrReverseTest = (string: string) => {\n  const arr = string.split(\"\");\n  const end = arr!.length - 1;\n  const mid = Math.floor(arr!.length / 2);\n  for (let i = 0; i < mid; i++) {\n    [arr![i], arr![end - i]] = [arr![end - i], arr![i]];\n  }\n  return arr;\n};\n"]},"metadata":{},"sourceType":"module"}