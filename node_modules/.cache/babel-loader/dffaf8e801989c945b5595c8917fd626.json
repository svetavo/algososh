{"ast":null,"code":"var _jsxFileName = \"/Users/svetavo/dev/algososh/src/components/string/string.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport { Input } from \"../ui/input/input\";\nimport { Circle } from \"../ui/circle/circle\";\nimport { Button } from \"../ui/button/button\";\nimport styles from \"./string.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const StringComponent = () => {\n  _s();\n\n  const [value, setValue] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [arr, setArr] = useState(null);\n\n  const expand = value => {\n    let reversedString = '';\n\n    for (let i = value.length; i > 0; i--) {\n      reversedString += value.substring(i, i - 1);\n    }\n\n    return reversedString; // const splitArr = value.split(\"\");\n    // const reverseArray = splitArr.reverse();\n    // const joinArray = reverseArray.join('');\n    // const result = Array.from(joinArray)\n\n    setArr(reverseString);\n    setIsOpen(true);\n  };\n\n  const reverseString = value => {\n    const splitArr = value.split(\"\");\n    let reversedString = '';\n    /* Проходим по каждому символу в аргументе str\n    Чтобы развернуть строку, мы присваиваем переменной i значение str.length\n    Добавляем по очереди каждый символ строки str, начиная с конца, в новую строку.\n    */\n\n    for (let i = splitArr.length; i > 0; i--) {\n      reversedString += splitArr.substring(i, i - 1);\n    }\n\n    return reversedString;\n  };\n\n  const onChange = e => {\n    setValue(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(SolutionLayout, {\n    title: \"\\u0421\\u0442\\u0440\\u043E\\u043A\\u0430\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.input,\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          onChange: onChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"\\u0420\\u0430\\u0437\\u0432\\u0435\\u0440\\u043D\\u0443\\u0442\\u044C\",\n          onClick: () => expand(value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: isOpen ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.result,\n          children: arr === null || arr === void 0 ? void 0 : arr.map(item => /*#__PURE__*/_jsxDEV(Circle, {\n            letter: item\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StringComponent, \"ZwsrpSMiL/mHEQ9RPuEq42gL2Rk=\");\n\n_c = StringComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"StringComponent\");","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/components/string/string.tsx"],"names":["React","useState","SolutionLayout","Input","Circle","Button","styles","StringComponent","value","setValue","isOpen","setIsOpen","arr","setArr","expand","reversedString","i","length","substring","reverseString","splitArr","split","onChange","e","target","container","input","result","map","item"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,cAAT,QAA+B,uCAA/B;AACA,SAASC,KAAT,QAAsB,mBAAtB;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;AAEA,OAAO,MAAMC,eAAyB,GAAG,MAAM;AAAA;;AAC7C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACW,GAAD,EAAMC,MAAN,IAAgBZ,QAAQ,CAAe,IAAf,CAA9B;;AAEA,QAAMa,MAAM,GAAIN,KAAD,IAAmB;AAChC,QAAIO,cAAc,GAAG,EAArB;;AACA,SAAK,IAAIC,CAAC,GAAGR,KAAK,CAACS,MAAnB,EAA2BD,CAAC,GAAG,CAA/B,EAAkCA,CAAC,EAAnC,EAAuC;AACrCD,MAAAA,cAAc,IAAIP,KAAK,CAACU,SAAN,CAAgBF,CAAhB,EAAmBA,CAAC,GAAC,CAArB,CAAlB;AACH;;AAAK,WAAOD,cAAP,CAJ4B,CAKhC;AACA;AACA;AACA;;AACAF,IAAAA,MAAM,CAACM,aAAD,CAAN;AACAR,IAAAA,SAAS,CAAC,IAAD,CAAT;AACD,GAXD;;AAaA,QAAMQ,aAAa,GAAIX,KAAD,IAAW;AAC/B,UAAMY,QAAQ,GAAGZ,KAAK,CAACa,KAAN,CAAY,EAAZ,CAAjB;AAEA,QAAIN,cAAc,GAAG,EAArB;AAED;AACH;AACA;AACA;;AACI,SAAK,IAAIC,CAAC,GAAGI,QAAQ,CAACH,MAAtB,EAA8BD,CAAC,GAAG,CAAlC,EAAqCA,CAAC,EAAtC,EAA0C;AACtCD,MAAAA,cAAc,IAAIK,QAAQ,CAACF,SAAT,CAAmBF,CAAnB,EAAsBA,CAAC,GAAC,CAAxB,CAAlB;AACH;;AACD,WAAOD,cAAP;AACH,GAbC;;AAgBA,QAAMO,QAAQ,GAAIC,CAAD,IAAY;AAC3Bd,IAAAA,QAAQ,CAACc,CAAC,CAACC,MAAF,CAAShB,KAAV,CAAR;AACD,GAFD;;AAIA,sBACE,QAAC,cAAD;AAAgB,IAAA,KAAK,EAAC,sCAAtB;AAAA,2BACE;AAAK,MAAA,SAAS,EAAEF,MAAM,CAACmB,SAAvB;AAAA,8BACE;AAAK,QAAA,SAAS,EAAEnB,MAAM,CAACoB,KAAvB;AAAA,gCACE,QAAC,KAAD;AAAO,UAAA,QAAQ,EAAEJ;AAAjB;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,8DAAb;AAA0B,UAAA,OAAO,EAAE,MAAMR,MAAM,CAACN,KAAD;AAA/C;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAA,kBACGE,MAAM,gBACL;AAAK,UAAA,SAAS,EAAEJ,MAAM,CAACqB,MAAvB;AAAA,oBACGf,GADH,aACGA,GADH,uBACGA,GAAG,CAAEgB,GAAL,CAAUC,IAAD,iBACR,QAAC,MAAD;AAAQ,YAAA,MAAM,EAAEA;AAAhB;AAAA;AAAA;AAAA;AAAA,kBADD;AADH;AAAA;AAAA;AAAA;AAAA,gBADK,GAMH;AAPN;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CAzDM;;GAAMtB,e;;KAAAA,e","sourcesContent":["import React, { useState } from \"react\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport { Input } from \"../ui/input/input\";\nimport { Circle } from \"../ui/circle/circle\";\nimport { Button } from \"../ui/button/button\";\nimport styles from \"./string.module.css\";\n\nexport const StringComponent: React.FC = () => {\n  const [value, setValue] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [arr, setArr] = useState<null | any[]>(null)\n\n  const expand = (value: string) => {\n    let reversedString = '';\n    for (let i = value.length; i > 0; i--) {\n      reversedString += value.substring(i, i-1);\n  }     return reversedString \n    // const splitArr = value.split(\"\");\n    // const reverseArray = splitArr.reverse();\n    // const joinArray = reverseArray.join('');\n    // const result = Array.from(joinArray)\n    setArr(reverseString)\n    setIsOpen(true);\n  };\n\n  const reverseString = (value) => {\n    const splitArr = value.split(\"\");\n\n    let reversedString = '';\n\n   /* Проходим по каждому символу в аргументе str\nЧтобы развернуть строку, мы присваиваем переменной i значение str.length\nДобавляем по очереди каждый символ строки str, начиная с конца, в новую строку.\n   */\n    for (let i = splitArr.length; i > 0; i--) {\n        reversedString += splitArr.substring(i, i-1);\n    }\n    return reversedString;\n}\n\n\n  const onChange = (e: any) => {\n    setValue(e.target.value);\n  };\n\n  return (\n    <SolutionLayout title=\"Строка\">\n      <div className={styles.container}>\n        <div className={styles.input}>\n          <Input onChange={onChange} />\n          <Button text=\"Развернуть\" onClick={() => expand(value)} />\n        </div>\n        <div>\n          {isOpen ? (\n            <div className={styles.result}>\n              {arr?.map((item: string) => (\n                <Circle letter={item} />\n              ))}\n            </div>\n          ) : null}\n        </div>\n      </div>\n    </SolutionLayout>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}