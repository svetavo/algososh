{"ast":null,"code":"import { ElementStates } from \"../types/element-states\";\nimport { delay } from \"./utils\";\nexport const circleColor = (index, currentIndex, arr) => {\n  let length = arr.length - 1;\n\n  if (currentIndex < index || currentIndex > length - index) {\n    return ElementStates.Modified;\n  }\n\n  if (currentIndex === index || currentIndex === length - index) {\n    return ElementStates.Changing;\n  }\n\n  return ElementStates.Default;\n};\nexport const arrReverse = async _ref => {\n  let {\n    newArr,\n    setCurrentIndex,\n    setArr,\n    setIsLoader\n  } = _ref;\n  const end = newArr.length - 1;\n  const mid = Math.floor(newArr.length / 2);\n  setCurrentIndex(0);\n\n  for (let i = 0; i < mid; i++) {\n    [newArr[i], newArr[end - i]] = [newArr[end - i], newArr[i]];\n    setCurrentIndex(i + 1);\n    await delay(1000);\n    setArr(newArr);\n  }\n\n  setIsLoader(false);\n};\nexport const reverse = _ref2 => {\n  let {\n    value,\n    setIsLoader,\n    setArr,\n    setIsOpen\n  } = _ref2;\n  setIsLoader(true);\n  const newArr = value.split(\"\");\n  setArr(newArr);\n  arrReverse(newArr);\n  setIsOpen(true);\n};","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/utils/string-utils.ts"],"names":["ElementStates","delay","circleColor","index","currentIndex","arr","length","Modified","Changing","Default","arrReverse","newArr","setCurrentIndex","setArr","setIsLoader","end","mid","Math","floor","i","reverse","value","setIsOpen","split"],"mappings":"AAAA,SAASA,aAAT,QAA8B,yBAA9B;AACA,SAASC,KAAT,QAAsB,SAAtB;AAgBA,OAAO,MAAMC,WAAW,GAAG,CACzBC,KADyB,EAEzBC,YAFyB,EAGzBC,GAHyB,KAItB;AACH,MAAIC,MAAM,GAAGD,GAAG,CAACC,MAAJ,GAAa,CAA1B;;AACA,MAAIF,YAAY,GAAGD,KAAf,IAAwBC,YAAY,GAAGE,MAAM,GAAGH,KAApD,EAA2D;AACzD,WAAOH,aAAa,CAACO,QAArB;AACD;;AACD,MAAIH,YAAY,KAAKD,KAAjB,IAA0BC,YAAY,KAAKE,MAAM,GAAGH,KAAxD,EAA+D;AAC7D,WAAOH,aAAa,CAACQ,QAArB;AACD;;AACD,SAAOR,aAAa,CAACS,OAArB;AACD,CAbM;AAcP,OAAO,MAAMC,UAAU,GAAG,cAAkE;AAAA,MAA3D;AAACC,IAAAA,MAAD;AAASC,IAAAA,eAAT;AAA0BC,IAAAA,MAA1B;AAAkCC,IAAAA;AAAlC,GAA2D;AAC1F,QAAMC,GAAG,GAAGJ,MAAM,CAACL,MAAP,GAAgB,CAA5B;AACA,QAAMU,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWP,MAAM,CAAEL,MAAR,GAAiB,CAA5B,CAAZ;AACAM,EAAAA,eAAe,CAAC,CAAD,CAAf;;AACA,OAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAApB,EAAyBG,CAAC,EAA1B,EAA8B;AAC5B,KAACR,MAAM,CAAEQ,CAAF,CAAP,EAAaR,MAAM,CAAEI,GAAG,GAAGI,CAAR,CAAnB,IAAiC,CAACR,MAAM,CAAEI,GAAG,GAAGI,CAAR,CAAP,EAAmBR,MAAM,CAAEQ,CAAF,CAAzB,CAAjC;AACAP,IAAAA,eAAe,CAACO,CAAC,GAAG,CAAL,CAAf;AACA,UAAMlB,KAAK,CAAC,IAAD,CAAX;AACAY,IAAAA,MAAM,CAACF,MAAD,CAAN;AACD;;AACDG,EAAAA,WAAW,CAAC,KAAD,CAAX;AACD,CAXM;AAcP,OAAO,MAAMM,OAAO,GAAG,SAKH;AAAA,MALI;AACtBC,IAAAA,KADsB;AAEtBP,IAAAA,WAFsB;AAGtBD,IAAAA,MAHsB;AAItBS,IAAAA;AAJsB,GAKJ;AAClBR,EAAAA,WAAW,CAAC,IAAD,CAAX;AACA,QAAMH,MAAM,GAAGU,KAAK,CAAEE,KAAP,CAAa,EAAb,CAAf;AACAV,EAAAA,MAAM,CAACF,MAAD,CAAN;AACAD,EAAAA,UAAU,CAACC,MAAD,CAAV;AACAW,EAAAA,SAAS,CAAC,IAAD,CAAT;AACD,CAXM","sourcesContent":["import { ElementStates } from \"../types/element-states\";\nimport { delay } from \"./utils\";\nimport { Dispatch, SetStateAction } from \"react\";\n\ntype Dispatcher<S> = Dispatch<SetStateAction<S>>;\n\ninterface IProps {\n  value?: string;\n  arr?: string[];\n  newArr?: string[];\n  setReverse: Dispatcher<number[] | null>;\n  setIsLoader: Dispatcher<boolean>;\n  setArr: Dispatcher<string[]>;\n  setIsOpen: Dispatch<boolean>;\n  setCurrentIndex: Dispatch<number>;\n}\n\nexport const circleColor = (\n  index: number,\n  currentIndex: number,\n  arr: Array<string | number>\n) => {\n  let length = arr.length - 1;\n  if (currentIndex < index || currentIndex > length - index) {\n    return ElementStates.Modified;\n  }\n  if (currentIndex === index || currentIndex === length - index) {\n    return ElementStates.Changing;\n  }\n  return ElementStates.Default;\n};\nexport const arrReverse = async ({newArr, setCurrentIndex, setArr, setIsLoader}: IProps) => {\n  const end = newArr.length - 1;\n  const mid = Math.floor(newArr!.length / 2);\n  setCurrentIndex(0);\n  for (let i = 0; i < mid; i++) {\n    [newArr![i], newArr![end - i]] = [newArr![end - i], newArr![i]];\n    setCurrentIndex(i + 1);\n    await delay(1000);\n    setArr(newArr!);\n  }\n  setIsLoader(false);\n};\n\n\nexport const reverse = ({\n  value,\n  setIsLoader,\n  setArr,\n  setIsOpen,\n}: IProps): void => {\n  setIsLoader(true);\n  const newArr = value!.split(\"\");\n  setArr(newArr);\n  arrReverse(newArr);\n  setIsOpen(true);\n};\n\n"]},"metadata":{},"sourceType":"module"}