{"ast":null,"code":"import { delay } from \"./utils\";\nexport const fibonacci = async _ref => {\n  let {\n    n: number,\n    setResult,\n    setIsLoader,\n    setValue\n  } = _ref;\n\n  if (n >= 1 && n <= 19) {\n    let arr = [0, 1];\n\n    for (let i = 2; i <= n; i++) {\n      arr[i] = arr[i - 2] + arr[i - 1];\n      await delay(500);\n      setResult(arr.slice(0, i + 1));\n    }\n\n    setIsLoader(false);\n    setValue('');\n  } else {\n    setIsLoader(false);\n    return null;\n  }\n};","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/utils/fibonacci-utils.ts"],"names":["delay","fibonacci","n","number","setResult","setIsLoader","setValue","arr","i","slice"],"mappings":"AAAA,SAASA,KAAT,QAAsB,SAAtB;AAYA,OAAO,MAAMC,SAAoC,GAAG,cAA4D;AAAA,MAArD;AAACC,IAAAA,CAAC,EAAEC,MAAJ;AAAYC,IAAAA,SAAZ;AAAuBC,IAAAA,WAAvB;AAAoCC,IAAAA;AAApC,GAAqD;;AAC5G,MAAIJ,CAAC,IAAI,CAAL,IAAUA,CAAC,IAAI,EAAnB,EAAuB;AACrB,QAAIK,GAAG,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAV;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIN,CAArB,EAAwBM,CAAC,EAAzB,EAA6B;AAC3BD,MAAAA,GAAG,CAACC,CAAD,CAAH,GAASD,GAAG,CAACC,CAAC,GAAG,CAAL,CAAH,GAAaD,GAAG,CAACC,CAAC,GAAG,CAAL,CAAzB;AACA,YAAMR,KAAK,CAAC,GAAD,CAAX;AACAI,MAAAA,SAAS,CAACG,GAAG,CAACE,KAAJ,CAAU,CAAV,EAAaD,CAAC,GAAG,CAAjB,CAAD,CAAT;AACD;;AACDH,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAC,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,GATD,MASO;AACLD,IAAAA,WAAW,CAAC,KAAD,CAAX;AACA,WAAO,IAAP;AACD;AACF,CAdI","sourcesContent":["import { delay } from \"./utils\";\nimport { Dispatch, SetStateAction, FunctionComponent } from \"react\";\n\ntype Dispatcher<S> = Dispatch<SetStateAction<S>>;\n\ninterface IProps {\n    n: number,\n    setResult?: Dispatcher<number>,\n    setIsLoader?: Dispatcher<boolean>,\n    setValue?: Dispatcher<string>\n}\n\nexport const fibonacci: FunctionComponent<IProps> = async ({n: number, setResult, setIsLoader, setValue}: I) => {\n    if (n >= 1 && n <= 19) {\n      let arr = [0, 1];\n      for (let i = 2; i <= n; i++) {\n        arr[i] = arr[i - 2] + arr[i - 1];\n        await delay(500);\n        setResult(arr.slice(0, i + 1));\n      }\n      setIsLoader(false)\n      setValue('')\n    } else {\n      setIsLoader(false)\n      return null;\n    }\n  };\n"]},"metadata":{},"sourceType":"module"}