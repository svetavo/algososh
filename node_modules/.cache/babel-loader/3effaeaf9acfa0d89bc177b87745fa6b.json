{"ast":null,"code":"var _jsxFileName = \"/Users/svetavo/dev/algososh/src/components/string/string.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport { Input } from \"../ui/input/input\";\nimport { Circle } from \"../ui/circle/circle\";\nimport { Button } from \"../ui/button/button\";\nimport styles from \"./string.module.css\";\nimport { swap } from \"../../utils/utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const StringComponent = () => {\n  _s();\n\n  const [value, setValue] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [arr, setArr] = useState(null);\n  const [isLoader, setIsLoader] = useState(false);\n\n  const reverse = value => {\n    setIsLoader(true);\n    const newArr = Array.from(value);\n    arrReverse(newArr);\n    setIsOpen(true);\n  };\n\n  const onChange = e => {\n    setValue(e.target.value);\n  };\n\n  const arrReverse = async arr => {\n    for (let i = 0; i < Math.round(arr.length / 2); i++) {\n      swap(arr, i, arr.length - 1 - i);\n    }\n\n    setIsLoader(false);\n    return arr;\n  };\n\n  return /*#__PURE__*/_jsxDEV(SolutionLayout, {\n    title: \"\\u0421\\u0442\\u0440\\u043E\\u043A\\u0430\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.input,\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          onChange: onChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"\\u0420\\u0430\\u0437\\u0432\\u0435\\u0440\\u043D\\u0443\\u0442\\u044C\",\n          onClick: () => reverse(value),\n          isLoader: isLoader\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: isOpen ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.result,\n          children: arr === null || arr === void 0 ? void 0 : arr.map((item, index) => /*#__PURE__*/_jsxDEV(Circle, {\n            letter: item,\n            extraClass: styles.item\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StringComponent, \"2c30YGaZW+ZYPsGBiyzZFqwP6R8=\");\n\n_c = StringComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"StringComponent\");","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/components/string/string.tsx"],"names":["React","useState","SolutionLayout","Input","Circle","Button","styles","swap","StringComponent","value","setValue","isOpen","setIsOpen","arr","setArr","isLoader","setIsLoader","reverse","newArr","Array","from","arrReverse","onChange","e","target","i","Math","round","length","container","input","result","map","item","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,cAAT,QAA+B,uCAA/B;AACA,SAASC,KAAT,QAAsB,mBAAtB;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAASC,IAAT,QAA4B,mBAA5B;;AAEA,OAAO,MAAMC,eAAyB,GAAG,MAAM;AAAA;;AAC7C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACU,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACY,GAAD,EAAMC,MAAN,IAAgBb,QAAQ,CAAkB,IAAlB,CAA9B;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAU,KAAV,CAAxC;;AAGA,QAAMgB,OAAO,GAAIR,KAAD,IAAmB;AACjCO,IAAAA,WAAW,CAAC,IAAD,CAAX;AACA,UAAME,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAWX,KAAX,CAAf;AACAY,IAAAA,UAAU,CAACH,MAAD,CAAV;AACAN,IAAAA,SAAS,CAAC,IAAD,CAAT;AACD,GALD;;AAOA,QAAMU,QAAQ,GAAIC,CAAD,IAAY;AAC3Bb,IAAAA,QAAQ,CAACa,CAAC,CAACC,MAAF,CAASf,KAAV,CAAR;AACD,GAFD;;AAIA,QAAMY,UAAU,GAAG,MAAMR,GAAN,IAAwB;AACzC,SAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWd,GAAG,CAACe,MAAJ,GAAa,CAAxB,CAApB,EAAgDH,CAAC,EAAjD,EAAqD;AACnDlB,MAAAA,IAAI,CAACM,GAAD,EAAMY,CAAN,EAASZ,GAAG,CAACe,MAAJ,GAAa,CAAb,GAAiBH,CAA1B,CAAJ;AACD;;AACDT,IAAAA,WAAW,CAAC,KAAD,CAAX;AACA,WAAOH,GAAP;AACD,GAND;;AAQA,sBACE,QAAC,cAAD;AAAgB,IAAA,KAAK,EAAC,sCAAtB;AAAA,2BACE;AAAK,MAAA,SAAS,EAAEP,MAAM,CAACuB,SAAvB;AAAA,8BACE;AAAK,QAAA,SAAS,EAAEvB,MAAM,CAACwB,KAAvB;AAAA,gCACE,QAAC,KAAD;AAAO,UAAA,QAAQ,EAAER;AAAjB;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,8DAAb;AAA0B,UAAA,OAAO,EAAE,MAAML,OAAO,CAACR,KAAD,CAAhD;AAAyD,UAAA,QAAQ,EAAEM;AAAnE;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAA,kBACGJ,MAAM,gBACL;AAAK,UAAA,SAAS,EAAEL,MAAM,CAACyB,MAAvB;AAAA,oBACGlB,GADH,aACGA,GADH,uBACGA,GAAG,CAAEmB,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,kBACR,QAAC,MAAD;AAAQ,YAAA,MAAM,EAAED,IAAhB;AAAkC,YAAA,UAAU,EAAE3B,MAAM,CAAC2B;AAArD,aAA2BC,KAA3B;AAAA;AAAA;AAAA;AAAA,kBADD;AADH;AAAA;AAAA;AAAA;AAAA,gBADK,GAMH;AAPN;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CA7CM;;GAAM1B,e;;KAAAA,e","sourcesContent":["import React, { useState } from \"react\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport { Input } from \"../ui/input/input\";\nimport { Circle } from \"../ui/circle/circle\";\nimport { Button } from \"../ui/button/button\";\nimport styles from \"./string.module.css\";\nimport { swap, delay } from \"../../utils/utils\";\n\nexport const StringComponent: React.FC = () => {\n  const [value, setValue] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [arr, setArr] = useState<null | string[]>(null);\n  const [isLoader, setIsLoader] = useState<boolean>(false);\n\n\n  const reverse = (value: string) => {\n    setIsLoader(true);\n    const newArr = Array.from(value);\n    arrReverse(newArr)\n    setIsOpen(true);\n  };\n\n  const onChange = (e: any) => {\n    setValue(e.target.value);\n  };\n\n  const arrReverse = async(arr: string[]) => {\n    for (let i = 0; i < Math.round(arr.length / 2); i++) {\n      swap(arr, i, arr.length - 1 - i);\n    }\n    setIsLoader(false)\n    return arr;\n  };\n\n  return (\n    <SolutionLayout title=\"Строка\">\n      <div className={styles.container}>\n        <div className={styles.input}>\n          <Input onChange={onChange} />\n          <Button text=\"Развернуть\" onClick={() => reverse(value)} isLoader={isLoader}/>\n        </div>\n        <div>\n          {isOpen ? (\n            <div className={styles.result}>\n              {arr?.map((item, index) => (\n                <Circle letter={item} key={index} extraClass={styles.item}/>\n              ))}\n            </div>\n          ) : null}\n        </div>\n      </div>\n    </SolutionLayout>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}