{"ast":null,"code":"i;\n\nclass Queue {\n  constructor() {\n    this.container = [];\n    this.maxSize = 7;\n\n    this.enqueue = (index, item) => {\n      if (this.getSize() < this.maxSize) {\n        this.container.splice(index, 1, item);\n      }\n    };\n\n    this.dequeue = () => {\n      if (this.getSize()) {\n        this.container.pop();\n      }\n    };\n\n    this.peak = () => {\n      if (this.getSize()) {\n        return this.container[this.getSize() - 1];\n      }\n\n      return null;\n    };\n\n    this.clear = () => {\n      this.container = [];\n    };\n\n    this.getSize = () => this.container.length;\n\n    this.printStack = () => this.container;\n\n    this.isFull = () => {\n      if (this.getSize() < this.maxSize) {\n        return false;\n      }\n\n      return true;\n    };\n  }\n\n}\n\nexport const queue = new Queue();","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/components/queue-page/queue_class.tsx"],"names":["i","Queue","container","maxSize","enqueue","index","item","getSize","splice","dequeue","pop","peak","clear","length","printStack","isFull","queue"],"mappings":"AAAAA,CAAC;;AAWC,MAAMC,KAAN,CAAoC;AAAA;AAAA,SAE1BC,SAF0B,GAET,EAFS;AAAA,SAGlCC,OAHkC,GAGxB,CAHwB;;AAAA,SAKlCC,OALkC,GAKxB,CAACC,KAAD,EAAgBC,IAAhB,KAA4B;AACpC,UAAI,KAAKC,OAAL,KAAiB,KAAKJ,OAA1B,EAAmC;AACjC,aAAKD,SAAL,CAAeM,MAAf,CAAsBH,KAAtB,EAA6B,CAA7B,EAAgCC,IAAhC;AACD;AACF,KATiC;;AAAA,SAWlCG,OAXkC,GAWxB,MAAY;AACpB,UAAI,KAAKF,OAAL,EAAJ,EAAoB;AAClB,aAAKL,SAAL,CAAeQ,GAAf;AACD;AACF,KAfiC;;AAAA,SAiBlCC,IAjBkC,GAiB3B,MAAgB;AACrB,UAAI,KAAKJ,OAAL,EAAJ,EAAoB;AAClB,eAAO,KAAKL,SAAL,CAAe,KAAKK,OAAL,KAAiB,CAAhC,CAAP;AACD;;AACD,aAAO,IAAP;AACD,KAtBiC;;AAAA,SAwBlCK,KAxBkC,GAwB1B,MAAY;AAClB,WAAKV,SAAL,GAAiB,EAAjB;AACD,KA1BiC;;AAAA,SA4BlCK,OA5BkC,GA4BxB,MAAM,KAAKL,SAAL,CAAeW,MA5BG;;AAAA,SA8BlCC,UA9BkC,GA8BrB,MAAM,KAAKZ,SA9BU;;AAAA,SAgClCa,MAhCkC,GAgCzB,MAAM;AACb,UAAI,KAAKR,OAAL,KAAiB,KAAKJ,OAA1B,EAAmC;AACjC,eAAO,KAAP;AACD;;AACD,aAAO,IAAP;AACD,KArCiC;AAAA;;AAAA;;AAwCpC,OAAO,MAAMa,KAAK,GAAG,IAAIf,KAAJ,EAAd","sourcesContent":["i\ninterface IQueue<T> {\n    enqueue: (index: number, item: T) => void;\n    dequeue: () => void;\n    peak: () => T | null;\n    getSize: () => number;\n    printStack: () => T[];\n    clear: () => void;\n    isFull: () => boolean;\n  }\n  \n  class Queue<T> implements IQueue<T> {\n    \n    private container: T[] = [];\n    maxSize = 7;\n  \n    enqueue = (index: number, item: T) => {\n      if (this.getSize() < this.maxSize) {\n        this.container.splice(index, 1, item);\n      }\n    };\n  \n    dequeue = (): void => {\n      if (this.getSize()) {\n        this.container.pop();\n      }\n    };\n  \n    peak = (): T | null => {\n      if (this.getSize()) {\n        return this.container[this.getSize() - 1];\n      }\n      return null;\n    };\n  \n    clear = (): void => {\n      this.container = [];\n    };\n  \n    getSize = () => this.container.length;\n  \n    printStack = () => this.container;\n  \n    isFull = () => {\n      if (this.getSize() < this.maxSize) {\n        return false;\n      }\n      return true;\n    };\n  }\n  \n  export const queue = new Queue<string>();\n  "]},"metadata":{},"sourceType":"module"}