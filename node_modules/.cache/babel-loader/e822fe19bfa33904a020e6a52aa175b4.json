{"ast":null,"code":"import { delay } from \"./utils\";\nexport const fibonacci = async _ref => {\n  let {\n    value,\n    setResult,\n    setIsLoader,\n    setValue\n  } = _ref;\n  const valueNum = Number(value);\n\n  if (valueNum >= 1 && valueNum <= 19) {\n    let arr = [0];\n\n    for (let i = 0; i <= valueNum; i++) {\n      if (i == 0) return 0;\n      if (i == 1) return 1;else arr[i] = arr[i - 2] + arr[i - 1];\n      await delay(500);\n      setResult(arr.slice(0, i + 1));\n      await delay(500);\n    }\n\n    setIsLoader(false);\n    setValue(\"\");\n  } else {\n    setIsLoader(false);\n    return null;\n  }\n};","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/utils/fibonacci-utils.ts"],"names":["delay","fibonacci","value","setResult","setIsLoader","setValue","valueNum","Number","arr","i","slice"],"mappings":"AAAA,SAASA,KAAT,QAAsB,SAAtB;AAYA,OAAO,MAAMC,SAAS,GAAG,cAKV;AAAA,MALiB;AAC9BC,IAAAA,KAD8B;AAE9BC,IAAAA,SAF8B;AAG9BC,IAAAA,WAH8B;AAI9BC,IAAAA;AAJ8B,GAKjB;AACb,QAAMC,QAAQ,GAAGC,MAAM,CAACL,KAAD,CAAvB;;AACA,MAAII,QAAQ,IAAI,CAAZ,IAAiBA,QAAQ,IAAI,EAAjC,EAAqC;AACnC,QAAIE,GAAG,GAAG,CAAC,CAAD,CAAV;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIH,QAArB,EAA+BG,CAAC,EAAhC,EAAoC;AAClC,UAAKA,CAAC,IAAI,CAAV,EAAc,OAAO,CAAP;AACd,UAAIA,CAAC,IAAI,CAAT,EAAY,OAAO,CAAP,CAAZ,KACKD,GAAG,CAACC,CAAD,CAAH,GAASD,GAAG,CAACC,CAAC,GAAG,CAAL,CAAH,GAAaD,GAAG,CAACC,CAAC,GAAG,CAAL,CAAzB;AACL,YAAMT,KAAK,CAAC,GAAD,CAAX;AACAG,MAAAA,SAAS,CAACK,GAAG,CAACE,KAAJ,CAAU,CAAV,EAAaD,CAAC,GAAG,CAAjB,CAAD,CAAT;AACA,YAAMT,KAAK,CAAC,GAAD,CAAX;AACD;;AACDI,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAC,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,GAZD,MAYO;AACLD,IAAAA,WAAW,CAAC,KAAD,CAAX;AACA,WAAO,IAAP;AACD;AACF,CAvBM","sourcesContent":["import { delay } from \"./utils\";\nimport { Dispatch, SetStateAction } from \"react\";\n\ntype Dispatcher<S> = Dispatch<SetStateAction<S>>;\n\ninterface IProps {\n  value: string;\n  setResult: Dispatcher<number[] | null>;\n  setIsLoader: Dispatcher<boolean>;\n  setValue: Dispatcher<string>;\n}\n\nexport const fibonacci = async ({\n  value,\n  setResult,\n  setIsLoader,\n  setValue,\n}: IProps)  => {\n  const valueNum = Number(value)\n  if (valueNum >= 1 && valueNum <= 19) {\n    let arr = [0, ];\n    for (let i = 0; i <= valueNum; i++) {\n      if ( i == 0 ) return 0\n      if (i == 1) return 1\n      else arr[i] = arr[i - 2] + arr[i - 1];\n      await delay(500);\n      setResult(arr.slice(0, i + 1));\n      await delay(500);\n    }\n    setIsLoader(false);\n    setValue(\"\");\n  } else {\n    setIsLoader(false);\n    return null;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}