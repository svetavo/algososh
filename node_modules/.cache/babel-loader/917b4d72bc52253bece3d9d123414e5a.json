{"ast":null,"code":"var _jsxFileName = \"/Users/svetavo/dev/algososh/src/components/stack-page/stack-page.tsx\";\nimport React from \"react\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport styles from \"./stack.module.css\";\nimport { Button } from \"../ui/button/button\";\nimport { Input } from \"../ui/input/input\";\nimport { Circle } from \"../ui/circle/circle\";\nimport { ElementStates } from \"../../types/element-states\";\nimport { pushStack } from \"../../utils/stack-utils\"; // export const StackPage: React.FC = () => {\n//   const [value, setValue] = useState(\"\");\n//   const [isLoader, setIsLoader] = useState<boolean>(false);\n//   const [currentIndex, setCurrentIndex] = useState(-1);\n//   const [stack, setStack] = useState<string[]>([]);\n//   const pushProps = {\n//     value,\n//     stack,\n//     setIsLoader,\n//     setStack,\n//     setCurrentIndex,\n//     currentIndex,\n//     setValue,\n//   };\n//   const popProps = {\n//     stack,\n//     setIsLoader,\n//     setStack,\n//     setCurrentIndex,\n//     currentIndex,\n//   };\n//   const clearProps = {\n//     stack,\n//     setIsLoader,\n//     setStack,\n//   };\n//   const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n//     setValue(e.target.value);\n//   };\n//   const onAdd = () => {\n//     value ? pushStack(pushProps) : alert(\"Введите значение в инпут\");\n//   };\n//   const onDelete = () => {\n//     stack.length ? popStack(popProps) : alert(\"стек пуст\");\n//   };\n//   const onClear = () => {\n//     stack.length ? clearStack(clearProps) : alert(\"стек пуст\");\n//   };\n//   return (\n//     <SolutionLayout title=\"Стек\">\n//       <div className={styles.container}>\n//         <div className={styles.input}>\n//           <Input onChange={onChange} value={value} maxLength={4} />\n//           <Button\n//             text=\"Добавить\"\n//             isLoader={isLoader}\n//             extraClass=\"mr-5\"\n//             onClick={onAdd}\n//           />\n//           <Button\n//             text=\"Удалить\"\n//             isLoader={isLoader}\n//             extraClass=\"mr-20\"\n//             onClick={onDelete}\n//           />\n//           <Button text=\"Очистить\" isLoader={isLoader} onClick={onClear} />\n//         </div>\n//         <div>\n//           <div className={styles.result}>\n//             {stack?.map((item, index) => (\n//               <Circle\n//                 letter={item}\n//                 key={index}\n//                 index={index}\n//                 extraClass={styles.item}\n//                 state={\n//                   currentIndex === index\n//                     ? ElementStates.Changing\n//                     : ElementStates.Default\n//                 }\n//                 head={currentIndex === index ? \"top\" : null}\n//               />\n//             ))}\n//           </div>\n//         </div>\n//       </div>\n//     </SolutionLayout>\n//   );\n// }\n// interface Props {\n//   value: string;\n//   isLoader: boolean;\n//   currentIndex: number;\n//   stack: string[];\n// };\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StackPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: \"\",\n      isLoader: false,\n      currentIndex: -1,\n      stack: []\n    };\n  }\n\n  onChange(e) {\n    this.setState({\n      value: e.target.value\n    });\n  }\n\n  onAdd() {\n    const value = this.state.value;\n    const pushProps = {\n      thisvalue,\n      stack,\n      setIsLoader,\n      setStack,\n      setCurrentIndex,\n      currentIndex,\n      setValue\n    };\n    value ? pushStack() : alert(\"Введите значение в инпут\");\n  }\n\n  onDelete() {\n    const stack = this.state.stack;\n    stack.length ? this.popStack() : alert(\"стек пуст\");\n  }\n\n  onClear() {\n    const stack = this.state.stack;\n    stack.length ? this.clearStack() : alert(\"стек пуст\");\n  }\n\n  render() {\n    const {\n      value,\n      isLoader,\n      currentIndex,\n      stack\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(SolutionLayout, {\n      title: \"\\u0421\\u0442\\u0435\\u043A\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.container,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.input,\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            onChange: this.onChange,\n            value: value,\n            maxLength: 4\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            text: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\",\n            isLoader: isLoader,\n            extraClass: \"mr-5\",\n            onClick: this.onAdd\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            text: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\",\n            isLoader: isLoader,\n            extraClass: \"mr-20\",\n            onClick: this.onDelete\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            text: \"\\u041E\\u0447\\u0438\\u0441\\u0442\\u0438\\u0442\\u044C\",\n            isLoader: isLoader,\n            onClick: this.onClear\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.result,\n            children: stack === null || stack === void 0 ? void 0 : stack.map((item, index) => /*#__PURE__*/_jsxDEV(Circle, {\n              letter: item,\n              index: index,\n              extraClass: styles.item,\n              state: currentIndex === index ? ElementStates.Changing : ElementStates.Default,\n              head: currentIndex === index ? \"top\" : null\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default StackPage;","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/components/stack-page/stack-page.tsx"],"names":["React","SolutionLayout","styles","Button","Input","Circle","ElementStates","pushStack","StackPage","Component","constructor","props","state","value","isLoader","currentIndex","stack","onChange","e","setState","target","onAdd","pushProps","thisvalue","setIsLoader","setStack","setCurrentIndex","setValue","alert","onDelete","length","popStack","onClear","clearStack","render","container","input","result","map","item","index","Changing","Default"],"mappings":"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","sourcesContent":["import React, { useState, ChangeEvent } from \"react\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport styles from \"./stack.module.css\";\nimport { Button } from \"../ui/button/button\";\nimport { Input } from \"../ui/input/input\";\nimport { Circle } from \"../ui/circle/circle\";\nimport { ElementStates } from \"../../types/element-states\";\nimport { pushStack, popStack, clearStack } from \"../../utils/stack-utils\";\n\n// export const StackPage: React.FC = () => {\n//   const [value, setValue] = useState(\"\");\n//   const [isLoader, setIsLoader] = useState<boolean>(false);\n//   const [currentIndex, setCurrentIndex] = useState(-1);\n//   const [stack, setStack] = useState<string[]>([]);\n//   const pushProps = {\n//     value,\n//     stack,\n//     setIsLoader,\n//     setStack,\n//     setCurrentIndex,\n//     currentIndex,\n//     setValue,\n//   };\n//   const popProps = {\n//     stack,\n//     setIsLoader,\n//     setStack,\n//     setCurrentIndex,\n//     currentIndex,\n//   };\n//   const clearProps = {\n//     stack,\n//     setIsLoader,\n//     setStack,\n//   };\n\n//   const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n//     setValue(e.target.value);\n//   };\n\n//   const onAdd = () => {\n//     value ? pushStack(pushProps) : alert(\"Введите значение в инпут\");\n//   };\n\n//   const onDelete = () => {\n//     stack.length ? popStack(popProps) : alert(\"стек пуст\");\n//   };\n\n//   const onClear = () => {\n//     stack.length ? clearStack(clearProps) : alert(\"стек пуст\");\n//   };\n\n//   return (\n//     <SolutionLayout title=\"Стек\">\n//       <div className={styles.container}>\n//         <div className={styles.input}>\n//           <Input onChange={onChange} value={value} maxLength={4} />\n//           <Button\n//             text=\"Добавить\"\n//             isLoader={isLoader}\n//             extraClass=\"mr-5\"\n//             onClick={onAdd}\n//           />\n//           <Button\n//             text=\"Удалить\"\n//             isLoader={isLoader}\n//             extraClass=\"mr-20\"\n//             onClick={onDelete}\n//           />\n//           <Button text=\"Очистить\" isLoader={isLoader} onClick={onClear} />\n//         </div>\n//         <div>\n//           <div className={styles.result}>\n//             {stack?.map((item, index) => (\n//               <Circle\n//                 letter={item}\n//                 key={index}\n//                 index={index}\n//                 extraClass={styles.item}\n//                 state={\n//                   currentIndex === index\n//                     ? ElementStates.Changing\n//                     : ElementStates.Default\n//                 }\n//                 head={currentIndex === index ? \"top\" : null}\n//               />\n//             ))}\n//           </div>\n//         </div>\n//       </div>\n//     </SolutionLayout>\n//   );\n// }\n\n// interface Props {\n//   value: string;\n//   isLoader: boolean;\n//   currentIndex: number;\n//   stack: string[];\n// };\n\ninterface IState {\n  state: {\n    value: string;\n    isLoader: boolean;\n    currentIndex: number;\n    stack: string[];\n  };\n}\n\nclass StackPage extends React.Component<IState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: \"\",\n      isLoader: false,\n      currentIndex: -1,\n      stack: [],\n    };\n  }\n\n  onChange(e: ChangeEvent<HTMLInputElement>) {\n    this.setState({ value: e.target.value });\n  }\n\n  onAdd() {\n    const value  = this.state.value;\n    const pushProps = {\n          thisvalue,\n          stack,\n          setIsLoader,\n          setStack,\n          setCurrentIndex,\n          currentIndex,\n          setValue,\n        }\n    value ? pushStack() : alert(\"Введите значение в инпут\");\n  }\n\n  onDelete() {\n    const stack  = this.state.stack;\n    stack.length ? this.popStack() : alert(\"стек пуст\");\n  }\n\n  onClear() {\n    const  stack  = this.state.stack;\n    stack.length ? this.clearStack() : alert(\"стек пуст\");\n  }\n\n  render() {\n    const { value, isLoader, currentIndex, stack } = this.state;\n\n    return (\n      <SolutionLayout title=\"Стек\">\n        <div className={styles.container}>\n          <div className={styles.input}>\n            <Input onChange={this.onChange} value={value} maxLength={4} />\n            <Button\n              text=\"Добавить\"\n              isLoader={isLoader}\n              extraClass=\"mr-5\"\n              onClick={this.onAdd}\n            />\n            <Button\n              text=\"Удалить\"\n              isLoader={isLoader}\n              extraClass=\"mr-20\"\n              onClick={this.onDelete}\n            />\n            <Button\n              text=\"Очистить\"\n              isLoader={isLoader}\n              onClick={this.onClear}\n            />\n          </div>\n          <div>\n            <div className={styles.result}>\n              {stack?.map((item, index) => (\n                <Circle\n                  letter={item}\n                  key={index}\n                  index={index}\n                  extraClass={styles.item}\n                  state={\n                    currentIndex === index\n                      ? ElementStates.Changing\n                      : ElementStates.Default\n                  }\n                  head={currentIndex === index ? \"top\" : null}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n      </SolutionLayout>\n    );\n  }\n}\n\nexport default StackPage;\n"]},"metadata":{},"sourceType":"module"}