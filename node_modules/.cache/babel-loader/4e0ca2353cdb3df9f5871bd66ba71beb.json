{"ast":null,"code":"import { delay } from \"../utils/utils\";\nimport { list } from \"../components/list-page/List\";\nimport { ElementStates } from \"../types/element-states\";\n// добавить в head\nexport const addHead = async _ref => {\n  let {\n    array,\n    value,\n    setIsLoader,\n    setIsDisabled,\n    setHead,\n    setTail,\n    setArray,\n    setIsChanging\n  } = _ref;\n  setIsLoader(true);\n  setIsDisabled(true);\n  setIsChanging(\"headAdd\");\n  const newEl = {\n    number: value,\n    state: ElementStates.Default\n  };\n  newEl.state = ElementStates.Changing;\n  await delay(500);\n  list.unshift(newEl, array);\n  await delay(500);\n  setArray(list.print());\n  newEl.state = ElementStates.Modified;\n  setHead(list.head);\n  setTail(list.tail);\n  setIsChanging(\"\");\n  await delay(500);\n  newEl.state = ElementStates.Default;\n  setIsLoader(false);\n  setIsDisabled(false);\n}; // добавить в tail\n\nexport const addTail = async _ref2 => {\n  let {\n    array,\n    value,\n    setIsLoader,\n    setArray,\n    setHead,\n    setTail,\n    setIsDisabled,\n    setIsChanging\n  } = _ref2;\n  setIsLoader(true);\n  setIsDisabled(true);\n  setIsChanging(\"tailAdd\");\n  const newEl = {\n    number: value,\n    state: ElementStates.Default\n  };\n  newEl.state = ElementStates.Changing;\n  await delay(500);\n  list.push(newEl, array);\n  await delay(500);\n  setArray(list.print());\n  newEl.state = ElementStates.Modified;\n  setHead(list.head);\n  setTail(list.tail);\n  setIsChanging(\"\");\n  await delay(500);\n  newEl.state = ElementStates.Default;\n  setIsLoader(false);\n  setIsDisabled(false);\n}; // удалить из head\n\nexport const removeHead = async _ref3 => {\n  let {\n    array,\n    setIsLoader,\n    setArray,\n    setIsDisabled,\n    setHead,\n    setTail,\n    setIsChanging\n  } = _ref3;\n  setIsLoader(true);\n  setIsDisabled(true);\n  setIsChanging(\"headRemove\");\n  await delay(500);\n  list.shift(array);\n  await delay(500);\n  setArray(list.print());\n  setHead(list.head);\n  setTail(list.tail);\n  setIsChanging(\"\");\n  await delay(500);\n  setIsDisabled(false);\n  setIsLoader(false);\n}; // удалить из tail\n\nexport const removeTail = async _ref4 => {\n  let {\n    array,\n    setIsLoader,\n    setArray,\n    setIsDisabled,\n    setHead,\n    setTail,\n    setIsChanging\n  } = _ref4;\n  setIsLoader(true);\n  setIsDisabled(true);\n  setIsChanging(\"tailRemove\");\n  await delay(500);\n  list.pop(array);\n  await delay(500);\n  setArray(list.print());\n  setHead(list.head);\n  setTail(list.tail);\n  setIsChanging(\"\");\n  await delay(500);\n  setIsDisabled(false);\n  setIsLoader(false);\n}; //добавить по индексу\n\nexport const addIndex = async _ref5 => {\n  let {\n    array,\n    value,\n    index,\n    setIsLoader,\n    setIsDisabled,\n    setHead,\n    setTail,\n    setArray,\n    setIsChanging,\n    setCurrentIndex\n  } = _ref5;\n  setIsLoader(true);\n  setIsDisabled(true);\n  setIsChanging(\"indexAdd\");\n  setCurrentIndex(index);\n  const newEl = {\n    number: value,\n    state: ElementStates.Default\n  };\n  newEl.state = ElementStates.Changing;\n  await delay(500);\n  list.addInd(index, newEl, array);\n  await delay(500);\n  setArray(list.print());\n  newEl.state = ElementStates.Modified;\n  setHead(list.head);\n  setTail(list.tail);\n  setIsChanging(\"\");\n  await delay(500);\n  newEl.state = ElementStates.Default;\n  setIsDisabled(false);\n  setIsLoader(false);\n}; //удалить по индексу\n\nexport const removeIndex = async _ref6 => {\n  let {\n    array,\n    index,\n    setIsLoader,\n    setIsDisabled,\n    setHead,\n    setTail,\n    setArray,\n    setCurrentIndex,\n    setIsChanging\n  } = _ref6;\n  setIsLoader(true);\n  setIsDisabled(true); // colorSelection({ array, index });\n\n  for (let i = 0; i < index; i++) {\n    array[i].state = ElementStates.Changing;\n    console.log(i);\n    setArray(array);\n    await delay(1000);\n  } // await delay(1000);\n\n\n  setIsChanging(\"indexRemove\"); // setArray(array!);\n  // await delay(500);\n\n  list.removeInd(index, array);\n  await delay(500);\n  setArray(list.print());\n  setHead(list.head);\n  setTail(list.tail);\n  setIsChanging(\"\");\n  await delay(500);\n  setIsDisabled(false);\n  setIsLoader(false);\n};\n\nconst colorSelection = async _ref7 => {\n  let {\n    array,\n    index\n  } = _ref7;\n\n  for (let i = 0; i < index; i++) {\n    array[i].state = ElementStates.Changing;\n    console.log(i);\n    await delay(1000);\n  }\n};","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/utils/list-utils.ts"],"names":["delay","list","ElementStates","addHead","array","value","setIsLoader","setIsDisabled","setHead","setTail","setArray","setIsChanging","newEl","number","state","Default","Changing","unshift","print","Modified","head","tail","addTail","push","removeHead","shift","removeTail","pop","addIndex","index","setCurrentIndex","addInd","removeIndex","i","console","log","removeInd","colorSelection"],"mappings":"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","sourcesContent":["import { Dispatch, SetStateAction } from \"react\";\nimport { delay } from \"../utils/utils\";\nimport { list } from \"../components/list-page/List\";\nimport { IArrEl } from \"../utils/utils\";\nimport { ElementStates } from \"../types/element-states\";\n\ntype Dispatcher<S> = Dispatch<SetStateAction<S>>;\n\ninterface IProps<T> {\n  array?: T[];\n  value?: number;\n  index?: number;\n  setArray: Dispatcher<T[]>;\n  setHead: Dispatcher<number>;\n  setIsLoader: Dispatcher<boolean>;\n  setIsDisabled: Dispatcher<boolean>;\n  setIsChanging?: Dispatcher<string>;\n  setTail: Dispatcher<number>;\n  setCurrentIndex?: Dispatcher<number>;\n}\n\ninterface ISel<T> {\n  array: T[] | undefined;\n  index: number | undefined;\n}\n\n// добавить в head\nexport const addHead = async ({\n  array,\n  value,\n  setIsLoader,\n  setIsDisabled,\n  setHead,\n  setTail,\n  setArray,\n  setIsChanging,\n}: IProps<IArrEl>) => {\n  setIsLoader(true);\n  setIsDisabled(true);\n  setIsChanging!(\"headAdd\");\n  const newEl = { number: value, state: ElementStates.Default };\n  newEl.state = ElementStates.Changing;\n  await delay(500);\n  list.unshift(newEl, array!);\n  await delay(500);\n  setArray(list.print());\n  newEl.state = ElementStates.Modified;\n  setHead(list.head);\n  setTail(list.tail);\n  setIsChanging!(\"\");\n  await delay(500);\n  newEl.state = ElementStates.Default;\n  setIsLoader(false);\n  setIsDisabled(false);\n};\n\n// добавить в tail\nexport const addTail = async ({\n  array,\n  value,\n  setIsLoader,\n  setArray,\n  setHead,\n  setTail,\n  setIsDisabled,\n  setIsChanging,\n}: IProps<IArrEl>) => {\n  setIsLoader(true);\n  setIsDisabled(true);\n  setIsChanging!(\"tailAdd\");\n  const newEl = { number: value, state: ElementStates.Default };\n  newEl.state = ElementStates.Changing;\n  await delay(500);\n  list.push(newEl, array!);\n  await delay(500);\n  setArray(list.print());\n  newEl.state = ElementStates.Modified;\n  setHead(list.head);\n  setTail(list.tail);\n  setIsChanging!(\"\");\n  await delay(500);\n  newEl.state = ElementStates.Default;\n  setIsLoader(false);\n  setIsDisabled(false);\n};\n\n// удалить из head\nexport const removeHead = async ({\n  array,\n  setIsLoader,\n  setArray,\n  setIsDisabled,\n  setHead,\n  setTail,\n  setIsChanging,\n}: IProps<IArrEl>) => {\n  setIsLoader(true);\n  setIsDisabled(true);\n  setIsChanging!(\"headRemove\");\n  await delay(500);\n  list.shift(array!);\n  await delay(500);\n  setArray(list.print());\n  setHead(list.head);\n  setTail(list.tail);\n  setIsChanging!(\"\");\n  await delay(500);\n  setIsDisabled!(false);\n  setIsLoader!(false);\n};\n\n// удалить из tail\nexport const removeTail = async ({\n  array,\n  setIsLoader,\n  setArray,\n  setIsDisabled,\n  setHead,\n  setTail,\n  setIsChanging,\n}: IProps<IArrEl>) => {\n  setIsLoader(true);\n  setIsDisabled(true);\n  setIsChanging!(\"tailRemove\");\n  await delay(500);\n  list.pop(array!);\n  await delay(500);\n  setArray(list.print());\n  setHead(list.head);\n  setTail(list.tail);\n  setIsChanging!(\"\");\n  await delay(500);\n  setIsDisabled(false);\n  setIsLoader(false);\n};\n\n//добавить по индексу\nexport const addIndex = async ({\n  array,\n  value,\n  index,\n  setIsLoader,\n  setIsDisabled,\n  setHead,\n  setTail,\n  setArray,\n  setIsChanging,\n  setCurrentIndex,\n}: IProps<IArrEl>) => {\n  setIsLoader(true);\n  setIsDisabled(true);\n  setIsChanging!(\"indexAdd\");\n  setCurrentIndex!(index!);\n  const newEl = { number: value, state: ElementStates.Default };\n  newEl.state = ElementStates.Changing;\n  await delay(500);\n  list.addInd(index!, newEl!, array!);\n  await delay(500);\n  setArray(list.print());\n  newEl.state = ElementStates.Modified;\n  setHead(list.head);\n  setTail(list.tail);\n  setIsChanging!(\"\");\n  await delay(500);\n  newEl.state = ElementStates.Default;\n  setIsDisabled(false);\n  setIsLoader(false);\n};\n\n//удалить по индексу\nexport const removeIndex = async ({\n  array,\n  index,\n  setIsLoader,\n  setIsDisabled,\n  setHead,\n  setTail,\n  setArray,\n  setCurrentIndex,\n  setIsChanging,\n}: IProps<IArrEl>) => {\n  setIsLoader(true);\n  setIsDisabled(true);\n  // colorSelection({ array, index });\n  for (let i = 0; i < index!; i++) {\n    array![i].state = ElementStates.Changing;\n    console.log(i);\n    setArray(array)\n    await delay(1000);\n  }\n  // await delay(1000);\n  setIsChanging!(\"indexRemove\");\n  // setArray(array!);\n  // await delay(500);\n  list.removeInd(index!, array!);\n  await delay(500);\n  setArray(list.print());\n  setHead(list.head);\n  setTail(list.tail);\n  setIsChanging!(\"\");\n  await delay(500);\n  setIsDisabled(false);\n  setIsLoader(false);\n};\n\nconst colorSelection = async ({ array, index }: ISel<IArrEl>) => {\n  for (let i = 0; i < index!; i++) {\n    array![i].state = ElementStates.Changing;\n    console.log(i);\n    await delay(1000);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}