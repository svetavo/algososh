{"ast":null,"code":"var _jsxFileName = \"/Users/svetavo/dev/algososh/src/components/string/string.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport { Input } from \"../ui/input/input\";\nimport { Circle } from \"../ui/circle/circle\";\nimport { Button } from \"../ui/button/button\";\nimport styles from \"./string.module.css\";\nimport { delay } from \"../../utils/utils\";\nimport { circleColor } from \"../../utils/string-utils\";\nimport { ElementStates } from \"src/types/element-states\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const StringComponent = () => {\n  _s();\n\n  const [value, setValue] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [arr, setArr] = useState(null);\n  const [isLoader, setIsLoader] = useState(false);\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  const makeArray = value => {\n    const array = [];\n    const newArr = value.split(\"\");\n\n    for (let i = 0; i < array.length; i++) {\n      array.push({\n        number: Number(newArr[i]),\n        state: ElementStates.Default\n      });\n      console.log(array);\n    }\n\n    return array;\n  };\n\n  const reverse = async value => {\n    setIsLoader(true);\n    const newArr = value.split(\"\");\n    setArr(newArr);\n    await delay(1000);\n    arrReverse(newArr);\n    setIsOpen(true);\n  };\n\n  const onChange = e => {\n    setValue(e.target.value);\n  };\n\n  const arrReverse = async arr => {\n    const end = arr.length - 1;\n    const mid = Math.floor(arr.length / 2);\n    setCurrentIndex(0);\n\n    for (let i = 0; i < mid; i++) {\n      await delay(1000);\n      [arr[i], arr[end - i]] = [arr[end - i], arr[i]];\n      setCurrentIndex(i => i + 1);\n      setArr(arr);\n    }\n\n    setIsLoader(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(SolutionLayout, {\n    title: \"\\u0421\\u0442\\u0440\\u043E\\u043A\\u0430\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.input,\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          onChange: onChange,\n          type: \"text\",\n          maxLength: 11,\n          isLimitText: true,\n          \"data-test\": \"input-tag\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"\\u0420\\u0430\\u0437\\u0432\\u0435\\u0440\\u043D\\u0443\\u0442\\u044C\",\n          onClick: () => makeArray(value),\n          isLoader: isLoader,\n          disabled: value ? false : true,\n          \"data-test\": \"button-tag\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: isOpen ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.result,\n          children: arr === null || arr === void 0 ? void 0 : arr.map((item, index) => /*#__PURE__*/_jsxDEV(Circle, {\n            letter: item,\n            extraClass: styles.item,\n            state: circleColor(currentIndex, index, arr),\n            \"data-test\": \"circle-tag\"\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StringComponent, \"uMJTFrJkxPj/bK5i6oupqrw3RIY=\");\n\n_c = StringComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"StringComponent\");","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/components/string/string.tsx"],"names":["React","useState","SolutionLayout","Input","Circle","Button","styles","delay","circleColor","ElementStates","StringComponent","value","setValue","isOpen","setIsOpen","arr","setArr","isLoader","setIsLoader","currentIndex","setCurrentIndex","makeArray","array","newArr","split","i","length","push","number","Number","state","Default","console","log","reverse","arrReverse","onChange","e","target","end","mid","Math","floor","container","input","result","map","item","index"],"mappings":"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","sourcesContent":["import React, { useState, ChangeEvent } from \"react\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport { Input } from \"../ui/input/input\";\nimport { Circle } from \"../ui/circle/circle\";\nimport { Button } from \"../ui/button/button\";\nimport styles from \"./string.module.css\";\nimport { delay } from \"../../utils/utils\";\nimport { circleColor } from \"../../utils/string-utils\";\nimport { ElementStates } from \"src/types/element-states\";\n\nexport const StringComponent: React.FC = () => {\n  const [value, setValue] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [arr, setArr] = useState<null | string[]>(null);\n  const [isLoader, setIsLoader] = useState<boolean>(false);\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  const makeArray = (value: string) => {\n    const array = [];\n    const newArr = value.split(\"\");\n    for (let i = 0; i < array.length; i++) {\n      array.push({\n        number: Number(newArr[i]),\n        state: ElementStates.Default,\n      });\n      console.log(array)\n\n    }\n    return array\n  };\n\n  const reverse = async (value: string) => {\n    setIsLoader(true);\n    const newArr = value.split(\"\");\n    setArr(newArr);\n    await delay(1000);\n    arrReverse(newArr);\n    setIsOpen(true);\n  };\n\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setValue(e.target.value);\n  };\n\n  const arrReverse = async (arr: string[]) => {\n    const end = arr.length - 1;\n    const mid = Math.floor(arr.length / 2);\n    setCurrentIndex(0);\n    for (let i = 0; i < mid; i++) {\n      await delay(1000);\n      [arr[i], arr[end - i]] = [arr[end - i], arr[i]];\n      setCurrentIndex((i) => i + 1);\n      setArr(arr);\n    }\n    setIsLoader(false);\n  };\n\n  return (\n    <SolutionLayout title=\"Строка\">\n      <div className={styles.container}>\n        <div className={styles.input}>\n          <Input\n            onChange={onChange}\n            type=\"text\"\n            maxLength={11}\n            isLimitText={true}\n            data-test=\"input-tag\"\n          />\n          <Button\n            text=\"Развернуть\"\n            onClick={() => makeArray(value)}\n            isLoader={isLoader}\n            disabled={value ? false : true}\n            data-test=\"button-tag\"\n          />\n        </div>\n        <div>\n          {isOpen ? (\n            <div className={styles.result}>\n              {arr?.map((item, index) => (\n                <Circle\n                  letter={item}\n                  key={index}\n                  extraClass={styles.item}\n                  state={circleColor(currentIndex, index, arr)}\n                  data-test=\"circle-tag\"\n                />\n              ))}\n            </div>\n          ) : null}\n        </div>\n      </div>\n    </SolutionLayout>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}