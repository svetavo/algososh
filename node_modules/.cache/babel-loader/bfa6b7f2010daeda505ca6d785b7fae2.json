{"ast":null,"code":"import { delay } from \"./utils\";\nexport const fibonacci = async _ref => {\n  let {\n    value,\n    setResult,\n    setIsLoader,\n    setValue\n  } = _ref;\n  valu;\n\n  if (value >= 1 && value <= 19) {\n    let arr = [0, 1];\n\n    for (let i = 2; i <= value; i++) {\n      arr[i] = arr[i - 2] + arr[i - 1];\n      await delay(500);\n      setResult(arr.slice(0, i + 1));\n    }\n\n    setIsLoader(false);\n    setValue(\"\");\n  } else {\n    setIsLoader(false);\n    return null;\n  }\n};","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/utils/fibonacci-utils.ts"],"names":["delay","fibonacci","value","setResult","setIsLoader","setValue","valu","arr","i","slice"],"mappings":"AAAA,SAASA,KAAT,QAAsB,SAAtB;AAYA,OAAO,MAAMC,SAAS,GAAG,cAKV;AAAA,MALiB;AAC9BC,IAAAA,KAD8B;AAE9BC,IAAAA,SAF8B;AAG9BC,IAAAA,WAH8B;AAI9BC,IAAAA;AAJ8B,GAKjB;AACbC,EAAAA,IAAI;;AACJ,MAAIJ,KAAK,IAAI,CAAT,IAAcA,KAAK,IAAI,EAA3B,EAA+B;AAC7B,QAAIK,GAAG,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAV;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIN,KAArB,EAA4BM,CAAC,EAA7B,EAAiC;AAC/BD,MAAAA,GAAG,CAACC,CAAD,CAAH,GAASD,GAAG,CAACC,CAAC,GAAG,CAAL,CAAH,GAAaD,GAAG,CAACC,CAAC,GAAG,CAAL,CAAzB;AACA,YAAMR,KAAK,CAAC,GAAD,CAAX;AACAG,MAAAA,SAAS,CAACI,GAAG,CAACE,KAAJ,CAAU,CAAV,EAAaD,CAAC,GAAG,CAAjB,CAAD,CAAT;AACD;;AACDJ,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAC,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,GATD,MASO;AACLD,IAAAA,WAAW,CAAC,KAAD,CAAX;AACA,WAAO,IAAP;AACD;AACF,CApBM","sourcesContent":["import { delay } from \"./utils\";\nimport { Dispatch, SetStateAction } from \"react\";\n\ntype Dispatcher<S> = Dispatch<SetStateAction<S>>;\n\ninterface IProps {\n  value: string;\n  setResult: Dispatcher<number[] | null>;\n  setIsLoader: Dispatcher<boolean>;\n  setValue: Dispatcher<string>;\n}\n\nexport const fibonacci = async ({\n  value,\n  setResult,\n  setIsLoader,\n  setValue,\n}: IProps)  => {\n  valu\n  if (value >= 1 && value <= 19) {\n    let arr = [0, 1];\n    for (let i = 2; i <= value; i++) {\n      arr[i] = arr[i - 2] + arr[i - 1];\n      await delay(500);\n      setResult(arr.slice(0, i + 1));\n    }\n    setIsLoader(false);\n    setValue(\"\");\n  } else {\n    setIsLoader(false);\n    return null;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}