{"ast":null,"code":"var _jsxFileName = \"/Users/svetavo/dev/algososh/src/components/stack-page/stack-page.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport styles from \"./stack.module.css\";\nimport { Button } from \"../ui/button/button\";\nimport { Input } from \"../ui/input/input\";\nimport { Circle } from \"../ui/circle/circle\";\nimport { circleColor } from \"../../utils/stack-utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const StackPage = () => {\n  _s();\n\n  const [value, setValue] = useState(\"\");\n  const [isLoader, setIsLoader] = useState(false);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [stack, setStack] = useState([]);\n\n  const onChange = e => {\n    setValue(e.target.value);\n  };\n\n  const onAdd = () => {\n    value ? pushStack(value) : alert(\"Введите значение в инпут\");\n  };\n\n  const onDelete = () => {\n    stack.length ? popStack() : alert(\"стек пуст\");\n  };\n\n  const onClear = () => {\n    stack.length ? clearStack() : alert(\"стек пуст\");\n  };\n\n  const pushStack = item => {\n    setIsLoader(true);\n    stack.push(item);\n    setStack([...stack]);\n    setCurrentIndex(currentIndex + 1);\n    setValue(\"\");\n    setIsLoader(false);\n  };\n\n  console.log(currentIndex);\n\n  const popStack = () => {\n    setIsLoader(true);\n    stack.pop();\n    setStack([...stack]);\n    setCurrentIndex(currentIndex - 1);\n    setIsLoader(false);\n  };\n\n  const clearStack = () => {\n    setIsLoader(true);\n\n    while (stack.length > 0) {\n      stack.pop();\n    }\n\n    setStack([...stack]);\n    setIsLoader(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(SolutionLayout, {\n    title: \"\\u0421\\u0442\\u0435\\u043A\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.input,\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          onChange: onChange,\n          value: value,\n          maxLength: 4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\",\n          isLoader: isLoader,\n          extraClass: \"mr-5\",\n          onClick: onAdd\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\",\n          isLoader: isLoader,\n          extraClass: \"mr-20\",\n          onClick: onDelete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"\\u041E\\u0447\\u0438\\u0441\\u0442\\u0438\\u0442\\u044C\",\n          isLoader: isLoader,\n          onClick: onClear\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.result,\n          children: stack === null || stack === void 0 ? void 0 : stack.map((item, index) => /*#__PURE__*/_jsxDEV(Circle, {\n            letter: item,\n            index: index,\n            extraClass: styles.item,\n            state: circleColor(currentIndex, index, stack),\n            head: currentIndex === index + 1 ? \"top\" : null\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StackPage, \"PjNVcTnOxy3yw47MlKNBKuLFn7A=\");\n\n_c = StackPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"StackPage\");","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/components/stack-page/stack-page.tsx"],"names":["React","useState","SolutionLayout","styles","Button","Input","Circle","circleColor","StackPage","value","setValue","isLoader","setIsLoader","currentIndex","setCurrentIndex","stack","setStack","onChange","e","target","onAdd","pushStack","alert","onDelete","length","popStack","onClear","clearStack","item","push","console","log","pop","container","input","result","map","index"],"mappings":"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","sourcesContent":["import React, { useState, ChangeEvent } from \"react\";\nimport { SolutionLayout } from \"../ui/solution-layout/solution-layout\";\nimport styles from \"./stack.module.css\";\nimport { Button } from \"../ui/button/button\";\nimport { Input } from \"../ui/input/input\";\nimport { Circle } from \"../ui/circle/circle\";\nimport { circleColor } from \"../../utils/stack-utils\";\n\nexport const StackPage: React.FC = () => {\n  const [value, setValue] = useState(\"\");\n  const [isLoader, setIsLoader] = useState<boolean>(false);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [stack, setStack] = useState<string[]>([]);\n  \n  const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setValue(e.target.value);\n  };\n\n  const onAdd = () => {\n    value ? pushStack(value) : alert(\"Введите значение в инпут\");\n  };\n\n  const onDelete = () => {\n    stack.length ? popStack() : alert(\"стек пуст\");\n  };\n\n  const onClear = () => {\n    stack.length ? clearStack() : alert(\"стек пуст\");\n  };\n\n  const pushStack = (item: string) => {\n    setIsLoader(true);\n    stack.push(item);\n    setStack([...stack]);\n    setCurrentIndex(currentIndex + 1);\n    setValue(\"\");\n    setIsLoader(false);\n  };\n\n  console.log(currentIndex);\n\n  const popStack = () => {\n    setIsLoader(true);\n    stack.pop();\n    setStack([...stack]);\n    setCurrentIndex(currentIndex - 1);\n    setIsLoader(false);\n  };\n\n  const clearStack = () => {\n    setIsLoader(true);\n    while (stack.length > 0) {\n      stack.pop();\n    }\n    setStack([...stack]);\n    setIsLoader(false);\n  };\n\n  return (\n    <SolutionLayout title=\"Стек\">\n      <div className={styles.container}>\n        <div className={styles.input}>\n          <Input onChange={onChange} value={value} maxLength={4} />\n          <Button\n            text=\"Добавить\"\n            isLoader={isLoader}\n            extraClass=\"mr-5\"\n            onClick={onAdd}\n          />\n          <Button\n            text=\"Удалить\"\n            isLoader={isLoader}\n            extraClass=\"mr-20\"\n            onClick={onDelete}\n          />\n          <Button text=\"Очистить\" isLoader={isLoader} onClick={onClear} />\n        </div>\n        <div>\n          <div className={styles.result}>\n            {stack?.map((item, index) => (\n              <Circle\n                letter={item}\n                key={index}\n                index={index}\n                extraClass={styles.item}\n                state={circleColor(currentIndex, index, stack)}\n                head={currentIndex === index + 1 ? \"top\" : null}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </SolutionLayout>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}