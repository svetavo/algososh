{"ast":null,"code":"class Queue {\n  constructor() {\n    this.private = void 0;\n\n    this.enqueue = (index, item) => {\n      if (this.getSize() < this.maxSize) {\n        this.container.splice(index, 1, item);\n      }\n    };\n\n    this.dequeue = () => {\n      if (this.getSize()) {\n        this.container.pop();\n      }\n    };\n\n    this.peak = () => {\n      if (this.getSize()) {\n        return this.container[this.getSize() - 1];\n      }\n\n      return null;\n    };\n\n    this.clear = () => {\n      this.container = [];\n    };\n\n    this.getSize = () => this.container.length;\n\n    this.printStack = () => this.container;\n\n    this.isFull = () => {\n      if (this.getSize() < this.maxSize) {\n        return false;\n      }\n\n      return true;\n    };\n  }\n\n}\n\nexport const queue = new Queue();","map":{"version":3,"sources":["/Users/svetavo/dev/algososh/src/components/queue-page/queue_class.tsx"],"names":["Queue","constructor","private","enqueue","index","item","getSize","maxSize","container","splice","dequeue","pop","peak","clear","length","printStack","isFull","queue"],"mappings":"AAUE,MAAMA,KAAN,CAAoC;AAClCC,EAAAA,WAAW,GAAG;AAAA,SAGdC,OAHc;;AAAA,SAIdC,OAJc,GAIJ,CAACC,KAAD,EAAgBC,IAAhB,KAA4B;AACpC,UAAI,KAAKC,OAAL,KAAiB,KAAKC,OAA1B,EAAmC;AACjC,aAAKC,SAAL,CAAeC,MAAf,CAAsBL,KAAtB,EAA6B,CAA7B,EAAgCC,IAAhC;AACD;AACF,KARa;;AAAA,SAUdK,OAVc,GAUJ,MAAY;AACpB,UAAI,KAAKJ,OAAL,EAAJ,EAAoB;AAClB,aAAKE,SAAL,CAAeG,GAAf;AACD;AACF,KAda;;AAAA,SAgBdC,IAhBc,GAgBP,MAAgB;AACrB,UAAI,KAAKN,OAAL,EAAJ,EAAoB;AAClB,eAAO,KAAKE,SAAL,CAAe,KAAKF,OAAL,KAAiB,CAAhC,CAAP;AACD;;AACD,aAAO,IAAP;AACD,KArBa;;AAAA,SAuBdO,KAvBc,GAuBN,MAAY;AAClB,WAAKL,SAAL,GAAiB,EAAjB;AACD,KAzBa;;AAAA,SA2BdF,OA3Bc,GA2BJ,MAAM,KAAKE,SAAL,CAAeM,MA3BjB;;AAAA,SA6BdC,UA7Bc,GA6BD,MAAM,KAAKP,SA7BV;;AAAA,SA+BdQ,MA/Bc,GA+BL,MAAM;AACb,UAAI,KAAKV,OAAL,KAAiB,KAAKC,OAA1B,EAAmC;AACjC,eAAO,KAAP;AACD;;AACD,aAAO,IAAP;AACD,KApCa;AAEb;;AAHiC;;AAwCpC,OAAO,MAAMU,KAAK,GAAG,IAAIjB,KAAJ,EAAd","sourcesContent":["interface IQueue<T> {\n    enqueue: (index: number, item: T) => void;\n    dequeue: () => void;\n    peak: () => T | null;\n    getSize: () => number;\n    printStack: () => T[];\n    clear: () => void;\n    isFull: () => boolean;\n  }\n  \n  class Queue<T> implements IQueue<T> {\n    constructor() {\n\n    }\n    private \n    enqueue = (index: number, item: T) => {\n      if (this.getSize() < this.maxSize) {\n        this.container.splice(index, 1, item);\n      }\n    };\n  \n    dequeue = (): void => {\n      if (this.getSize()) {\n        this.container.pop();\n      }\n    };\n  \n    peak = (): T | null => {\n      if (this.getSize()) {\n        return this.container[this.getSize() - 1];\n      }\n      return null;\n    };\n  \n    clear = (): void => {\n      this.container = [];\n    };\n  \n    getSize = () => this.container.length;\n  \n    printStack = () => this.container;\n  \n    isFull = () => {\n      if (this.getSize() < this.maxSize) {\n        return false;\n      }\n      return true;\n    };\n  }\n  \n  export const queue = new Queue<string>();\n  "]},"metadata":{},"sourceType":"module"}